--- fquery-0.2.1.3-orig/Adelie/Depend.hs	2011-07-24 21:26:38.000000000 +1000
+++ fquery-0.2.1.3/Adelie/Depend.hs	2012-06-29 22:26:54.006431329 +1000
@@ -14,6 +14,7 @@
 
 import Data.Char (isSpace)
 import Data.List (nub)
+import qualified Control.Exception
 import Text.ParserCombinators.Parsec
 import Text.ParserCombinators.Parsec.Language
 import Text.ParserCombinators.Parsec.Token
@@ -39,7 +40,7 @@
 
 readDepend :: FilePath -> [String] -> IO [Dependency]
 readDepend fn iUse = do
-  r <- (start_parser fn) `catch` (\ _ -> return $ Right [])
+  r <- (start_parser fn) `Control.Exception.catch` ((\ _ -> return $ Right []) :: Control.Exception.SomeException -> IO (Either ParseError [Dependency]))
   case r of
     Left err -> putStr "Parse error at " >> print err >> error "Aborting"
     Right x  -> return $ nub x
--- fquery-0.2.1.3-orig/Adelie/Provide.hs	2011-07-24 21:26:38.000000000 +1000
+++ fquery-0.2.1.3/Adelie/Provide.hs	2012-06-29 22:20:58.759218549 +1000
@@ -8,6 +8,7 @@
 ) where
 
 import Control.Monad (liftM)
+import qualified Control.Exception
 
 import Adelie.Portage
 
@@ -19,4 +20,4 @@
 ----------------------------------------------------------------
 
 readProvide :: FilePath -> IO [String]
-readProvide fn = (liftM words (readFile fn)) `catch` (\ _ -> return [])
+readProvide fn = (liftM words (readFile fn)) `Control.Exception.catch` ((\ _ -> return []) :: Control.Exception.SomeException -> IO [String])
--- fquery-0.2.1.3-orig/Adelie/Use.hs	2011-07-24 21:26:38.000000000 +1000
+++ fquery-0.2.1.3/Adelie/Use.hs	2012-06-29 22:18:01.732126156 +1000
@@ -12,6 +12,7 @@
 
 import Data.List (nub, sort)
 import Control.Monad (liftM)
+import qualified Control.Exception
 
 import Adelie.Portage
 
@@ -26,9 +27,9 @@
 ----------------------------------------------------------------
 
 readUse :: FilePath -> IO [String]
-readUse fn = (liftM words $ readFile fn) `catch` (\ _ -> return [])
+readUse fn = (liftM words $ readFile fn) `Control.Exception.catch` ((\ _ -> return []) :: Control.Exception.SomeException -> IO [String])
 
 -- IUSE files sometimes have duplicate USE flags.  I am not sure if it is the
 -- intended behaviour, but I filter them out.
 readIUse :: FilePath -> IO [String]
-readIUse fn = (liftM (nub.sort.words) $ readFile fn) `catch` (\ _ -> return [])
+readIUse fn = (liftM (nub.sort.words) $ readFile fn) `Control.Exception.catch` ((\ _ -> return []) :: Control.Exception.SomeException -> IO [String])
