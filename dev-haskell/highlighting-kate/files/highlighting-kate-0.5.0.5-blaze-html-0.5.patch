--- highlighting-kate-0.5.0.5-orig/highlighting-kate.cabal	2012-02-15 13:16:37.000000000 +1100
+++ highlighting-kate-0.5.0.5/highlighting-kate.cabal	2012-04-22 23:53:12.661165263 +1000
@@ -144,7 +144,7 @@
     cpp-options:     -D_PCRE_LIGHT
   else
     Build-depends:   regex-pcre-builtin
-  Build-Depends:     parsec, mtl, blaze-html >= 0.4.2 && < 0.5
+  Build-Depends:     parsec, mtl, blaze-html >= 0.5 && < 0.6, blaze-markup >= 0.5.1 && < 0.6
   Exposed-Modules:   Text.Highlighting.Kate
                      Text.Highlighting.Kate.Syntax
                      Text.Highlighting.Kate.Types
@@ -253,7 +253,7 @@
 
 Executable Highlight
   Main-Is:          Highlight.hs
-  Build-Depends:    base, containers, blaze-html >= 0.4.2 && < 0.5, filepath
+  Build-Depends:    base, containers, blaze-html >= 0.4.2 && < 0.6, filepath
   if flag(pcre-light)
     cpp-options:     -D_PCRE_LIGHT
   Ghc-Options:      -W -O0 -rtsopts
--- highlighting-kate-0.5.0.5-orig/Text/Highlighting/Kate/Format/HTML.hs	2012-02-15 13:16:37.000000000 +1100
+++ highlighting-kate-0.5.0.5/Text/Highlighting/Kate/Format/HTML.hs	2012-04-22 23:45:00.928685659 +1000
@@ -29,19 +29,19 @@
 -- 'OtherTok' = @ot@, 'AlertTok' = @al@, 'FunctionTok' = @fu@,
 -- 'RegionMarkerTok' = @re@, 'ErrorTok' = @er@. A 'NormalTok'
 -- is not marked up at all.
-formatHtmlInline :: FormatOptions -> [SourceLine] -> Html
+formatHtmlInline :: FormatOptions -> [SourceLine] -> H.Html
 formatHtmlInline opts = (H.code ! A.class_ (toValue $ unwords
                                                     $ "sourceCode" : codeClasses opts))
-                                . mconcat . intersperse (toHtml "\n")
+                                . mconcat . intersperse (H.toHtml "\n")
                                 . map (sourceLineToHtml opts)
 
-tokenToHtml :: FormatOptions -> Token -> Html
-tokenToHtml _ (NormalTok, txt)  = toHtml txt
+tokenToHtml :: FormatOptions -> Token -> H.Html
+tokenToHtml _ (NormalTok, txt)  = H.toHtml txt
 tokenToHtml opts (toktype, txt) =
   if titleAttributes opts
      then sp ! A.title (toValue $ show toktype)
      else sp
-   where sp = H.span ! A.class_ (toValue $ short toktype) $ toHtml txt
+   where sp = H.span ! A.class_ (toValue $ short toktype) $ H.toHtml txt
 
 short :: TokenType -> String
 short KeywordTok        = "kw"
@@ -59,16 +59,16 @@
 short ErrorTok          = "er"
 short NormalTok         = ""
 
-sourceLineToHtml :: FormatOptions -> SourceLine -> Html
+sourceLineToHtml :: FormatOptions -> SourceLine -> H.Html
 sourceLineToHtml opts contents = mapM_ (tokenToHtml opts) contents
 
-formatHtmlBlockPre :: FormatOptions -> [SourceLine] -> Html
+formatHtmlBlockPre :: FormatOptions -> [SourceLine] -> H.Html
 formatHtmlBlockPre opts = H.pre . formatHtmlInline opts
 
 -- | Format tokens as an HTML @pre@ block. If line numbering is
 -- selected, this is put into a table row with line numbers in the
 -- left cell.
-formatHtmlBlock :: FormatOptions -> [SourceLine] -> Html
+formatHtmlBlock :: FormatOptions -> [SourceLine] -> H.Html
 formatHtmlBlock opts ls = container ! A.class_ (toValue $ unwords classes)
   where  container = if numberLines opts
                         then H.table $ H.tr ! A.class_ sourceCode
@@ -84,9 +84,9 @@
                      $ H.pre
                      $ mapM_ lineNum [startNum..(startNum + length ls - 1)]
          lineNum n = if lineAnchors opts
-                        then (H.a ! A.id (toValue $ show n) $ toHtml $ show n)
-                              >> toHtml "\n"
-                        else toHtml $ show n ++ "\n"
+                        then (H.a ! A.id (toValue $ show n) $ H.toHtml $ show n)
+                              >> H.toHtml "\n"
+                        else H.toHtml $ show n ++ "\n"
 
 -- | Returns CSS for styling highlighted code according to the given style.
 styleToCss :: Style -> String
--- highlighting-kate-0.5.0.5-orig/Highlight.hs	2012-02-15 13:16:37.000000000 +1100
+++ highlighting-kate-0.5.0.5/Highlight.hs	2012-04-22 23:48:21.708170893 +1000
@@ -127,10 +127,10 @@
 hlHtml frag fname opts sty lang code =
  if frag
     then putStrLn $ renderHtml fragment
-    else putStrLn $ renderHtml $ H.head (pageTitle >> metadata >> css) >> H.body (toHtml fragment)
+    else putStrLn $ renderHtml $ H.head (pageTitle >> metadata >> css) >> H.body (H.toHtml fragment)
   where fragment = formatHtmlBlock opts $ highlightAs lang code
-        css = H.style ! A.type_ "text/css" $ toHtml $ styleToCss sty
-        pageTitle = H.title $ toHtml fname
+        css = H.style ! A.type_ "text/css" $ H.toHtml $ styleToCss sty
+        pageTitle = H.title $ H.toHtml fname
         metadata = H.meta ! A.httpEquiv "Content-Type" ! A.content "text/html; charset=UTF-8" >>
                     H.meta ! A.name "generator" ! A.content "highlight-kate"
 
