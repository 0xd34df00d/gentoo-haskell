--- epic-0.1.11-orig/Main.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Main.lhs	2011-08-13 13:18:44.815693042 +1000
@@ -1,11 +1,11 @@
 > module Main where
 
-> import System
+> import System.Exit
 > import System.Directory
 > import System.Environment
 > import System.IO
 > import Distribution.Version
-> import Monad
+> import Control.Monad
 
 > import Epic.Compiler
 > import Paths_epic
--- epic-0.1.11-orig/epic.cabal	2011-04-18 20:07:36.000000000 +1000
+++ epic-0.1.11/epic.cabal	2011-08-13 13:17:36.172930388 +1000
@@ -27,7 +27,7 @@
         Other-modules: Epic.Bytecode Epic.Parser Epic.Scopecheck
                        Epic.Language Epic.Lexer Epic.CodegenC
                        Epic.OTTLang Epic.Simplify Paths_epic
-        Build-depends:	base >=4 && <5 , haskell98, mtl, Cabal, array, directory
+        Build-depends:	base >=4 && <5, process, mtl, Cabal, array, directory
 
 
 Executable     epic
@@ -35,5 +35,5 @@
                Other-modules: Epic.Bytecode Epic.Parser Epic.Scopecheck
                        Epic.Language Epic.Lexer Epic.CodegenC
                        Epic.OTTLang Epic.Simplify Paths_epic
-               Build-depends: base >=4 && <5, mtl, array, haskell98, Cabal, directory
+               Build-depends: base >=4 && <5, mtl, array, process, Cabal, directory
 
--- epic-0.1.11-orig/Epic/Epic.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Epic.lhs	2011-08-13 13:17:03.414089488 +1000
@@ -43,8 +43,8 @@
 Combinators for constructing an expression
 
 > import Control.Monad.State
-> import System
 > import System.IO
+> import System.Process (system)
 
 > import Epic.Language
 > import Epic.Compiler
--- epic-0.1.11-orig/Epic/Compiler.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Compiler.lhs	2011-08-13 13:16:08.805688521 +1000
@@ -17,11 +17,12 @@
 
 Brings everything together; parsing, checking, code generation
 
-> import System
+> import System.Cmd (system)
+> import System.Exit
 > import System.IO
 > import System.Directory
 > import System.Environment
-> import Char
+> import Data.Char
 
 > import Epic.Language
 > import Epic.Parser
--- epic-0.1.11-orig/Setup.hs	2011-04-18 20:07:36.000000000 +1000
+++ epic-0.1.11/Setup.hs	2011-08-13 12:42:08.309745182 +1000
@@ -3,7 +3,8 @@
 import Distribution.Simple.LocalBuildInfo
 import Distribution.PackageDescription
 
-import System
+import System.Cmd (system)
+import System.Exit
 
 -- After Epic is built, we need a run time system.
 
--- epic-0.1.11-orig/Epic/Parser.y	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Parser.y	2011-08-13 13:14:44.398523031 +1000
@@ -1,9 +1,10 @@
 { -- -*-Haskell-*-
 {-# OPTIONS_GHC -fglasgow-exts #-}
-
+{-# LANGUAGE BangPatterns #-}
+  
 module Epic.Parser where
 
-import Char
+import Data.Char
 import System.IO.Unsafe
 
 import Epic.Language
--- epic-0.1.11-orig/dist/build/Epic/Parser.hs	2011-04-18 20:07:36.000000000 +1000
+++ epic-0.1.11/dist/build/Epic/Parser.hs	2011-08-13 13:14:47.961614442 +1000
@@ -1,11 +1,12 @@
-{-# OPTIONS_GHC -fno-warn-overlapping-patterns #-}
+{-# OPTIONS_GHC -w #-}
 {-# OPTIONS -fglasgow-exts -cpp #-}
 -- -*-Haskell-*-
 {-# OPTIONS_GHC -fglasgow-exts #-}
-
+{-# LANGUAGE BangPatterns #-}
+  
 module Epic.Parser where
 
-import Char
+import Data.Char
 import System.IO.Unsafe
 
 import Epic.Language
@@ -13,7 +14,7 @@
 import qualified Data.Array as Happy_Data_Array
 import qualified GHC.Exts as Happy_GHC_Exts
 
--- parser produced by Happy Version 1.18.5
+-- parser produced by Happy Version 1.18.6
 
 newtype HappyAbsSyn  = HappyAbsSyn HappyAny
 #if __GLASGOW_HASKELL__ >= 607
@@ -1333,7 +1334,7 @@
 {-# LINE 1 "templates/GenericTemplate.hs" #-}
 {-# LINE 1 "templates/GenericTemplate.hs" #-}
 {-# LINE 1 "<built-in>" #-}
-{-# LINE 1 "<command line>" #-}
+{-# LINE 1 "<command-line>" #-}
 {-# LINE 1 "templates/GenericTemplate.hs" #-}
 -- Id: GenericTemplate.hs,v 1.26 2005/01/14 14:47:22 simonmar Exp 
 
@@ -1393,13 +1394,13 @@
 
 
 				     happyShift new_state i tk st
-				     where !(new_state) = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
-   where !(off)    = indexShortOffAddr happyActOffsets st
-         !(off_i)  = (off Happy_GHC_Exts.+# i)
+				     where (new_state) = (n Happy_GHC_Exts.-# (1# :: Happy_GHC_Exts.Int#))
+   where (off)    = indexShortOffAddr happyActOffsets st
+         (off_i)  = (off Happy_GHC_Exts.+# i)
 	 check  = if (off_i Happy_GHC_Exts.>=# (0# :: Happy_GHC_Exts.Int#))
 			then (indexShortOffAddr happyCheck off_i Happy_GHC_Exts.==#  i)
 			else False
-         !(action)
+         (action)
           | check     = indexShortOffAddr happyTable off_i
           | otherwise = indexShortOffAddr happyDefActions st
 
@@ -1409,10 +1410,10 @@
 indexShortOffAddr (HappyA# arr) off =
 	Happy_GHC_Exts.narrow16Int# i
   where
-	!i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
-	!high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
-	!low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
-	!off' = off Happy_GHC_Exts.*# 2#
+        i = Happy_GHC_Exts.word2Int# (Happy_GHC_Exts.or# (Happy_GHC_Exts.uncheckedShiftL# high 8#) low)
+        high = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr (off' Happy_GHC_Exts.+# 1#)))
+        low  = Happy_GHC_Exts.int2Word# (Happy_GHC_Exts.ord# (Happy_GHC_Exts.indexCharOffAddr# arr off'))
+        off' = off Happy_GHC_Exts.*# 2#
 
 
 
@@ -1432,7 +1433,7 @@
 -- Shifting a token
 
 happyShift new_state 0# tk st sts stk@(x `HappyStk` _) =
-     let !(i) = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
+     let (i) = (case Happy_GHC_Exts.unsafeCoerce# x of { (Happy_GHC_Exts.I# (i)) -> i }) in
 --     trace "shifting the error token" $
      happyDoAction i tk new_state (HappyCons (st) (sts)) (stk)
 
@@ -1476,19 +1477,19 @@
      = happyFail 0# tk st sts stk
 happyMonadReduce k nt fn j tk st sts stk =
         happyThen1 (fn stk tk) (\r -> happyGoto nt j tk st1 sts1 (r `HappyStk` drop_stk))
-       where !(sts1@((HappyCons (st1@(action)) (_)))) = happyDrop k (HappyCons (st) (sts))
+       where (sts1@((HappyCons (st1@(action)) (_)))) = happyDrop k (HappyCons (st) (sts))
              drop_stk = happyDropStk k stk
 
 happyMonad2Reduce k nt fn 0# tk st sts stk
      = happyFail 0# tk st sts stk
 happyMonad2Reduce k nt fn j tk st sts stk =
        happyThen1 (fn stk tk) (\r -> happyNewToken new_state sts1 (r `HappyStk` drop_stk))
-       where !(sts1@((HappyCons (st1@(action)) (_)))) = happyDrop k (HappyCons (st) (sts))
+       where (sts1@((HappyCons (st1@(action)) (_)))) = happyDrop k (HappyCons (st) (sts))
              drop_stk = happyDropStk k stk
 
-             !(off) = indexShortOffAddr happyGotoOffsets st1
-             !(off_i) = (off Happy_GHC_Exts.+# nt)
-             !(new_state) = indexShortOffAddr happyTable off_i
+             (off) = indexShortOffAddr happyGotoOffsets st1
+             (off_i) = (off Happy_GHC_Exts.+# nt)
+             (new_state) = indexShortOffAddr happyTable off_i
 
 
 
@@ -1506,9 +1507,9 @@
 happyGoto nt j tk st = 
    {- nothing -}
    happyDoAction j tk new_state
-   where !(off) = indexShortOffAddr happyGotoOffsets st
-         !(off_i) = (off Happy_GHC_Exts.+# nt)
-         !(new_state) = indexShortOffAddr happyTable off_i
+   where (off) = indexShortOffAddr happyGotoOffsets st
+         (off_i) = (off Happy_GHC_Exts.+# nt)
+         (new_state) = indexShortOffAddr happyTable off_i
 
 
 
@@ -1540,6 +1541,7 @@
 
 -- Internal happy errors:
 
+notHappyAtAll :: a
 notHappyAtAll = error "Internal Happy error\n"
 
 -----------------------------------------------------------------------------
--- epic-0.1.11-orig/Epic/Lexer.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Lexer.lhs	2011-08-13 12:44:31.163350032 +1000
@@ -1,6 +1,6 @@
 > module Epic.Lexer where
 
-> import Char
+> import Data.Char
 
 > import Epic.Language
 
--- epic-0.1.11-orig/Epic/Language.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Language.lhs	2011-08-13 12:44:24.779188782 +1000
@@ -1,7 +1,6 @@
 > module Epic.Language where
 
 > import Control.Monad
-> import System
 > import System.IO
 > import System.Directory
 > import System.Environment
--- epic-0.1.11-orig/Epic/Bytecode.lhs	2011-04-18 20:07:35.000000000 +1000
+++ epic-0.1.11/Epic/Bytecode.lhs	2011-08-13 12:44:09.417800871 +1000
@@ -1,7 +1,7 @@
 > module Epic.Bytecode where
 
 > import Control.Monad.State
-> import List
+> import Data.List
 
 > import Epic.Language
 > import Debug.Trace
