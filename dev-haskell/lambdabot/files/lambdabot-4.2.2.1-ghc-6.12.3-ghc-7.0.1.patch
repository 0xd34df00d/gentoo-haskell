--- lambdabot-4.2.2.1-orig/lambdabot.cabal	2009-01-18 16:01:17.000000000 +1100
+++ lambdabot-4.2.2.1/lambdabot.cabal	2011-01-04 15:26:08.395572470 +1100
@@ -26,8 +26,11 @@
                     State/imports.h,
                     online.rc, online2.rc
 
+flag eval
+    description: Use mueval to evaluate pure Haskell expressions at runtime
+
 Library
-    build-depends: base, mtl, bytestring, unix
+    build-depends: base, mtl, bytestring, unix, filepath
     exposed-modules: Config, IRCBase, File,
                      LBState, LMain, Lambdabot, Message,
                      NickEq, Plugin, Plugin.Activity, Plugin.BF,
@@ -52,13 +55,18 @@
 
 -- Lambdabot main
 Executable          lambdabot
-    Build-depends:       containers, directory, pretty, parsec, old-time, random, array, network,
+    Build-depends:       base >= 4 && < 5,
+                         containers, directory, pretty, parsec, old-time, random, array, network,
                          regex-compat, readline, binary>0.2, haskell-src,
                          -- TODO: update Plugin.Eval for 0.4 and up
-                         haskell-src-exts>=0.3.6 && < 0.4,
-                         oeis, lambdabot-utils, show>=0.3, utf8-string, template-haskell,
-                         -- runtime dependencies
-                         brainfuck, unlambda, template-haskell
+                         haskell-src-exts>=0.3.6 && < 2.0,
+                         oeis, lambdabot-utils, show>=0.3, utf8-string, template-haskell, filepath, tagsoup, HTTP,
+                         unix, base, mtl, bytestring, syb,
+                         -- runtime dependencies - for eval etc.
+                         brainfuck, unlambda, template-haskell, numbers, logict, IOSpec, vector-space, MonadRandom,
+                         data-memocombinators, arrows
+    if flag(eval)
+        Build-depends: mueval>=0.8
     Main-is:             Main.hs
     -- For a faster build, use -Onot
     ghc-options:         -funbox-strict-fields -fno-warn-incomplete-patterns
--- lambdabot-4.2.2.1-orig/Lambdabot.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Lambdabot.hs	2010-12-10 13:03:54.287148735 +1100
@@ -69,7 +69,7 @@
 
 import Control.Concurrent (myThreadId, newEmptyMVar, newMVar, readMVar, putMVar,
                            takeMVar, threadDelay, MVar, ThreadId)
-import Control.Exception
+import Control.OldException
 import Control.Monad.Error (MonadError (..))
 import Control.Monad.Reader
 import Control.Monad.State
--- lambdabot-4.2.2.1-orig/Plugin/Base.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Base.hs	2010-12-10 13:03:54.287148735 +1100
@@ -12,7 +12,7 @@
 
 import Control.Monad.State  (MonadState(..), when, gets)
 
-import Control.Exception    (Exception(NoMethodError))
+import Control.OldException    (Exception(NoMethodError))
 
 import qualified Data.ByteString.Char8 as P
 import qualified Text.Regex as R
--- lambdabot-4.2.2.1-orig/Plugin/Compose.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Compose.hs	2010-12-10 13:03:54.288171064 +1100
@@ -11,7 +11,7 @@
 
 import Control.Monad.State
 import Control.Arrow (first)
-import Control.Exception   (Exception(NoMethodError))
+import Control.OldException   (Exception(NoMethodError))
 
 $(plugin "Compose")
 
--- lambdabot-4.2.2.1-orig/Plugin/Dict/DictLookup.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Dict/DictLookup.hs	2010-12-10 13:03:54.289173344 +1100
@@ -19,7 +19,7 @@
 
 import Data.List
 import System.IO
-import Control.Exception (handle)
+import Control.OldException (handle)
 import Network
 
 data QueryConfig    = QC { host :: String, port :: Int }
--- lambdabot-4.2.2.1-orig/Plugin/Eval.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Eval.hs	2011-01-05 00:35:12.112690982 +1100
@@ -10,13 +10,13 @@
 import Plugin
 import Lambdabot.Parser
 import Language.Haskell.Exts.Parser
-import Language.Haskell.Exts.Syntax hiding (Module)
+import qualified Language.Haskell.Exts.Syntax as Hs
 import qualified Text.Regex as R
 import System.Directory
 import System.Exit
 import Codec.Binary.UTF8.String (decodeString)
 import qualified Data.ByteString.Char8 as P
-import Control.Exception (try)
+import Control.OldException (try)
 
 $(plugin "Plugs")
 
@@ -50,7 +50,16 @@
 plugs :: String -> IO String
 plugs src = do
             load <- findFile "L.hs"
-            (out,err,_) <- popen binary ["-E", "--timelimit=", "10", "-l", load, "--expression=" ++ src] Nothing
+            -- How it is in darcs
+            -- let args = ["-E", "-XBangPatterns", "-XNoMonomorphismRestriction", "-XViewPatterns", "--noimports", "-l", load, "--expression=" ++ src, "+RTS", "-N2", "-RTS"]
+            -- This is probably what it should be like with -E exchanged for the individual options.
+            -- However it fails at runtime with hint-0.3.3.1 that I patched to compile with ghc 7.0.1
+            -- with mueval-core: UnknownError "flag: '-XNoCPP ... zillions of options ... -XNoNoNewQualifiedOperators' not recognized"
+            -- let args = ["-XForeignFunctionInterface", "-XUnliftedFFITypes", "-XImplicitParams", "-XScopedTypeVariables", "-XUnboxedTuples", "-XTypeSynonymInstances", "-XStandaloneDeriving", "-XDeriveDataTypeable", "-XDeriveFunctor", "-XDeriveFoldable", "-XDeriveTraversable", "-XFlexibleContexts", "-XFlexibleInstances", "-XConstrainedClassMethods", "-XMultiParamTypeClasses", "-XFunctionalDependencies", "-XMagicHash", "-XPolymorphicComponents", "-XExistentialQuantification", "-XUnicodeSyntax", "-XPostfixOperators", "-XPatternGuards", "-XLiberalTypeSynonyms", "-XRankNTypes", "-XTypeOperators", "-XDoRec", "-XParallelListComp", "-XEmptyDataDecls", "-XKindSignatures", "-XGeneralizedNewtypeDeriving", "-XBangPatterns", "-XNoMonomorphismRestriction", "-XViewPatterns", "--noimports", "-l", load, "--expression=" ++ src, "+RTS", "-N2", "-RTS"]
+            -- So hint-0.3.3.1 can not handle any -X options at all, or -E.
+            let args = ["--noimports", "-l", load, "--expression=" ++ src, "+RTS", "-N2", "-RTS"]
+            -- print args
+            (out,err,_) <- popen binary args Nothing
             case (out,err) of
                 ([],[]) -> return "Terminated\n"
                 _       -> do
@@ -67,16 +76,16 @@
 
 define :: String -> IO String
 define src = case parseModule (decodeString src ++ "\n") of -- extra \n so comments are parsed correctly
-    (ParseOk (HsModule _ _ (Just [HsEVar (UnQual (HsIdent "main"))]) [] ds))
+    (ParseOk (Hs.Module _ _ _ _ (Just [Hs.EVar (Hs.UnQual (Hs.Ident "main"))]) [] ds))
         | all okay ds -> comp (Just src)
     (ParseFailed _ e) -> return $ " " ++ e
     _                 -> return "Invalid declaration"
  where
-    okay (HsTypeSig   {}) = True
-    okay (HsFunBind   {}) = True
-    okay (HsPatBind   {}) = True
-    okay (HsInfixDecl {}) = True
-    okay _                = False
+    okay (Hs.TypeSig   {}) = True
+    okay (Hs.FunBind   {}) = True
+    okay (Hs.PatBind   {}) = True
+    okay (Hs.InfixDecl {}) = True
+    okay _                 = False
 
 -- It parses. then add it to a temporary L.hs and typecheck
 comp :: Maybe String -> IO String
@@ -140,6 +149,8 @@
 -- Clean up runplugs' output
 --
 clean_ :: String -> String
+clean_ = id
+{-
 clean_ s|  no_io      `matches'`    s = "No IO allowed\n"
         |  type_sig   `matches'`    s = "Add a type signature\n"
         |  enomem     `matches'`    s = "Tried to use too much memory\n"
@@ -174,6 +185,7 @@
         nomatch    = regex' "Couldn't match[^\n]*\n"
         inaninst   = regex' "^[ \t]*In a.*$"
         enomem     = regex' "^Heap exhausted"
+-}
 
 ------------------------------------------------------------------------
 --
--- lambdabot-4.2.2.1-orig/Plugin/Help.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Help.hs	2010-12-10 13:03:54.290165817 +1100
@@ -3,7 +3,7 @@
 module Plugin.Help (theModule) where
 
 import Plugin
-import Control.Exception    (Exception(..), evaluate)
+import Control.OldException    (Exception(..), evaluate)
 
 $(plugin "Help")
 
--- lambdabot-4.2.2.1-orig/Plugin/IRC.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/IRC.hs	2010-12-10 13:03:54.290165817 +1100
@@ -5,7 +5,7 @@
 
 import Control.Concurrent( forkIO, newQSem, waitQSem, threadDelay, signalQSem,
                            newEmptyMVar, putMVar, takeMVar, MVar )
-import Control.Exception
+import Control.OldException
 import IRCBase
 import LMain( received )
 import Message
--- lambdabot-4.2.2.1-orig/Plugin/Quote/Fortune.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Quote/Fortune.hs	2010-12-10 13:03:54.290165817 +1100
@@ -10,7 +10,7 @@
 import Data.List
 import Control.Monad
 import System.Directory
-import qualified Control.Exception as C (catch)
+import qualified Control.OldException as C (catch)
 
 #ifndef mingw32_HOST_OS
 --
--- lambdabot-4.2.2.1-orig/File.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/File.hs	2011-01-04 11:15:57.365397608 +1100
@@ -2,21 +2,26 @@
 
 import Control.Monad
 import System.Directory
+import System.FilePath
 import Paths_lambdabot (getDataFileName)
 
 -- | Constants.
-lambdabot, local, state :: String
-lambdabot = "/.lambdabot/"
-state = lambdabot ++ local
-local = "State/"
+lambdabot, local, state :: FilePath
+lambdabot = ".lambdabot"
+state = lambdabot </> local
+local = "State"
+
+maybeFileExists :: FilePath -> IO (Maybe FilePath)
+maybeFileExists path = 
+    do b <- doesFileExist path
+       return $ if b then Just path else Nothing
 
 -- | For a given file, look locally under State/. That is, suppose one is
 -- running out of a Lambdabot darcs repository in /home/cale/lambdabot. Then
 --
 -- > lookLocally "fact" ~> "/home/cale/lambdabot/State/fact"
 lookLocally :: FilePath -> IO (Maybe String)
-lookLocally f = do b <- doesFileExist (local ++ f)
-                   if b then return $ Just (local ++ f) else return Nothing
+lookLocally file = maybeFileExists $ local </> file
 
 -- | For a given file, look at the home directory. By default, we stash files in
 -- ~/.lambdabot. So, running Lambdabot normally would let us do:
@@ -26,29 +31,24 @@
 -- (Note that for convenience we preserve the "State/foo" address pattern.)
 lookHome :: FilePath -> IO (Maybe String)
 lookHome f = do home <- getHomeDirectory
-                let full = home ++ state ++ f
-                b <- doesFileExist (full)
-                if b then return $ Just full else return Nothing
+                maybeFileExists $ home </> state </> f
 
 -- | Do ~/.lambdabot & ~/.lambdabot/State exist?
 isHome :: IO Bool
 isHome = do home <- getHomeDirectory
-            top <- doesDirectoryExist (home ++ lambdabot)
-            stat <- doesDirectoryExist (home ++ state)
-            return (top && stat)
+            fmap and . mapM (doesDirectoryExist . (home </>)) $ [lambdabot, state]
 
 -- | Create ~/.lambdabot and ~/.lambdabot/State
 mkdirL :: IO ()
 mkdirL = do home <- getHomeDirectory
-            createDirectory (home ++ lambdabot)
-            createDirectory (home ++ state)
+            mapM_ (createDirectory . (home </>)) $ [lambdabot, state]
 
 -- | Ask Cabal for the read-only copy of a file, and copy it into ~/.lambdabot/State.
 cpDataToHome :: FilePath -> IO ()
-cpDataToHome f = do rofile <- getDataFileName ("State/" ++ f)
+cpDataToHome f = do rofile <- getDataFileName (local </> f)
                     home <- getHomeDirectory
                     -- cp /.../lambdabot-4.foo/State/foo ~/.lambdabot/State/foo
-                    copyFile rofile (home ++ state ++ f)
+                    copyFile rofile (home </> state </> f)
 
 -- | Complicated. If a file exists locally, we return that. If a file exists in
 -- ~/lambdabot/State, we return that. If neither the file nor ~/lambdabot/State
@@ -57,7 +57,6 @@
 -- into the conventional functions easily; unfortunately, this removes
 -- error-checking, as an error is now just \"\".
 findFile :: FilePath -> IO String
-
 findFile f = do first <- lookLocally f
                 case first of
                   -- With any luck we can exit quickly
@@ -78,4 +77,7 @@
                                                 g <- lookHome f
                                                 case g of
                                                   Just a -> return a
-                                                  Nothing -> return ""
+                                                  Nothing -> 
+                                                      do home <- getHomeDirectory 
+                                                         fail $ "File.findFile: couldn't find file " 
+                                                                ++ f ++ " in " ++ home </> state
--- lambdabot-4.2.2.1-orig/Modules.hs	2009-01-18 16:01:17.000000000 +1100
+++ lambdabot-4.2.2.1/Modules.hs	2011-01-04 11:15:57.398388910 +1100
@@ -39,7 +39,7 @@
 import qualified Plugin.Pretty
 import qualified Plugin.Quote
 import qualified Plugin.Search
-import qualified Plugin.Seen
+--import qualified Plugin.Seen
 import qualified Plugin.Slap
 import qualified Plugin.Source
 import qualified Plugin.Spell
@@ -53,7 +53,7 @@
 import qualified Plugin.Undo
 import qualified Plugin.Unlambda
 import qualified Plugin.UnMtl
-import qualified Plugin.Url
+--import qualified Plugin.Url
 import qualified Plugin.Version
 import qualified Plugin.Vixen
 import qualified Plugin.Where
@@ -98,7 +98,7 @@
                     , "Pretty"
                     , "Quote"
                     , "Search"
-                    , "Seen"
+                    --, "Seen"
                     , "Slap"
                     , "Source"
                     , "Spell"
@@ -110,7 +110,7 @@
                     , "Undo"
                     , "Unlambda"
                     , "UnMtl"
-                    , "Url"
+                    --, "Url"
                     , "Version"
                     , "Vixen"
                     , "Where"
--- lambdabot-4.2.2.1-orig/Plugin/BF.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/BF.hs	2011-01-04 11:15:57.424382336 +1100
@@ -12,11 +12,11 @@
 
 instance Module BFModule () where
     moduleCmds   _     = ["bf"]
-    moduleHelp _ _     = "bf <expr>. Evaluate a bainf*ck expression"
+    moduleHelp _ _     = "bf <expr>. Evaluate a brainf*ck expression"
     process _ _ to _ s = ios80 to (bf s)
 
 binary :: String
-binary = "./bf"
+binary = "bf"
 
 bf :: String -> IO String
 bf src = run binary src scrub
--- lambdabot-4.2.2.1-orig/Plugin/Check.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Check.hs	2011-01-04 11:15:57.427382599 +1100
@@ -30,7 +30,7 @@
         Left  e -> return e
         Right _ -> do
             l <- findFile "L.hs"
-            (out,err,_) <- popen binary ["--loadfile=", l, "-E", "-e", "myquickcheck $ " ++ src] Nothing
+            (out,err,_) <- popen binary ["--loadfile=", l, "-XExtendedDefaultRules", "-e", "myquickcheck $ " ++ src] Nothing
             case (out,err) of
                 ([],[]) -> return "Terminated\n"
                 _       -> do
--- lambdabot-4.2.2.1-orig/Plugin/Dummy.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Dummy.hs	2011-01-04 11:15:57.447383278 +1100
@@ -53,7 +53,7 @@
   contextual _ _ _ _                 = return []
 
 pastebinMsg :: String
-pastebinMsg = "Haskell pastebin: http://hpaste.org/new"
+pastebinMsg = "Haskell pastebin: http://hpaste.org/"
 
 dummylst :: [(String, String -> String)]
 dummylst =
@@ -95,7 +95,7 @@
 
 lookupHackage :: String -> String
 lookupHackage "" = "http://hackage.haskell.org"
-lookupHackage xs = "http://hackage.haskell.org/cgi-bin/hackage-scripts/package/" ++ xs
+lookupHackage xs = "http://hackage.haskell.org/package/" ++ xs
 
 googlePrefix :: String
 googlePrefix = "http://letmegooglethatforyou.com"
--- lambdabot-4.2.2.1-orig/Plugin/Dummy/DocAssocs.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Dummy/DocAssocs.hs	2011-01-04 11:15:57.447383278 +1100
@@ -40,6 +40,8 @@
 x11      = P.pack "3"
 opengl :: P.ByteString
 opengl   = P.pack "OpenGL"
+containers :: P.ByteString
+containers = P.pack "containers"
 
 docAssocs :: M.Map P.ByteString P.ByteString
 docAssocs = {-# SCC "Dummy.DocAssocs" #-} M.fromList [
@@ -94,7 +96,7 @@
   (P.pack "Data.Generics.Schemes", base),
   (P.pack "Data.Generics.Text", base),
   (P.pack "Data.Generics.Twins", base),
-  (P.pack "Data.Graph", base),
+  (P.pack "Data.Graph", containers),
   (P.pack "Data.Graph.Inductive", fgl),
   (P.pack "Data.Graph.Inductive.Basic", fgl),
   (P.pack "Data.Graph.Inductive.Example", fgl),
@@ -126,11 +128,11 @@
   (P.pack "Data.HashTable", base),
   (P.pack "Data.IORef", base),
   (P.pack "Data.Int", base),
-  (P.pack "Data.IntMap", base),
-  (P.pack "Data.IntSet", base),
+  (P.pack "Data.IntMap", containers),
+  (P.pack "Data.IntSet", containers),
   (P.pack "Data.Ix", base),
   (P.pack "Data.List", base),
-  (P.pack "Data.Map", base),
+  (P.pack "Data.Map", containers),
   (P.pack "Data.Maybe", base),
   (P.pack "Data.Monoid", base),
   (P.pack "Data.PackedString", base),
@@ -139,8 +141,9 @@
   (P.pack "Data.STRef", base),
   (P.pack "Data.STRef.Lazy", base),
   (P.pack "Data.STRef.Strict", base),
-  (P.pack "Data.Set", base),
-  (P.pack "Data.Tree", base),
+  (P.pack "Data.Sequence", containers),
+  (P.pack "Data.Set", containers),
+  (P.pack "Data.Tree", containers),
   (P.pack "Data.Tuple", base),
   (P.pack "Data.Typeable", base),
   (P.pack "Data.Unique", base),
--- lambdabot-4.2.2.1-orig/Plugin/Karma.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Karma.hs	2011-01-04 11:15:57.473383756 +1100
@@ -56,7 +56,7 @@
         okay x      = not (elem x badNicks || any (`isPrefixOf` x) badPrefixes)
         -- Special cases.  Ignore the null nick.  C must also be ignored
         -- because C++ and C-- are languages.
-        badNicks    = ["", "C", "c"]
+        badNicks    = ["", "C", "c", "notepad"]
         -- More special cases, to ignore Perl code.
         badPrefixes = ["$", "@", "%"]
 
--- lambdabot-4.2.2.1-orig/Plugin/Pl.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Pl.hs	2011-01-04 11:15:57.482383419 +1100
@@ -22,7 +22,7 @@
 import Message( Nick )
 
 import Control.Concurrent.Chan    (Chan, newChan, isEmptyChan, readChan, writeList2Chan)
-
+import Control.Exception (unblock)
 -- firstTimeout is the timeout when the expression is simplified for the first
 -- time. After each unsuccessful attempt, this number is doubled until it hits
 -- maxTimeout.
@@ -80,7 +80,10 @@
 optimizeIO :: Int -> Expr -> IO (Expr, Bool)
 optimizeIO to e = do
   chan <- newChan
-  result <- timeout to $ writeList2Chan chan $ optimize e
+  -- We need "unblock" here because "timeout" will terminate the thread
+  -- with an async exception and the current thread is in blocked
+  -- mode for reasons that still aren't clear to me.
+  result <- timeout to $ unblock (writeList2Chan chan $ optimize e)
   e' <- getChanLast chan e
   return $ case result of
     Nothing -> (e', False)
--- lambdabot-4.2.2.1-orig/Plugin/Scheck.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Scheck.hs	2011-01-04 11:15:57.486382346 +1100
@@ -27,7 +27,7 @@
         Left e  -> return e
         Right _ -> do
             file <- findFile "L.hs"
-            (out,err,_) <- popen binary ["--loadfile=", file, "-E", "-e", "mysmallcheck " ++ src ++ ""] Nothing
+            (out,err,_) <- popen binary ["--loadfile=", file, "-XExtendedDefaultRules", "-e", "mysmallcheck " ++ src ++ ""] Nothing
             let o = munge out
                 e = munge err
             return $ case () of {_
--- lambdabot-4.2.2.1-orig/Plugin/Search.hs	2009-01-18 16:01:14.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Search.hs	2011-01-04 11:15:57.487382464 +1100
@@ -1,4 +1,4 @@
-{-# LANGUAGE TemplateHaskell, MultiParamTypeClasses #-}
+{-# LANGUAGE TemplateHaskell, MultiParamTypeClasses, ViewPatterns #-}
 -- | Search various things, Wikipedia and google for now.
 --
 -- (c) 2005 Samuel Bronson
@@ -9,77 +9,92 @@
 module Plugin.Search (theModule) where
 
 import Plugin
-import Control.Monad            (mplus)
-import qualified Text.Regex as R
+import Network.HTTP
+import Text.HTML.TagSoup
+import Text.HTML.TagSoup.Match (anyAttr, tagOpen)
+import Data.Maybe (listToMaybe)
 
 $(plugin "Search")
 
-engines :: [(String, (String, String))]
+engines :: [(String, (URI, String -> String, [Header]))]
 engines =
-   [("google"
-   ,("http://www.google.com/search?hl=en&q=","&btnI=I%27m+Feeling+Lucky")),
+   [("google", (googleUri, (\s -> "?hl=en&q="++s++"&btnI=I'm+Feeling+Lucky"), googleHeaders)),
+    -- ("wikipedia", (wikipediaUri, ("?search="++), [])), -- this has changed and Wikipedia requires a User-Agent string
+    ("gsite", (googleUri, (\s -> "?hl=en&q=site%3A"++s++"&btnI=I'm+Feeling+Lucky"), googleHeaders)),
+    ("gwiki", (googleUri, (\s -> "?hl=en&q=site%3Ahaskell.org/haskellwiki+" ++s++"&btnI=I'm+Feeling+Lucky"), googleHeaders))
+   ]
 
-    ("wikipedia"
-   ,("http://en.wikipedia.org/wiki/Special:Search?search=", "")),
+googleHeaders :: [Header]
+googleHeaders = [mkHeader HdrReferer "http://www.google.com/"]
 
-    ("gsite"
-   ,("http://www.google.com/search?hl=en&q=site%3A", "&btnI=I%27m+Feeling+Lucky"))
-   ]
+normalizeOptions :: NormalizeRequestOptions a
+normalizeOptions = defaultNormalizeRequestOptions {
+    normDoClose = True,
+    normForProxy = isJust (proxy config),
+    normUserAgent = Nothing } -- there is a default user agent, perhaps we want it?
+
+makeUri :: String -> String -> URI
+makeUri regName path = nullURI {
+    uriScheme = "http:",
+    uriAuthority = Just (URIAuth { uriUserInfo = "", uriRegName = regName, uriPort = "" }),
+    uriPath = path }
+
+googleUri :: URI
+googleUri = makeUri "www.google.com" "/search"
+-- wikipediaUri = makeUri "en.wikipedia.org" "/wiki/Special:Search"
 
 instance Module SearchModule () where
     moduleHelp _ s      = case s of
          "google"    -> "google <expr>. Search google and show url of first hit"
-         "wikipedia" -> "wikipedia <expr>. Search wikipedia and show url of first hit"
+         -- "wikipedia" -> "wikipedia <expr>. Search wikipedia and show url of first hit"
          "gsite"     -> "gsite <site> <expr>. Search <site> for <expr> using google"
-         "gwiki"     -> "wiki <expr>. Search (new) haskell.org wiki for <expr> using google."
-    moduleCmds      _   = "gwiki" : map fst engines
-    process_ _ "gwiki" e = lift $ ((. dropSpace) . searchCmd) "gsite" ("haskell.org/haskellwiki" ++ e)
-    process_ _ s       e = lift $ ((. dropSpace) . searchCmd) s e
+         "gwiki"     -> "gwiki <expr>. Search (new) haskell.org wiki for <expr> using google."
+    moduleCmds _ = map fst engines
+    process_ _ s e = lift $ searchCmd s (dropSpace e)
 
 ------------------------------------------------------------------------
 
 searchCmd :: String -> String -> LB [String]
-searchCmd _ []        = return ["Empty search."]
-searchCmd engine rest = do
-    headers <- io $ queryit "HEAD" engine rest
-    body    <- io $ queryit "GET" engine rest
-    case getHeader "Location" headers `mplus` extractConversion body of
-      Just url -> do
-        title <- io $ runWebReq (urlPageTitle url) (proxy config)
-        return $ maybe [url] (\t -> [url, t]) title
-      Nothing  -> return ["No Result Found."]
-
-queryUrl :: String -> String -> String
-queryUrl engine q = prefix ++ urlEncode q ++ suffix
-    where
-    (prefix, suffix) = fromMaybe (error "search: invalid command")
-                                 (lookup engine engines)
-
-queryit :: String -> String -> String -> IO [String]
-queryit meth engine q = readPage (proxy config) uri request ""
-    where url = queryUrl engine q
-          Just uri = parseURI url
-          abs_path = uriPath uri ++ uriQuery uri ++ uriFragment uri
-          request  = case proxy config of
-                        Nothing -> [meth ++ " " ++ abs_path ++ " HTTP/1.0", ""]
-                        _       -> [meth ++ " " ++ url ++ " HTTP/1.0", ""]
-
-extractConversion :: [String] -> Maybe String
-extractConversion [] = error "conv: No response, something weird is up."
-extractConversion ls = (getConv $ last ls) >>= return . pipeline replaceFuncs
-    where
-        regex1 = regex' "<font size=\\+1><b>"
-        regex2 = regex' "</b>"
-
-        getConv a = do
-            (_,_,s,_)  <- R.matchRegexAll regex1 a
-            (s',_,_,_) <- R.matchRegexAll regex2 s
-            return s'
-
-        searchAndReplace new re = \s -> R.subRegex (regex' re) s new
-        replaceFuncs = zipWith searchAndReplace
-                            [    "^",       "",      "x",                      ","]
-                            ["<sup>", "</sup>", "&#215;", "<font size=-2> </font>"]
-
-        pipeline [] a = a
-        pipeline (f:fs) a = pipeline fs $ f a
+searchCmd _          []   = return ["Empty search."]
+searchCmd engineName (Network.HTTP.urlEncode -> query)
+    | engineName == "google" = -- for Google we do both to get conversions, e.g. for '3 lbs in kg'
+        doHTTP request $ \response -> 
+        case response of
+            Response { rspCode = (3,0,2), rspHeaders = (lookupHeader HdrLocation -> Just url) } ->
+                doGoogle >>=  handleUrl url
+            _ -> fmap (\extra -> if null extra then ["No Result Found."] else extra) doGoogle
+    | otherwise = 
+        doHTTP request $ \response -> 
+        case response of
+            Response { rspCode = (3,0,2), rspHeaders = (lookupHeader HdrLocation -> Just url) } ->
+                handleUrl url []
+            _ -> return ["No Result Found."]
+  where handleUrl url extra = do
+            title <- io $ runWebReq (urlPageTitle url) (proxy config)
+            return $ extra ++ maybe [url] (\t -> [url, t]) title
+        Just (uri, makeQuery, headers) = lookup engineName engines
+        request = normalizeRequest normalizeOptions $ Request {
+            rqURI = uri { uriQuery = makeQuery query },
+            rqMethod = HEAD,
+            rqHeaders = headers,
+            rqBody = "" }
+        doGoogle = 
+            doHTTP (request { rqMethod = GET, rqURI = uri { uriQuery = "?hl=en&q=" ++ query } }) $ \response ->
+                case response of
+                    Response { rspCode = (2,_,_), rspBody = (extractConversion -> Just result) } ->
+                        return [result]
+                    _ -> return []
+
+doHTTP :: HStream a => Request a -> (Response a -> LB [String]) -> LB [String]
+doHTTP request handler = do
+    result <- io $ simpleHTTP request
+    case result of
+        Left connError -> return ["Connection error: "++show connError]
+        Right response -> handler response
+
+-- This is clearly fragile.
+extractConversion :: String -> Maybe String
+extractConversion (parseTags -> tags) = listToMaybe [txt |
+    section <- sections (tagOpen ("h2"==) (anyAttr (\(name, value) -> name == "class" && value == "r"))) tags,
+    txt <- [dropSpace $ drop 1 $ dropWhile (/= '=') t | TagText t <- section],
+    not (null txt)]
--- lambdabot-4.2.2.1-orig/Plugin/Type.hs	2009-01-18 16:01:15.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Type.hs	2011-01-04 11:15:57.502466304 +1100
@@ -123,7 +123,7 @@
                        (readFile importHeader)
        l <- findFile "L.hs"
        let context = ":load "++l++"\n" ++ concatMap ((":m + " ++) . (++"\n")) imports
-       (output, errors, _) <- popen (ghci config) ["-v0","-fglasgow-exts","-fno-th","-iState","-iscripts","-XNoMonomorphismRestriction"]
+       (output, errors, _) <- popen (ghci config) ["-v0","-fglasgow-exts","-XNoTemplateHaskell","-iState","-iscripts","-XNoMonomorphismRestriction"]
                                        (Just (context ++ command cmd (stripComments expr)))
        let ls = extract_signatures output
        return $ case ls of
--- lambdabot-4.2.2.1-orig/Plugin/Undo.hs	2009-01-18 16:01:15.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Undo.hs	2011-01-04 11:15:57.503543429 +1100
@@ -15,13 +15,13 @@
 $(plugin "Undo")
 
 instance Module UndoModule () where
-    moduleCmds   _ = ["undo", "redo"]
+    moduleCmds   _ = ["undo", "do"]
     moduleHelp _ "undo" = "undo <expr>\nTranslate do notation to Monad operators."
-    moduleHelp _ "redo" = "redo <expr>\nTranslate Monad operators to do notation."
+    moduleHelp _ "do" = "do <expr>\nTranslate Monad operators to do notation."
     process_ _ cmd args = ios $ return $ transform f args
      where f = case cmd of
                 "undo" -> undo
-                "redo" -> redo
+                "do" -> do'
                 _      -> error "unknown command"
 
 findVar :: Data a => a -> String
@@ -92,29 +92,29 @@
 pvar :: String -> HsPat
 pvar = HsPVar . HsIdent
 
-redo :: String -> HsExp -> HsExp
-redo _ (HsLet ds (HsDo s)) = HsDo (HsLetStmt ds : s)
-redo v e@(HsInfixApp l (HsQVarOp (UnQual (HsSymbol op))) r) =
-    case op of
-        ">>=" ->
-            case r of
-                (HsLambda loc [p] (HsDo stms)) -> HsDo (HsGenerator loc p l : stms)
-                (HsLambda loc [HsPVar v1] (HsCase (HsVar (UnQual v2))
-                                           [ HsAlt _ p (HsUnGuardedAlt s) []
-                                           , HsAlt _ HsPWildCard (HsUnGuardedAlt (HsApp (HsVar (UnQual (HsIdent "fail"))) _)) []
-                                           ]))
-                          | v1 == v2           -> case s of
-                                                      HsDo stms -> HsDo (HsGenerator loc p l : stms)
-                                                      _         -> HsDo [HsGenerator loc p l, HsQualifier s]
-                (HsLambda loc [p] s)           -> HsDo [HsGenerator loc p l, HsQualifier s]
-                _ -> HsDo [ HsGenerator undefined (pvar v) l
-                          , HsQualifier . app r $ var v]
-        ">>" ->
-            case r of
-                (HsDo stms) -> HsDo (HsQualifier l : stms)
-                _           -> HsDo [HsQualifier l, HsQualifier r]
-        _    -> e
-redo _ x = x
+do' :: String -> HsExp -> HsExp
+do' _ (HsLet ds (HsDo s)) = HsDo (HsLetStmt ds : s)
+do' v e@(HsInfixApp l (HsQVarOp (UnQual (HsSymbol op))) r) =
+     case op of
+         ">>=" ->
+             case r of
+                 (HsLambda loc [p] (HsDo stms)) -> HsDo (HsGenerator loc p l : stms)
+                 (HsLambda loc [HsPVar v1] (HsCase (HsVar (UnQual v2))
+                                            [ HsAlt _ p (HsUnGuardedAlt s) []
+                                            , HsAlt _ HsPWildCard (HsUnGuardedAlt (HsApp (HsVar (UnQual (HsIdent "fail"))) _)) []
+                                            ]))
+                           | v1 == v2           -> case s of
+                                                       HsDo stms -> HsDo (HsGenerator loc p l : stms)
+                                                       _         -> HsDo [HsGenerator loc p l, HsQualifier s]
+                 (HsLambda loc [p] s)           -> HsDo [HsGenerator loc p l, HsQualifier s]
+                 _ -> HsDo [ HsGenerator undefined (pvar v) l
+                           , HsQualifier . app r $ var v]
+         ">>" ->
+             case r of
+                 (HsDo stms) -> HsDo (HsQualifier l : stms)
+                 _           -> HsDo [HsQualifier l, HsQualifier r]
+         _    -> e
+do' _ x = x
 
 -- | 'app' is a smart constructor that inserts parens when the first argument
 -- is an infix application.
--- lambdabot-4.2.2.1-orig/Plugin/Unlambda.hs	2009-01-18 16:01:15.000000000 +1100
+++ lambdabot-4.2.2.1/Plugin/Unlambda.hs	2011-01-04 11:15:57.503543429 +1100
@@ -17,10 +17,11 @@
     process _ _ to _ s = ios80 to (unlambda s)
 
 binary :: String
-binary = "./unlambda"
+binary = "unlambda"
 
 unlambda :: String -> IO String
-unlambda src = run binary src (unlines . take 6 . map (' ':) . lines . cleanit)
+unlambda src = run binary src scrub
+  where scrub = unlines . take 6 . map (' ':) . lines . cleanit
 
 cleanit :: String -> String
 cleanit s | terminated `matches'` s = "Terminated\n"
--- lambdabot-4.2.2.1-orig/State/L.hs	2009-01-18 16:01:15.000000000 +1100
+++ lambdabot-4.2.2.1/State/L.hs	2011-01-05 00:40:56.536399314 +1100
@@ -1,19 +1,22 @@
+{-# LANGUAGE NoMonomorphismRestriction, StandaloneDeriving, UndecidableInstances #-}
+{-# LANGUAGE PackageImports #-}
 module L where
+import Prelude hiding ((.),(++),flip)
 import Control.Applicative
-import Control.Arrow hiding (pure)
+import Control.Arrow
 import Control.Arrow.Operations
 import Control.Monad
-import Control.Monad.Cont
-import Control.Monad.Error
+import "mtl" Control.Monad.Cont
+import "mtl" Control.Monad.Error
 import Control.Monad.Fix
-import Control.Monad.Identity
+import "mtl" Control.Monad.Identity
 import Control.Monad.Instances
 import Control.Monad.Logic
-import Control.Monad.RWS
-import Control.Monad.Reader
+import "mtl" Control.Monad.RWS
+import "mtl" Control.Monad.Reader
 import Control.Monad.ST (ST, runST, fixST)
-import Control.Monad.State
-import Control.Monad.Writer
+import "mtl" Control.Monad.State
+import "mtl" Control.Monad.Writer
 import Control.Parallel
 import Control.Parallel.Strategies
 import Data.Array
@@ -25,7 +28,7 @@
 import Data.Either
 import Data.Eq
 import Data.Fixed
-import Data.Function hiding ((.))
+import Data.Function hiding ((.),flip)
 import Data.Generics hiding (GT)
 import Data.Graph
 import Data.Int
@@ -36,9 +39,7 @@
 import Data.Number.BigFloat
 import Data.Number.CReal
 import Data.Number.Dif
-import Data.Number.Fixed
 import Data.Number.Interval
-import Data.Number.Natural
 import Data.Number.Symbolic
 import Data.Ord
 import Data.Ratio
@@ -50,7 +51,6 @@
 import Numeric
 import ShowQ
 import System.Random
-import Test.QuickCheck
 import Text.PrettyPrint.HughesPJ hiding (empty)
 import Text.Printf
 import Text.Regex.Posix
@@ -65,17 +65,99 @@
 import qualified Data.IntMap as IM
 import qualified Data.IntSet as IS
 import qualified Data.Map as M
-import qualified Data.Sequence
+import qualified Data.Sequence as Seq
 import qualified Data.Set as S
 import qualified Data.Traversable
+import qualified Data.MemoCombinators as Memo
+import ShowIO
 
 import SimpleReflect hiding (var)
 import Math.OEIS
+import Control.Monad.Random
+
+import Data.VectorSpace hiding (Sum, getSum)
+import Data.NumInstances
+import Data.LinearMap
+
+import qualified Test.IOSpec as IOSpec
+
+import Data.Fixed
+
+(.) :: (Functor f) => (a -> b) -> f a -> f b
+(.) = fmap
+infixr 9 .
+
+flip :: Functor f => f (a -> b) -> a -> f b
+flip f x = fmap ($ x) f
+
+(++) :: (Monoid m) => m -> m -> m
+(++) = mappend
+infixr 5 ++
+
+asTypeIn :: a -> (a -> b) -> a
+a `asTypeIn` f = a where _ = f a
+infixl 0 `asTypeIn`
+
+f `asAppliedTo` x = f `asTypeIn` \f -> f x
+infixl 0 `asAppliedTo`
 
 describeSequence = fmap description . lookupSequence
 
-newtype Mu f = In { out :: f (Mu f) }
+newtype Mu f = In (f (Mu f))
+out (In x) = x
+deriving instance Show (f (Mu f)) => Show (Mu f)
 
 newtype Rec a = InR { outR :: Rec a -> a }
 
+data Bin a = Tip | Branch a (Bin a) (Bin a)
+  deriving (Eq, Ord, Show, Read)
+-- Fun Stuff
+
+cake = ["One 18.25 ounce package chocolate cake mix.",
+        "One can prepared coconut pecan frosting.",
+        "Three slash four cup vegetable oil.",
+        "Four large eggs.",
+        "One cup semi-sweet chocolate chips.",
+        "Three slash four cups butter or margarine.",
+        "One and two third cups granulated sugar.",
+        "Two cups all-purpose flour.",
+        "Don't forget garnishes such as:",
+        "Fish shaped crackers.",
+        "Fish shaped candies.",
+        "Fish shaped solid waste.",
+        "Fish shaped dirt.",
+        "Fish shaped ethylbenzene.",
+        "Pull and peel licorice.",
+        "Fish shaped organic compounds and sediment shaped sediment.",
+        "Candy coated peanut butter pieces. Shaped like fish.",
+        "One cup lemon juice.",
+        "Alpha resins.",
+        "Unsaturated polyester resin.",
+        "Fiberglass surface resins.",
+        "And volatile malted milk impoundments.",
+        "Nine large egg yolks.",
+        "Twelve medium geosynthetic membranes.",
+        "One cup granulated sugar.",
+        "An entry called 'how to kill someone with your bare hands.'",
+        "Two cups rhubarb, sliced.",
+        "Two slash three cups granulated rhubarb.",
+        "One tablespoon all-purpose rhubarb.",
+        "One teaspoon grated orange rhubarb.",
+        "Three tablespoons rhubarb, on fire.",
+        "One large rhubarb.",
+        "One cross borehole electro-magnetic imaging rhubarb.",
+        "Two tablespoons rhubarb juice.",
+        "Adjustable aluminum head positioner.",
+        "Slaughter electric needle injector.",
+        "Cordless electric needle injector.",
+        "Injector needle driver.",
+        "Injector needle gun.",
+        "Cranial caps.",
+        "And it contains proven preservatives, deep penetration agents, and gas and odor control chemicals.",
+        "That will deodorize and preserve putrid tissue."]
+
 {-# LINE 1 "<local>" #-}
+(****) = (\f n v -> (iterate f v) !! n)
+toChurch = ((appEndo . Data.Foldable.foldMap Endo) .) . replicate
+fromChuch f = f (+1) 0
+evalCont :: Cont o o -> o; evalCont = (`runCont` id)
--- lambdabot-4.2.2.1-orig/State/Pristine.hs	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/Pristine.hs	2011-01-04 11:15:57.512384424 +1100
@@ -1,6 +1,8 @@
+{-# LANGUAGE NoMonomorphismRestriction, StandaloneDeriving, UndecidableInstances #-}
 module L where
+import Prelude hiding ((.),(++),flip)
 import Control.Applicative
-import Control.Arrow hiding (pure)
+import Control.Arrow
 import Control.Arrow.Operations
 import Control.Monad
 import Control.Monad.Cont
@@ -25,7 +27,7 @@
 import Data.Either
 import Data.Eq
 import Data.Fixed
-import Data.Function hiding ((.))
+import Data.Function hiding ((.),flip)
 import Data.Generics hiding (GT)
 import Data.Graph
 import Data.Int
@@ -36,9 +38,7 @@
 import Data.Number.BigFloat
 import Data.Number.CReal
 import Data.Number.Dif
-import Data.Number.Fixed
 import Data.Number.Interval
-import Data.Number.Natural
 import Data.Number.Symbolic
 import Data.Ord
 import Data.Ratio
@@ -50,7 +50,6 @@
 import Numeric
 import ShowQ
 import System.Random
-import Test.QuickCheck
 import Text.PrettyPrint.HughesPJ hiding (empty)
 import Text.Printf
 import Text.Regex.Posix
@@ -65,17 +64,95 @@
 import qualified Data.IntMap as IM
 import qualified Data.IntSet as IS
 import qualified Data.Map as M
-import qualified Data.Sequence
+import qualified Data.Sequence as Seq
 import qualified Data.Set as S
 import qualified Data.Traversable
+import qualified Data.MemoCombinators as Memo
+import ShowIO
 
 import SimpleReflect hiding (var)
 import Math.OEIS
+import Control.Monad.Random
+
+import Data.VectorSpace hiding (Sum, getSum)
+import Data.NumInstances
+import Data.LinearMap
+
+import qualified Test.IOSpec as IOSpec
+
+import Data.Fixed
+
+(.) :: (Functor f) => (a -> b) -> f a -> f b
+(.) = fmap
+infixr 9 .
+
+flip :: Functor f => f (a -> b) -> a -> f b
+flip f x = fmap ($ x) f
+
+(++) :: (Monoid m) => m -> m -> m
+(++) = mappend
+infixr 5 ++
+
+asTypeIn :: a -> (a -> b) -> a
+a `asTypeIn` f = a where _ = f a
+infixl 0 `asTypeIn`
+
+f `asAppliedTo` x = f `asTypeIn` \f -> f x
+infixl 0 `asAppliedTo`
 
 describeSequence = fmap description . lookupSequence
 
-newtype Mu f = In { out :: f (Mu f) }
+newtype Mu f = In (f (Mu f))
+out (In x) = x
+deriving instance Show (f (Mu f)) => Show (Mu f)
 
 newtype Rec a = InR { outR :: Rec a -> a }
 
+data Bin a = Tip | Branch a (Bin a) (Bin a)
+  deriving (Eq, Ord, Show, Read)
+-- Fun Stuff
+
+cake = ["One 18.25 ounce package chocolate cake mix.",
+        "One can prepared coconut pecan frosting.",
+        "Three slash four cup vegetable oil.",
+        "Four large eggs.",
+        "One cup semi-sweet chocolate chips.",
+        "Three slash four cups butter or margarine.",
+        "One and two third cups granulated sugar.",
+        "Two cups all-purpose flour.",
+        "Don't forget garnishes such as:",
+        "Fish shaped crackers.",
+        "Fish shaped candies.",
+        "Fish shaped solid waste.",
+        "Fish shaped dirt.",
+        "Fish shaped ethylbenzene.",
+        "Pull and peel licorice.",
+        "Fish shaped organic compounds and sediment shaped sediment.",
+        "Candy coated peanut butter pieces. Shaped like fish.",
+        "One cup lemon juice.",
+        "Alpha resins.",
+        "Unsaturated polyester resin.",
+        "Fiberglass surface resins.",
+        "And volatile malted milk impoundments.",
+        "Nine large egg yolks.",
+        "Twelve medium geosynthetic membranes.",
+        "One cup granulated sugar.",
+        "An entry called 'how to kill someone with your bare hands.'",
+        "Two cups rhubarb, sliced.",
+        "Two slash three cups granulated rhubarb.",
+        "One tablespoon all-purpose rhubarb.",
+        "One teaspoon grated orange rhubarb.",
+        "Three tablespoons rhubarb, on fire.",
+        "One large rhubarb.",
+        "One cross borehole electro-magnetic imaging rhubarb.",
+        "Two tablespoons rhubarb juice.",
+        "Adjustable aluminum head positioner.",
+        "Slaughter electric needle injector.",
+        "Cordless electric needle injector.",
+        "Injector needle driver.",
+        "Injector needle gun.",
+        "Cranial caps.",
+        "And it contains proven preservatives, deep penetration agents, and gas and odor control chemicals.",
+        "That will deodorize and preserve putrid tissue."]
+
 {-# LINE 1 "<local>" #-}
Files lambdabot-4.2.2.1-orig/State/fact and lambdabot-4.2.2.1/State/fact differ
--- lambdabot-4.2.2.1-orig/State/fresh	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/fresh	2011-01-04 11:15:57.513384728 +1100
@@ -1 +1 @@
-0
\ No newline at end of file
+94
\ No newline at end of file
--- lambdabot-4.2.2.1-orig/State/imports.h	2009-01-18 16:01:17.000000000 +1100
+++ lambdabot-4.2.2.1/State/imports.h	2011-01-04 11:15:57.514383561 +1100
@@ -44,7 +44,6 @@
 import Data.Number.Fixed
 import Data.Number.Interval
 import Data.Number.BigFloat
-import Data.Number.Natural
 import Control.Monad
 import Control.Monad.Cont
 import Control.Monad.Identity
@@ -72,3 +71,9 @@
 
 import SimpleReflect hiding (var)
 import Math.OEIS
+
+import Data.VectorSpace
+import Data.NumInstances
+import Data.LinearMap
+
+import Data.Fixed
--- lambdabot-4.2.2.1-orig/State/karma	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/karma	2011-01-04 11:15:57.515382705 +1100
@@ -1,292 +1,3046 @@
+(":(",-1)
+(":(>",-1)
+(":)",1)
+(":-------",-1)
+(":>",-2)
+("\"Match\226\144\164WHERE:/\\<",-1)
+(")\226\144\164WHERE:/\\<",-1)
+("--:--",-3)
+("--21:59:59",-1)
+("-9>\226\144\164WHERE:/\\<",-1)
+(".perl\226\144\164WHERE:/\\<",-1)
+("05:11:43",-1)
+("05:12:24",-1)
+("0\226\144\164WHERE:/\\<",-2)
+("1..10\226\144\164WHERE:/\\<",-1)
+("10\226\144\164WHERE:/\\<",-1)
+("18:07:07",-1)
+("2\226\144\164WHERE:/\\<",-2)
+("42\226\144\164WHERE:/\\<",-2)
+("5;\226\144\164WHERE:/\\<",-1)
+("?(,);\226\144\164WHERE:/\\<",-1)
+("IPC::Run",1)
+("JSON::Tiny",1)
+("Rakudo\226\144\164WHERE:/\\<",-1)
+("WORLD!\";\226\144\164WHERE:/\\<",-1)
+("[+];\226\144\164WHERE:/\\<",-1)
 ("[1,2,3,4,5]\226\144\164WHERE:/\\<",-1)
-("\"",-1)
-("\"\"",2)
-("\"<!",-1)
+("c[${i:h}]",1)
+("cls\226\144\164WHERE:/\\<",-1)
+("c\226\144\164WHERE:/\\<",-1)
+("",0)
+("\ESC[32m",-1)
+("\ESC[32m$x\ESC[31m",1)
+("\ESC[32m$x\ESC[31m++",1)
+("!!!-----",-1)
+("!c",9)
+("!coffee",1)
+("!LaraX",1)
+("!test",1)
+("\"",-68)
+("\"\"",16)
+("\"(\"",2)
+("\"+",3)
+("\"++).(",1)
+("\"--",-1)
+("\"-----------------|---------",-1)
+("\"-rw-r--r",-1)
+("\"...\"",1)
+("\"/Developer/usr/bin/g",1)
+("\"0.\"",1)
+("\"<",-1)
+("\"<!",-3)
+("\"<--",-1)
+("\"blah5\"",2)
+("\"bonnie",1)
 ("\"broiling\"-",-1)
-("\"C",2)
+("\"C",55)
 ("\"chelo",1)
-("\"g",1)
-("##c",3)
-("#c",1)
+("\"code}\\n",-1)
+("\"crw-r---",-1)
+("\"Dev-C",1)
+("\"emacs",2)
+("\"g",4)
+("\"hackages\"",1)
+("\"Infec",-1)
+("\"kmc",1)
+("\"lambdabot",1)
+("\"MSVC",1)
+("\"vim",1)
+("\"wait!",-1)
+("\"weed",1)
+("\"\\n",-1)
+("\"\\n\\tg",1)
+("\"]\"",1)
+("#",1)
+("##c",109)
+("##freebsd+++",1)
+("##iso-c",1)
+("##java",-1)
+("#%{#$%{#$%}#${{}[454]]+",1)
+("#bookz",1)
+("#c",36)
+("#c,#c#,#c",1)
 ("#cafe",1)
-("#gentoo-uy",1)
-("(",7)
-("((",1)
-("()",1)
+("#catalyst",1)
+("#django",-1)
+("#gentoo-uy",3)
+("#haskell",0)
+("#haskell-c",1)
+("#perl6",1)
+("#scrapy",-1)
+("#vim",1)
+("&",-2)
+("'",-11)
+("''",-1)
+("'-rw-----",-1)
+("'<",-1)
+("'c",1)
+("'F-",-1)
+("'pmichaud",1)
+("'s/",-1)
+("'s/^>//||!/\\S/||s/^/",-1)
+("(",192)
+("(\"0.\"",1)
+("(\"ivanm",1)
+("(\"nerdshark",1)
+("('",-1)
+("((",16)
+("((jnthn)",1)
+("((jnthn))",2)
+("()",0)
+("(*q",1)
+("(+",1)
+("(+)",1)
+("(-",-2)
+("(-rw-r--r",-1)
+("(..)",-1)
+("(/dev/u?random)",1)
+("(1,2,3)>>",1)
+("(<",-3)
+("(<-",-1)
+("(alester",1)
 ("(azawawi",1)
-("(C",2)
+("(bacek",1)
+("(c",31)
+("(C)",1)
+("(c/c",2)
+("(chromatic",1)
+("(Day.mapping.invert)",1)
+("(g++)",1)
+("(git-svn)",0)
+("(has-accessor)",1)
+("(hi)(hihi)",1)
+("(jnthn",1)
+("(jnthn)",10)
+("(jnthn))",1)
+("(mberends)",1)
+("(moritz",1)
+("(moritz_",1)
+("(new)",-1)
+("(people-to-lazy-to-read-back-30-lines-and-I-mean-you-bos)",-1)
+("(perl6-projects)",1)
+("(pmichaud)",2)
+("(r->)monad",1)
+("(Seoul.pm)",1)
+("(skills_c++)",1)
+("(springer-verlag)",-2)
+("(squerl.org)",1)
+("(TimToady",1)
+("(touchpad)-",-1)
+("(twice-as-fast)",1)
 ("(use.perl.org)",0)
-("+",6)
-("-",-21)
-("--",-2)
-("-----",-2)
-("--------------------------------------------",-1)
+(")",4)
+(").",1)
+("*",-2)
+("*)\"+l*8+\"nprint_endline\"+l*15+\"\\\"",-1)
+("**",3)
+("*a",1)
+("*b",1)
+("*C",2)
+("*C/C",1)
+("*d++=*s",1)
+("*foo",1)
+("*MSVC",1)
+("*notepad",1)
+("*o",1)
+("*p",1)
+("*ptr",2)
+("+",203)
+("++",9)
+("++\"/\"",1)
+("++$x",1)
+("++).(",1)
+("+++",6)
+("++++",5)
+("+++++",2)
+("+++++++",1)
+("++++++++++",1)
+("++++++++++++++++++++",1)
+("++++++++++++++++++++++++++++++++++",1)
+("++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",1)
+("+++++[>+++++<-]>[>++<-]>",1)
+("++++----------[<<-++++----+...]++++",1)
+("++/",-1)
+("++Any",-1)
+("++d",1)
+("++diakopter",-2)
+("++\\/o__o\\/",2)
+("+when",1)
+(",",-1)
+(",<",-1)
+(",c",1)
+("-",-720)
+("--",-79)
+("--+--",-1)
+("---",-237)
+("---(((---(((-------",-1)
+("---()-",-1)
+("----",-18)
+("-----",-15)
+("------",-7)
+("-------",-15)
+("--------",-12)
+("---------",-20)
+("----------",-16)
+("-----------",-7)
+("------------",-6)
+("-------------",-5)
+("--------------",-4)
+("----------------",-9)
+("-----------------",-8)
+("------------------",-4)
+("-------------------",-3)
+("--------------------",-6)
+("---------------------",-4)
+("----------------------",-4)
+("-----------------------",-3)
+("------------------------",-5)
+("-------------------------",-6)
+("--------------------------",-2)
+("---------------------------",-4)
+("----------------------------",-1)
+("-----------------------------",-10)
+("-------------------------------",-3)
+("--------------------------------",-1)
+("----------------------------------",-3)
+("------------------------------------",-4)
+("--------------------------------------",-1)
+("---------------------------------------",-1)
+("-------------------------------------------",-3)
+("--------------------------------------------",-8)
+("---------------------------------------------",-1)
+("------------------------------------------------",-1)
+("--------------------------------------------------",-1)
+("---------------------------------------------------",-1)
+("----------------------------------------------------",-1)
+("----------------------------------------------------------",-1)
+("------------------------------------------------------------",-12)
+("---------------------------------------------------------------",-1)
+("--------------------------------------------------------------------",-1)
+("---------------------------------------------------------------------",-2)
+("----------------------------------------------------------------------",-9)
+("-------------------------------------------------------------------------",-1)
+("--------------------------------------------------------------------------",-1)
+("-----------------------------------------------------------------------------",-7)
+("------------------------------------------------------------------------------",-1)
+("------------------------------------------------------------------------------------",-2)
+("---------------------------------------------------------------------------------------------------------------------------------",-1)
 ("------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------",-1)
+("-----------memory--------",-1)
 ("--------8<------",-1)
+("-----io--",-1)
+("----cpu--",-1)
+("----total-cpu-usage--",-1)
+("---...-",-1)
+("---///-",-1)
+("--->[freebsd]--",-1)
+("---paging",-1)
+("---swap",-1)
+("---system",-1)
+("---until-",-1)
+("---~----~---",-1)
+("--.",-5)
+("--.--//=++.++||++.++//=--.",-1)
+("--.--//=++.++||++.++\\\\=--.",-1)
+("--.--==++.",1)
+("--.--==++.++|++.++!=--.",-2)
 ("--..",-2)
-("-rw-r--r",-1)
+("--..-",-2)
+("--=|=",-1)
+("--><",-1)
+("--Any",1)
+("--but",-1)
+("--diakopter",1)
+("--enable-languages=c,objc,c++,obj-c",1)
+("--end",-2)
+("--INSERT",-1)
+("--More",-4)
+("--o",-1)
+("--really",-1)
+("--rwx----",-1)
+("--sigh",-1)
+("--TEXTAREA",-1)
+("--VISUAL",-1)
+("--with-gcc=g",1)
+("--worry",-1)
+("-.",-1)
+("-.--",-1)
+("-0L--",-1)
+("-<>",-1)
+("->--------[f]-",-1)
+("->--------[g]-",-1)
+("->--[f]-------",-1)
+("->--[g]-------",-1)
+("-i",-1)
+("-lstd",1)
+("-lstdc",12)
+("-m",-1)
+("-r------",-1)
+("-r--r--r",-17)
+("-r-sr-x-",-2)
+("-rw-----",-28)
+("-rw-r---",-4)
+("-rw-r--r",-84)
+("-rw-rw--",-8)
+("-rw-rw-r",-8)
+("-rwx----",-2)
+("-rwxrw-r",-1)
+("-system",-1)
+("-Weff-c",2)
+("-Weffc",4)
+("-_",-2)
+("-_--",-1)
+(".",-5)
+("..",-1)
+("./Debug/bin/clang",1)
+("./Foreign/C/Types.hs",-1)
+(".ai",1)
+(".ast",1)
+(".c",1)
+(".map",1)
+(".TheInternets",1)
+("/---",-1)
+("//<",-2)
+("//<!",-2)
+("//\\",-1)
+("/<!",-1)
 ("/b/",-1)
+("/c",1)
+("/me",1)
+("/o",-1)
+("/usr/bin/g",5)
+("/usr/lib/libstdc",1)
+("/usr/local/bin/g",2)
+("/\\<",-16)
+("/~\\_/",-1)
+("0",0)
+("0)",-1)
+("1",0)
+("1-",-1)
+("1/",1)
+("1000",1)
+("1000+",1)
+("160",2)
+("167772-",-1)
+("18",-1)
+("1Password",1)
+("2.m",1)
+("20%",-2)
+("2012",1)
+("2359",1)
+("24",1)
+("279",1)
+("2pac",1)
+("3",-1)
+("3)",1)
+("3)>>",4)
+("3)>>>>>>>>>>>>>>>>>>>>>>>>>>",1)
+("3)\194\187",1)
+("3)\194\187.",1)
+("30$-",-1)
+("30+++",1)
+("3g",-1)
+("4",1)
+("4)>>",2)
+("40->20--------",-1)
 ("420chan",-2)
-("4chan",-3)
+("4chan",-2)
+("5",1)
+("5+",1)
+("50%---",-1)
+("6",1)
+("6)",3)
+("6.4",-1)
+("64bit",1)
+("70",1)
+("70%-----",-1)
 (";)",-1)
 (";D",1)
-("<",-155)
-("<-",-9)
-("<--",-3)
+("<",-3875)
+("<!",-32)
+("<!-",-1)
+("<#",-1)
+("<-",-534)
+("<--",-78)
+("<---",-17)
+("<----",-9)
+("<-----",-3)
+("<------",-3)
+("<----------",-1)
+("<-----------",-1)
+("<------------",-1)
+("<-------------",-1)
+("<-----------------------------",-1)
+("<-------------------------------------------",-1)
 ("<--f",-1)
-("a",2)
+("<.>+++++++++++[<++++++++>-]<-.--------.+",2)
+("<<",-5)
+("<<-",-12)
+("<<--",-1)
+("<<---",-1)
+("<<----",-2)
+("<<<",-1)
+("<<<-",-4)
+("<<<<-------",-1)
+("<<<<==--",-1)
+("<=",-1)
+("<=-",-1)
+("<=---",-1)
+("<?>",1)
+("<C",1)
+("<name>",0)
+("===-",-4)
+("======|>--",-1)
+("=_+",1)
+("=_+++++",1)
+(">",-3)
+(">-",-1)
+(">----",-1)
+(">--o",-1)
+(">f+++++",1)
+("@pl",2)
+("a",17)
+("a)",-2)
+("A+",1)
+("A++",3)
+("A+++",3)
+("A++++",1)
+("A+++++",1)
+("A++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++",1)
+("a-",-1)
+("AAC",2)
+("aalib",1)
+("aavogt",6)
+("ab5tract",1)
+("abajo",-1)
+("abbe",1)
 ("abbreviations",-1)
-("ack",1)
-("adu",1)
+("absolut",1)
+("abstraction",1)
+("abusing-grad-borrowing-privileges",1)
+("acabar",1)
+("access)",-1)
+("ack",2)
+("ack.pl",1)
+("actors",1)
+("actually",-1)
+("Ada",1)
+("adamk",1)
+("Adams)",1)
+("adamvo",1)
+("adaptors",-1)
+("add",-1)
+("added",-1)
+("addition",1)
+("adiabatic",1)
+("adium",-1)
+("adu",2)
+("aff",1)
+("again-",-1)
+("age(br1)",1)
+("agent",1)
+("agentbleubleu",2)
+("aggregate",1)
+("ago",-1)
+("ago!\"",-1)
+("agustin",1)
+("ah\195\173",1)
+("ajavid",1)
 ("ajax",-1)
+("alester",2)
+("alexeevg",1)
+("alexlea",-1)
+("alex___",1)
 ("align-regexp",1)
+("Alii",-2)
+("AliiCat",1)
+("AliiCat+",2)
 ("allan_holdsworth",1)
+("allison",4)
+("almost\"",1)
+("along",-1)
+("alpounet",1)
+("altmattr",1)
+("amazon",-1)
+("amd64",1)
+("amendola",1)
+("amounts",-1)
+("amstan",1)
+("anagramas",-1)
+("analogies",1)
 ("analworm",1)
+("analysis",-2)
 ("anarchy)",1)
-("andy",-8)
-("anibal",1)
-("anton",1)
-("araujo",1)
+("AndrewBC",1)
+("AndroidIRC",1)
+("andun",1)
+("andy",-7)
+("andy_gilmore",1)
+("angel_tears",1)
+("anibal",7)
+("anibal_",1)
+("animaniacs-",-1)
+("anime",1)
+("anonymous",1)
+("answer-",-1)
+("answers",1)
+("antel",1)
+("anteldata",-11)
+("antelmierda",-1)
+("anti-C",5)
+("antiguos",-1)
+("anton",2)
+("any",0)
+("anything",-1)
+("anything-c",1)
+("apart",-1)
+("apfelmus",1)
+("APL",1)
+("Apocalisp",2)
+("apple",-3)
+("Apple-MFS",1)
+("AppleCare",1)
+("Applicative",1)
+("aqua",-1)
+("araujo",2)
 ("arch",0)
+("ARD",1)
+("are-",-1)
+("argentina",0)
+("arglist",-1)
+("argument",-1)
+("ARIAN",4)
+("aristid",2)
+("arity)",1)
+("arjanb",1)
+("arnold",1)
+("arnsholt",1)
+("artem",3)
 ("artem.pilas",1)
+("arthur",-1)
+("artigas",1)
+("artzoyd",1)
 ("ascii",2)
 ("asdasd",1)
+("ash",1)
+("asm/C",1)
+("assertions)",-1)
+("assholes",1)
+("assignment",-1)
+("assurance",1)
+("AST",1)
+("astoriakidd@something.com<-",-1)
 ("astrolabe",1)
-("audreyt",9)
-("augustss",1)
+("AT&T",-1)
+("ATH+",1)
+("atkins",1)
+("ATL/C",1)
+("atomicallyModifyIORef",1)
+("ats/c/c",1)
+("atwood",0)
+("Audrey",2)
+("audreyt",19)
+("augustss",4)
+("autarch",50)
 ("automobiles",1)
+("automysqlbackup",1)
 ("autounfudge",1)
 ("Auzon",8)
-("Axman6",0)
-("azawawi",46)
+("avar",1)
+("avena",1)
+("avr-g",2)
+("awesome",3)
+("awesomegifs.com",-1)
+("awhile",-1)
+("axionix",1)
+("Axman6",10)
+("azawawi",149)
+("azn",2)
+("B",5)
 ("b)",1)
-("bacek",4)
+("B---------",-1)
+("b-04",9)
+("b0o-yeah",1)
+("baba",1)
+("bacek",62)
+("bacek_",1)
 ("backlog",1)
-("bash",2)
-("Baughn",1)
+("backticks)",1)
+("backtrace)",1)
+("bacon",1)
+("bad",1)
+("badass",1)
+("baest",3)
+("balancer<-",-1)
+("bang-patterns",1)
+("Banshee",1)
+("barefoot",1)
+("Barnerd",1)
+("bash",1)
+("basic",1)
+("batman",1)
+("Baughn",6)
 ("bayes",1)
-("bernhard",1)
+("BBEdit",-1)
+("be",-1)
+("be1",0)
+("beauty",1)
+("Beelsebob",-2)
+("beer",13)
+("beer++",1)
+("behaviour)",1)
+("belen",1)
+("benalene",2)
+("BendersGame",1)
+("benmachine",8)
+("ben_m",1)
+("Berends)",1)
+("Berengal",4)
+("bernardo",2)
+("berndardo",1)
+("bernhard",10)
+("Berzerker",1)
+("better",-2)
+("betterworld",1)
+("BHSPitMonkey",0)
+("binary",-1)
+("binary-strict",-3)
+("bind9",1)
+("Bingham)",1)
+("bip",-2)
+("bisect)",1)
+("bizarreness",1)
+("bkeeler",5)
+("Blackbook",-1)
+("blackdog",2)
+("blanca",1)
 ("ble",1)
+("bless",-2)
 ("Blitz",1)
-("BMeph",0)
-("BONUS",1)
-("bos",2)
-("br1",3)
+("Blixtor",3)
+("blocks",1)
+("bloonix",1)
+("blow",1)
+("blub",1)
+("BMeph",1)
+("bnijk",-5)
+("boegel.",1)
+("bogons",-1)
+("bolingbroke)",1)
+("bong\195\179s",1)
+("bonie",1)
+("bonnie",34)
+("bonsaikitten",-3)
+("BONUS",7)
+("boolify",1)
+("bored",-1)
+("bos",9)
+("Botje",3)
+("bouncer",1)
+("bpetering",5)
+("br",-1)
+("br1",159)
+("br1_age",1)
+("brainfuck",1)
+("branching)",1)
+("Branes",1)
+("break19",1)
+("bremner",1)
+("brent+",1)
+("brevity",1)
+("brimstone",-1)
+("Broadwell)",2)
+("brou",-1)
+("browniePoints",1)
+("brucelee",1)
+("bruno",1)
 ("brunox",1)
+("bsd",3)
+("bsd.xen-",-1)
+("btrfs",1)
+("btw",-1)
+("bubulein",1)
+("BUILD)",1)
+("bullets-",-1)
+("bump",0)
 ("Burke)",1)
-("byorgey",5)
-("C++",0)
-("c++++",1)
-("C,C",1)
-("C--",1)
-("C/",1)
-("C/C",11)
+("busy",1)
+("BUT",-2)
+("but-",-1)
+("but--erm",-1)
+("BUTT",2)
+("butt-",-1)
+("Butta",3)
+("buttbot",1)
+("buttbot2",5)
+("buttbott",0)
+("Buttcidicbunny",-1)
+("butter<",-1)
+("buttobt",0)
+("button",-1)
+("buttpad",1)
+("buu",2)
+("buubot",3)
+("buy",-1)
+("byorgey",23)
+("byorgrey",0)
+("bytestring",1)
+("bz@",1)
+("bzr",1)
+("b_jonas",0)
+("B|-----------------2--3--2------------2--3--2----------",-1)
+("C",3)
+("C#",-1)
+("C#/C",2)
+("C+",4)
+("c++",0)
+("C++++",2)
+("C++++++",1)
+("c,c",2)
+("C--",4)
+("C--++--",1)
+("C--->C",-1)
+("C-/C",-1)
+("C-to-C",1)
+("C.",3)
+("c/",12)
+("C/C",485)
+("C/C++/Objective-C/Objective-C",1)
+("c/obj-c/c",1)
+("c/obj-c/c++/obj-c",1)
+("C99",-1)
+("c99/c",1)
+("cabal",4)
+("cabal-1.8",1)
+("cabal-install",3)
+("cabling",1)
 ("caca",1)
+("cache",1)
+("cacti",1)
 ("cadillac_",1)
-("calarval",1)
-("cale",7)
+("cads",1)
+("cafe",1)
+("caf\195\169",1)
+("Cagada",2)
+("cairo",1)
+("calamaro",-1)
+("calarval",2)
+("calcomania",1)
+("Cale",42)
+("caleskell",0)
+("Caleskell+",1)
+("Cale_",1)
+("callcc",1)
+("calor",-1)
 ("camargo",1)
+("canada",1)
+("candidate_count",1)
+("candy",1)
+("canteras",1)
+("captain_beefheart",1)
+("captain_beyond",1)
+("care",-1)
+("carli",0)
+("carlin",85)
+("carlin+",1)
+("carlin++",2)
 ("carlos",-1)
 ("carlos_oficina",1)
+("carnaval",-1)
+("carped",1)
+("carrasco",-1)
 ("carrito",-1)
-("case",-1)
+("case",-2)
+("case)",-1)
+("casmu",-1)
+("cat",1)
+("Catalyst",1)
+("catamorphisms",1)
+("categoryTheory",3)
+("catpants",37)
+("cats",1)
 ("cdavaz",1)
-("cdsmith",1)
-("chameleon",1)
-("chelo",3)
-("chromatic",1)
+("cdsmith",2)
+("centrinia",-1)
+("centrinia-is-evil",1)
+("CERTIFICATE---",-1)
+("chameleon",4)
+("chameloon",0)
+("champagne",1)
+("changes_in_ghc",-1)
+("chanserv",-11)
+("chaos_theory",1)
+("chatroulette",1)
+("chavez",0)
+("checos",1)
+("cheeser",3)
+("cheezey",-117)
+("chef/puppet",1)
+("chelo",2)
+("Cheshire",1)
+("chessguy",1)
+("chia",1)
+("ChilliX",1)
+("chizitos",1)
+("chmeee",1)
+("chowder",1)
+("chris",-1)
+("chris2",1)
+("chrisdolan",1)
+("chrisdone",2)
+("chromatic",32)
+("chrome",3)
+("chuck_moore",1)
 ("chuelmo",1)
+("churrasco",1)
 ("ch\195\169vere",0)
+("cimplemente",1)
+("circles",1)
+("circumfix",1)
+("cisco",-1)
+("cizra",2)
 ("cjfields",3)
-("cmake",-1)
-("coke",1)
+("cjs",1)
+("clang",29)
+("class=\"code\"><!",-1)
+("ClaudiusMaximus",1)
+("Clavijo",1)
+("click....carpal",1)
+("climategate",1)
+("clinger",4)
+("clinton",1)
+("clipboard",-1)
+("CLORO",-1)
+("close",1)
+("closure",-1)
+("Cloud",1)
+("cls_bsd",1)
+("cmake",-2)
+("cmake/vim/g",1)
+("Cmd",-2)
+("cnf",3)
+("Coates",1)
+("Cocoa/ObjC",1)
+("code",1)
+("codensity",1)
+("code_reuse",1)
+("coffee",3)
+("Coke",9)
+("coldfusion>php>c",1)
+("Coleda)",1)
+("Colemak",-1)
+("Coleoid",1)
+("colloguy.karma",1)
+("colloquy",-1)
+("colomon",175)
+("colomon_",1)
+("colonia",-1)
+("colorline",-1)
+("colors",-1)
+("comb",1)
+("combinators)",1)
+("command)",1)
+("commandline",-1)
+("commands",1)
+("comment",1)
 ("commitbit",1)
+("committers",1)
+("community",2)
+("compare",1)
+("compensate)",-1)
+("compile",1)
+("compilers",1)
+("complete",1)
+("component",-1)
 ("computers",0)
-("cotto",1)
-("credit",-1)
+("conal",8)
+("concepts.</C",1)
+("concer",-1)
+("concurrenthaskell",1)
+("condorigo",1)
+("condorito",1)
+("conexion",-1)
+("confluence",1)
+("conor",2)
+("consensus",1)
+("consistency",2)
+("consistently-buggy",1)
+("contextuals",1)
+("convergence",1)
+("cool",0)
+("copumpkin",10)
+("copy-paste",1)
+("Core/STG/C",-1)
+("core/stg/grin/silly/c",-1)
+("CoreInfo",-1)
+("corruption",1)
+("cosimo",1)
+("cosmicnet",6)
+("CosmicRay",1)
+("cosmosophy",2)
+("cotto",5)
+("counter",1)
+("cowie",1)
+("cox",1)
+("cpan",2)
+("CPng|N",3)
+("cps",1)
+("CReal",1)
+("create(andTrim)",1)
+("creatina",1)
+("credit",-2)
+("Cross)",1)
+("crsd",-1)
+("crw-----",-2)
+("crw--w--",-5)
+("crw-r---",-9)
+("crw-r--r",-1)
+("crw-rw--",-5)
+("crwSr-Sr",-1)
+("crx-rw--",-1)
+("CrypticS_",1)
+("Crypto",9)
+("Crypto-",1)
 ("CryWolf",1)
+("cspencer",12)
+("css",-2)
+("cthulhon",-147)
+("ctrl",1)
+("ctrl-w",-1)
+("cuarto",1)
 ("culo",1)
+("CuriosTiger",1)
+("curmudgeon",1)
+("currentIndex",0)
+("currentStaticObjectCounter",1)
+("CXXC=clang",2)
+("cybercobra",1)
+("cycling",1)
+("C\\C",1)
+("c_wraith",4)
+("d",3)
 ("d+",1)
+("D+++",1)
+("D-",-1)
+("d--------",-1)
 ("d------------------------",-1)
+("daemon",2)
 ("daf",1)
+("dafis",2)
+("daime",2)
+("dairico",1)
+("dalek",1)
+("damian",3)
+("damian--",1)
+("dan",-2)
+("dan--------------------------------",-1)
+("dancor",2)
+("danharaj",1)
+("DanielC",9)
+("danijami23",-1)
+("dankogai",6)
+("danl",3)
+("darbelo",1)
+("darcs",-1)
+("Darcs/Patch/OldDate.hs",-2)
+("darkcore",1)
+("Darren_Duncan",2)
 ("darth_vader",1)
+("Data.Foldable",1)
+("Data.Foo.Pretty-",-1)
+("Data.Traversable",1)
+("datalog",1)
+("datura",0)
+("DaveXi",1)
+("david.green",1)
+("day)",1)
+("days",-1)
+("Day_",1)
+("DB",1)
+("db2",-1)
 ("dbertua",1)
-("dcoutts",3)
-("ddarius",4)
+("dc",12)
+("dcouts",1)
+("dcoutts",18)
+("ddarius",16)
+("ddrescue",1)
+("deadbeat",1)
+("debian",1)
+("debug",1)
+("decadentes",1)
 ("decobot",-1)
+("Deepy",1)
+("Deewiant",-1)
+("default<-",-1)
+("defaulting",-1)
+("defun",1)
+("delirant",-1)
+("deniability)",1)
+("density",1)
+("dependent-types",1)
+("dereference",-1)
+("Descamps)",1)
 ("desktops",1)
-("dibblego",2)
-("dmwit",1)
-("dolio",0)
-("dons",5)
+("detection)",-1)
+("dev-c",7)
+("devc",1)
+("Development)",2)
+("DFOR",-1)
+("dforstyh",2)
+("dforsyth",-99)
+("dho",3)
+("dho_plan9",1)
+("di.fm",1)
+("diakopter",135)
+("diakopter--",1)
+("Dianora",3)
+("dibblego",4)
+("Dickie",46)
+("DickieBo",-1)
+("dickiepoo........<",-1)
+("diego1",1)
+("different",-1)
+("digitalice",-24)
+("dime",1)
+("dirs",-1)
+("distance",-1)
+("distinctions",1)
+("distracting",-1)
+("dixie_dregs",1)
+("djahandarie",1)
+("django",-3)
+("django_forms",1)
+("djinn",1)
+("dmwit",4)
+("dmwit_",1)
+("dnaumov",1)
+("dns+",1)
+("DoAndIfThenElse",-1)
+("dobblego",1)
+("docs)",1)
+("documentation)",-1)
+("documents",-2)
+("does",1)
+("dogs",-1)
+("dolio",7)
+("dons",14)
+("doserj",1)
+("dott",1)
+("double_standards",1)
+("Dowland",1)
+("DPAN",1)
+("dr",-1)
+("draq1",1)
+("dream_machine",1)
+("DRMacIver",2)
+("Dropbx",1)
+("drudge`",1)
+("DrunkGymnast",1)
+("drw-----",-2)
+("drw-r--r",-1)
+("drw-rw-",-1)
+("drw-rw--",-1)
+("drwx----",-15)
+("drwxr-x-",-2)
+("drwxrwx-",-5)
+("dryanta",3)
 ("dr_df0",3)
+("dschoepe",1)
+("DTRT",1)
+("duckpunching",1)
+("dude",1)
+("duff",39)
+("Duff)",2)
+("dukeleto",7)
+("dust",-1)
+("dust-",-2)
+("Dutch",2)
+("dvl",1)
+("dvorak",1)
+("dwhipp",3)
+("DWIM",1)
+("dwm",3)
+("dymons",1)
+("eaten",-1)
+("Ebert_",-2)
+("eclipse",0)
+("ecmuller",1)
+("ecn",1)
+("edfly",1)
+("edgar",2)
+("editline",-3)
+("edit_distance",-1)
+("eduardo",1)
+("edwardk",9)
+("Eelis",1)
+("effc",1)
+("effects",-1)
+("eflister",-1)
+("egh",-1)
+("egypt",1)
+("eip",1)
+("Eirik",1)
+("eiro",1)
 ("elcresta",1)
-("ELF",2)
-("elpolilla",24)
+("elf",2)
+("elpolilla",85)
+("elpolillafan",1)
+("elreg",1)
+("Elsayed)",3)
+("elsueco",1)
+("emacs",5)
+("emb",1)
+("emerge",-1)
 ("emos",-1)
+("en.wikipedia.org/wiki/C",-1)
+("en0th",1)
+("encoding",-1)
+("end",0)
+("enfermedades",-1)
+("enfermo",-1)
+("engineering)",1)
+("english",1)
+("EnglishGent",1)
+("enough",-1)
+("ensalada_de_frutas",1)
+("enter",-1)
+("entirely",-1)
+("Entroacceptor",1)
+("entry)",1)
+("envaginada",2)
 ("envasados",1)
-("erg0t",10)
+("enzo",1)
+("epoxy",1)
+("erasure",-1)
+("ERC",-1)
+("erdos",1)
+("erg0t",114)
+("erg0t+",1)
+("erg0tpolux",1)
+("erg0t_",2)
+("eric256",5)
+("Eridius",1)
 ("ernestor",1)
-("EvilTerran",3)
+("erny",4)
+("esmoquin",-1)
+("estradasphere",1)
+("etc",1)
+("eternaleye",5)
+("europe",1)
+("EvaLuaTe",1)
+("evangelists",-1)
+("EvanR-work",1)
+("evaryont",1)
+("evening",1)
+("EventEngine",1)
+("everyone",5)
+("evil",1)
+("evil-danger-is-my-middle-name-mangler",1)
+("EvilTerran",7)
+("EvolPenguin",-1)
+("ex-C",1)
+("excel",-1)
+("expectations)",1)
+("Expr",1)
+("ezjail",1)
+("ezyang",3)
+("f+++",1)
+("f-",-3)
+("F--",-1)
+("F---",-2)
 ("fachoness",1)
 ("fachos",1)
+("factor",1)
+("fail",-1)
+("fakegina",1)
+("familiar",-1)
+("family)",1)
+("fanbois",-1)
+("far)",-1)
+("Fare",2)
+("fas",-1)
+("fasta",4)
+("fatalnix",1)
+("fax",2)
+("faz",1)
+("FC",12)
+("fclabels",1)
+("fcr",1)
+("fdie",-1)
+("feather",1)
+("fedaykin",1)
+("fedora",1)
+("Felds)",12)
+("Feuerbach",1)
+("feydr",1)
 ("ff3<",-1)
-("fglock",6)
+("FFFFFF",-1)
+("FFI",2)
+("ffmpeg",1)
+("fglock",15)
+("fibbo",-1)
 ("files",-1)
-("fish",-1)
+("finals",-3)
+("finanalyst",5)
+("fingertree",1)
+("firefox",-2)
+("fish",0)
 ("fish+",1)
-("foo",1)
+("flan",2)
+("flash",-1)
+("flazx",1)
+("fleas",-2)
+("flexbuilder",-1)
+("FliPPeh",-1)
+("Flowerbauer+",1)
+("Fly)--------------------------------------------------------",-1)
+("fmargmeads",1)
+("foca",1)
+("foldl",-1)
+("foldl'",1)
+("folks",2)
+("fondu",1)
+("foo",2)
 ("Foo)",1)
+("Food)",1)
+("fool",-1)
+("forget",1)
+("forget`)",1)
+("forro",1)
+("fort",1)
+("FORTRAN",-1)
+("Foster)",65)
+("Fosters",-1)
+("foxclocks",1)
+("fperrad",1)
+("fragcount",1)
+("francas)",1)
+("France",-1)
+("fredrik",1)
+("fredrin",2)
+("freebsd",0)
+("freenode",0)
+("freenode/##c",1)
+("frettled",26)
+("frew",29)
+("friend)",1)
+("frogor",4)
+("fromForeignPtr",1)
+("fromIntegral",1)
+("frooh",1)
+("frooh_",1)
 ("frula",-2)
-("fryguy",-3)
+("frutas",1)
+("frutigran",1)
+("fryguy",-2)
+("ftdi",1)
 ("fucktard",1)
-("g",4)
+("fuel",1)
+("fun",2)
+("functor",1)
+("FunctorSalad",3)
+("fuser",1)
+("fusion",1)
+("FW",1)
+("fw-",-1)
+("fyi",-1)
+("g",313)
+("g++",1)
+("g++/c",1)
+("g4",-1)
 ("gaal",1)
+("GADTs",1)
+("galactic",1)
 ("gallego",2)
+("Gallomimia",1)
+("gamebryo/C",1)
+("gardel",1)
+("Gary_Simat",1)
+("gateway",-1)
+("gay.pl",-1)
+("gbacon",1)
+("gcc",-1)
+("gcc-c",1)
+("GCC/G",10)
+("gcc/libstdc",1)
+("gdb",1)
 ("geant",1)
-("ghc",0)
+("GeDaMo",2)
+("geeksquad",1)
+("geheimdienst",1)
+("gelatina",1)
+("Genocidicbunny",-13)
+("Gentoo",1)
+("geoffb",2)
+("GeometricAlgebra",1)
+("geomi",1)
+("germany",-1)
+("gerryvdm",1)
+("ghana",1)
+("ghc",1)
+("ghc+",1)
+("ghc-6.10",1)
+("ghc-team",1)
+("GHC.Base.",1)
+("ghci",1)
+("ghci-multiline-input",1)
+("gholms",1)
+("ghost",1)
 ("gifs",1)
-("git",1)
-("glguy",1)
+("gigantes",-1)
+("giles",0)
+("gilimanjaro",-1)
+("gimp",1)
+("ginkgo_biloba",1)
+("girls",1)
+("gist.github",1)
+("git",13)
+("github",1)
+("GIZA",2)
+("glare",-1)
+("glassfish",1)
+("glguy",2)
+("Gluttony",1)
+("gnole",1)
+("gnomon",1)
+("gnumeric",1)
+("gnuplot",1)
+("goals)",1)
+("Goatee+++++++++++",1)
+("god",3)
+("godel",1)
+("goes",-1)
+("golf)",1)
+("gonchuki",1)
+("gongoputch",6)
+("gongzilla",1)
+("gonz",1)
+("gonzalus",-1)
+("good",-1)
+("goog",-1)
+("Google",0)
+("goombas",1)
+("GoSox",2)
+("Gothenburg",1)
+("Gothmog_",1)
+("gotico",-1)
+("GPL",-1)
+("gr00vy",0)
+("gra",-1)
+("Gracenotes",4)
+("GracjanPolak",1)
+("grahamhutton",1)
+("grail",1)
 ("grant",1)
+("graphviz",1)
+("gravity",1)
+("gressvol",-1)
+("greycat",1)
+("groom",1)
+("groupthink",1)
+("growl",1)
 ("grub",-1)
+("gtk",-2)
+("gtk/C",2)
+("guaran\195\161",1)
+("Guava",1)
+("guess",-2)
+("guido",1)
+("guido_suller",1)
 ("guis",0)
+("gump",1)
+("gwenview",1)
+("gwern",8)
 ("hackage",2)
+("hackage\"",1)
+("hackage.haskell.org",-1)
+("hacked",1)
 ("hackery+",1)
+("hacking)",1)
 ("hackingshoes",1)
+("hacks",0)
+("hacks)",1)
+("haddock",-3)
+("Haffa",2)
 ("Hague)",1)
-("haskell",46)
+("halberd",1)
+("halos+",1)
+("haml",1)
+("happen",-1)
+("happstack",1)
+("har",-1)
+("hard",1)
+("harrop",4)
+("has",-1)
+("haskaml",2)
+("haskeline",-2)
+("Haskell",60)
+("haskell-",-1)
+("Haskell-C",1)
+("Haskellcidicbunny",-1)
+("HaskellLllama",1)
+("HaskellLove",1)
+("Haskell\226\128\147C",1)
+("Hasselbacher)",14)
+("hateC",1)
+("hatred",1)
+("have",-2)
+("haxml",1)
+("hayoo",2)
+("HCAR",2)
+("head",-2)
+("headache+",1)
+("headphones",1)
+("hector",1)
+("Heffalump",4)
+("heh",1)
+("Helio",3)
+("Hellige)",1)
+("helped)",1)
+("henderson",1)
+("here",2)
+("hexidigital",0)
 ("hexrays",1)
+("hgabreu",2)
+("hgolden",2)
+("hi",-4)
+("hibernacion",1)
+("him",-1)
+("hinrik",76)
+("hint",1)
+("history",1)
+("hobobuttsex",1)
+("home)",-1)
+("homerj",1)
+("homework",-1)
+("honesty",1)
+("hoogle",2)
+("horacio",1)
+("hotdogs",1)
+("hotmail",-1)
+("housenka",1)
+("hoy",1)
+("hp",1)
 ("hpaste",0)
+("hpaste2search",1)
+("hpc",2)
 ("HSOE",-1)
+("html",-1)
+("html5",1)
+("http",-1)
+("hudak",1)
+("hudnix",1)
 ("hueovo",1)
+("hueso",5)
+("huesos",3)
+("huevos",-1)
+("HughesPJ",1)
+("hugme",7)
+("hugs",0)
 ("humans",0)
+("humility",1)
+("humor",1)
+("hv2",1)
+("Hyper-C",1)
+("Hypftier",1)
+("i",21)
+("i++,a",1)
+("i586-mingw-whatever-g",1)
+("i586-mingw-whateverbutt",1)
+("IBM",-3)
+("IcanCU",1)
+("iceWM<---",-1)
 ("icfp",-1)
+("IdCPS",1)
+("IDEA",3)
+("idling",1)
+("idnar",1)
+("IE",1)
+("if",1)
+("if(i",3)
+("IGAME/C",2)
+("Igloo",5)
+("ignore_list_size",1)
+("ihrd",9)
+("ijuma",1)
+("ijuma_",1)
 ("Ikary",1)
+("iLap",1)
+("ilid",1)
+("IllvilJa",3)
+("iluminado",1)
+("Ilya",1)
+("image.<",-1)
+("IMAP",-1)
 ("imdb",1)
-("infinoid",5)
-("ingy",14)
-("inkscape",1)
-("instances",-1)
-("int-e",1)
-("intel",-1)
+("ImInYourMonad",-1)
+("in--",-1)
+("inference",1)
+("Infinoid",14)
+("ingles",1)
+("ingy",15)
+("iNick",1)
+("inkscape",2)
+("Innovation",1)
+("insanity",1)
+("insoddisfazione",1)
+("installed",-1)
+("instances",0)
+("int-e",3)
+("int80_h",-1)
+("Integer",0)
+("intel",0)
+("inter",-1)
+("intercal",1)
+("internet",2)
+("internets",1)
+("interpretation)",1)
+("intersect",-1)
+("inverses",-1)
+("IO",0)
+("IOArray@Data/Array/IO/Internals.hs-",-1)
+("iocor",-1)
+("Ion3++",1)
+("IOOIIIOIIO",1)
+("iplayer",1)
+("iPod",1)
+("IQ",1)
 ("iran",-1)
+("irc",3)
+("IRC)",1)
+("irc2samus",4)
+("irclog.perlgeek.de)",1)
+("Irix",-1)
+("irony",1)
+("irssi",5)
+("is",-2)
+("ishmal",-2)
+("islands",21)
+("iso-c",1)
+("ISP",-1)
+("iss",1)
+("issue9",1)
+("it",-5)
+("itunes",0)
+("ivan",1)
+("ivanm",22)
+("iverson",1)
+("J",4)
+("j#/j",1)
+("J/J",1)
+("j3camero",1)
+("jafelds",14)
+("Jafet",2)
+("JaffaCake",3)
+("JalenJade",1)
+("jamiroquai",1)
+("japhb",10)
+("japon",1)
+("jaspervdj",1)
+("jav",1)
+("java",-10)
+("Java/C",17)
+("Java/C#/C",3)
+("Java/C/C",1)
+("javascript",-1)
 ("jaynes",1)
+("jbapple",2)
+("jdlugosz",8)
+("jdv79",2)
+("jean_claude_van_damme",1)
+("Jedai",0)
+("jeffwheeler",0)
+("jeffz",2)
 ("JEJEJE",1)
+("jer",3)
+("jeremiah",3)
+("Jesus",1)
+("jews",1)
+("JFDI",3)
+("jhell",5)
+("jimmiejaz",1)
+("jimmy",39)
+("JimmyZ",1)
 ("jinja",1)
-("jonathan",9)
+("jkeenan",1)
+("jlibmpq/src/c",1)
+("jmcarthur",3)
+("jmcarthur.points",1)
+("JNI",-1)
+("jnth",1)
+("jnthn",607)
+("jnthn+",1)
+("jnthn+++++++++++",1)
+("jntn",1)
+("jobs",1)
+("jogla",1)
+("JohnMeacham",1)
+("john_cage",1)
+("jojo",-1)
+("jokes)",1)
+("Jon",1)
+("jonalv",2)
+("jonathan",102)
+("jonathanturner",1)
+("Jonno_FTW",1)
+("josette",1)
+("jpaetzel",1)
+("jpalmer",1)
+("jrm",2)
+("jrockway",1)
+("js",1)
 ("jsn",1)
-("kolmodin",1)
-("kowey",1)
-("kpreid",1)
-("l",1)
+("jsoft",1)
+("json",5)
+("jsut",3)
+("judah-jacobson",1)
+("judahj",2)
+("Judge",-2)
+("Juerd",8)
+("Juerd_",1)
+("Jython",2)
+("K",2)
+("k-means",1)
+("kadaver",-1)
+("kalkin",-1)
+("kaol",0)
+("Karith",1)
+("karlsruhe----",-1)
+("karma",1)
+("karmanaut",0)
+("kashmir",1)
+("kbateman",2)
+("kcachegrind",1)
+("kde4",-1)
+("Ke",1)
+("Kernel86",1)
+("keyboards",1)
+("keylogger",1)
+("keynote",1)
+("killing-flies-with-nuclear-weapons",1)
+("king",1)
+("KingCannibal",1)
+("Kinos",4)
+("kirby81",1)
+("kjwcode",2)
+("kleptones",1)
+("kmc",5)
+("kmc/kmc",1)
+("kmc_",1)
+("knots",-1)
+("knowledge",1)
+("koala_man",1)
+("Kodi",8)
+("koeien",1)
+("koeien37",3)
+("kolmodin",6)
+("KonaB1end",3)
+("kosmikus",1)
+("kowey",2)
+("kpreid",2)
+("krunk",-1)
+("krunk-",1)
+("krzys",1)
+("ksf",5)
+("KSM",1)
+("kulin",1)
+("kuribas",1)
+("kyle",107)
+("KyleHa",29)
+("kynky",1)
+("k\195\184ns\195\184le",1)
+("L",0)
+("l-wx---",-1)
+("l-wx----",-4)
+("l-wx-----",-1)
+("L.+",1)
+("l0pht",1)
+("labdabot",-1)
+("LaBrassBanda",1)
+("lacalle",2)
 ("ladyfeo",1)
-("lambdabot",4)
+("lambdabot",1)
 ("lamdbabot",1)
-("larry",4)
-("laziness",4)
-("libstdc",1)
-("lispy",3)
+("lament",4)
+("Laney",2)
+("Language.Haskell.TH.Quote.QuasiQuoter",1)
+("lanny",2)
+("laptops)",1)
+("LaraNYC",1)
+("LaraTextual",-1)
+("LaraX",1)
+("larry",26)
+("last",1)
+("late",-1)
+("later\"",1)
+("lathos",1)
+("Latin",2)
+("Latvia",1)
+("layouts)",-1)
+("laz0r",1)
+("laziness",7)
+("LazyIO",-1)
+("lazyness",1)
+("leadnose",1)
+("learning",1)
+("learnyouahaskell.com",1)
+("leche",0)
+("lectrick",1)
+("leet",1)
+("legacy",1)
+("leksah",-1)
+("Lemmih",9)
+("lennon",1)
+("Lentczner)",1)
+("Lenz)",63)
+("LeoD",1)
+("LeoD_",1)
+("leopard<",-1)
+("Lester)",2)
+("Leto",6)
+("Leto)",1)
+("letrec",1)
+("lhames",1)
+("libc",4)
+("libedit",-7)
+("libperl",1)
+("libpq",1)
+("libpurple",-1)
+("libraries/base/Foreign/C/Types.hs",-1)
+("libres",1)
+("libsdc",1)
+("libsigc",1)
+("libstd",4)
+("libstdc",53)
+("libstdcc",1)
+("lichtkind",3)
+("licuado",1)
+("life",-2)
+("life++",-1)
+("liftM2",2)
+("lighthazard",1)
+("lighty",1)
+("like",-1)
+("like-",-1)
+("lilac",2)
+("lilstevey",3)
+("lincoln",2)
+("linenumbers++++++",1)
+("Linkinus",1)
+("linode",1)
+("linux",-4)
+("linux/c",1)
+("lisp",-1)
+("lisp->php->hiphop->c",1)
+("lispy",15)
+("List.",5)
+("lists",-1)
+("lists)",-1)
+("listToMaybe",1)
+("literal",9)
+("literal_videos",1)
+("Lithos",8)
 ("lithyum",1)
-("logs",1)
+("liveusb",1)
+("liwp",1)
+("lizsac",1)
+("lluvia",6)
+("LLVM",1)
+("llvm-1.5-g",1)
+("llvm-c",1)
+("LLVM-G",3)
+("LoC",1)
+("logic",-1)
+("LogicT",1)
+("logs",2)
+("lol",3)
+("LolDispatch",1)
+("longboard",1)
+("loopcount",2)
+("loops",-1)
+("LordRawK",1)
+("lost)",1)
+("los_simuladores",1)
+("love",1)
+("lowasser",1)
+("lpsmith",0)
+("lrw-r--r",-2)
+("lrwx-----",-1)
+("LSD`",1)
+("lsof",1)
+("lua",-1)
+("lucs",1)
 ("luigi",1)
-("luis",1)
-("lwall",51)
-("martin",4)
-("masak",18)
-("mauke",1)
+("luis",4)
+("luite",1)
+("lunabot",1)
+("luqui",5)
+("LurkingBM",1)
+("lvj",1)
+("LVM",1)
+("lwall",530)
+("lyah",1)
+("Lyle",2)
+("LylePerl",6)
+("mac",-1)
+("maceo_parker",1)
+("MacinMan",1)
+("macos",0)
+("macosx",1)
+("macports",2)
+("macros",-2)
+("macs",-1)
+("macvim",2)
+("made",-1)
+("madhat",-1)
+("mahogny",1)
+("main",-1)
+("make",1)
+("makeprg=g",1)
+("malcolmw",1)
+("malta",1)
+("maltem",1)
+("MamboJUmbo",1)
+("mamoul",1)
+("management",1)
+("manaleaks",1)
+("ManateeLazyCat",-2)
+("ManDog202",-1)
+("mangang\195\161s",-1)
+("mantecol_con_chocolte",1)
+("mantraps",1)
+("manuel",3)
+("manufacturers",-1)
+("Map.",2)
+("mapreduce",1)
+("mar",-1)
+("marcelo",1)
+("marcot",1)
+("marc_feeley",1)
+("mariana",2)
+("MariusAZ",1)
+("mariuzaz",-1)
+("mark3l",2)
+("marketing",1)
+("markmont",5)
+("mark_farina",1)
+("Marshal)",1)
+("Martijn",1)
+("martin",5)
+("masada",1)
+("masak",457)
+("Masak)",9)
+("masak.list.elems",1)
+("masakbot",0)
+("Masamune",1)
+("mask",1)
+("mason-l",1)
+("massak",1)
+("Match)",1)
+("matchers-",-1)
+("math",1)
+("maths",-1)
+("mathw",17)
+("matlab",-2)
+("Matt-W",10)
+("mattw",2)
+("mauka",0)
+("mauke",26)
+("mauri",3)
+("max",4)
+("Maybe)",1)
+("mberends",88)
+("mcbride",1)
 ("mckinna",1)
+("McManiaC",1)
+("mdo-and-join-readSTRef-thesame-STRef-you're-defining",1)
+("mdxi",1)
+("me",-2)
+("me\"",-2)
+("mean",-1)
+("medfly",-5)
+("media",-3)
+("Mehndi)",1)
+("memes)",-1)
 ("mempty",1)
+("menem",2)
 ("merca",-1)
+("merijn",8)
+("meta",1)
+("meta)",1)
 ("metadata---",-1)
-("moritz",179)
-("moritz_",6)
-("mrpolux",1)
-("MSVC",1)
+("metaop)",1)
+("meth",1)
+("mibbit.com",1)
+("michael",-1)
+("Michaud)",2)
+("michel",1)
+("microcenter",1)
+("microondas",1)
+("microsoft",0)
+("midd",-1)
+("miel",1)
+("miguel",1)
+("mikehh",1)
+("mike_pall",1)
+("mike_stern",1)
+("mildew",1)
+("milner",3)
+("minds)",1)
+("mine",-1)
+("minimalist-c",1)
+("minus)",-1)
+("MissPiggy",4)
+("mistakes)",1)
+("mitchell",1)
+("mixfix",-1)
+("mixins",1)
+("mixxx",-1)
+("mi_vieja",1)
+("mi_vpn",-1)
+("mj41",4)
+("mjard",4)
+("mjrosenb",2)
+("ml|",1)
+("mmorrow",6)
+("mmrg",1)
+("mmrg5486",1)
+("mncharity",2)
+("MoALTz",1)
+("mob_",1)
+("moment",-1)
+("monad",-1)
+("monadLib",1)
+("monitores",1)
+("monkey",1)
+("Monkey)",-1)
+("monkeypatch",1)
+("MONKEY_TYPING",1)
+("monochrom",11)
+("monotone",1)
+("monty_python",1)
+("moquete",1)
+("more",-2)
+("moritz",955)
+("moritz++",1)
+("moritz_",147)
+("moritz__",2)
+("mornfall",2)
+("mosaic",1)
+("moto",1)
+("motos",1)
+("mouse",-1)
+("mpd",1)
+("mrbungle",1)
+("mrd",1)
+("mreh",1)
+("mrpolux",5)
+("MS",-1)
+("msbob",1)
+("msn",-1)
+("mssql",0)
+("mst",12)
+("msvc",18)
+("mtnviewmark",4)
+("mttxr",-4)
+("mtvdlb",1)
+("Mu",-1)
+("mubot",6)
+("mueval",-1)
+("Munchkin",1)
 ("music",1)
 ("musica",1)
-("MyCatVerbs",1)
-("nachof",4)
+("musicanna",1)
+("mutability",-1)
+("mutar",1)
+("mutt",1)
+("mux",4)
+("mvt",1)
+("mxc",1)
+("MyCatVerbs",2)
+("mysql",-5)
+("myst",1)
+("myVoidPtr",1)
+("m\195\169xico",1)
+("n",1)
+("n00b",1)
+("nachof",5)
+("Nafai",1)
+("Naggum",1)
+("nagiosql",1)
+("names",1)
+("nano",1)
+("nanobsd",1)
+("napolitana",-1)
+("nat",1)
+("nationalgeographic.com",-1)
+("NBN",1)
+("nbrown",2)
+("nbrown_",1)
+("ncmpc",1)
+("ncmpcc",1)
+("ndm",3)
 ("ndmitchell",1)
-("notepad",8)
+("neck",-1)
+("Necrosan",1)
+("NEEDMOAR",16)
+("negative-margins",0)
+("nestl\195\169",1)
+("netbeans",-1)
+("netherlands",1)
+("netstat",1)
+("network",-2)
+("newbie008",1)
+("newsham",1)
+("ng",3)
+("Nicholas",1)
+("nick",1)
+("Nightwish",1)
+("nixon",-2)
+("njan",1)
+("NLindberg",1)
+("no",-1)
+("no-",-1)
+("nodepad",1)
+("noise)",1)
+("nomeata",1)
+("nominolo",0)
+("nominolo_",1)
+("NoMonomorphismRestriction",1)
+("non-C",1)
+("non-c/c",1)
+("Noob",1)
+("NoScript",1)
+("nosotros",1)
+("notDooinItRong",1)
+("notedpad",1)
+("notElem",1)
+("Notepad",67)
+("notepad's",1)
+("Notepad++",0)
+("notepadd",1)
+("notepoad",1)
+("NotFound",2)
+("nothing",-1)
+("nothingmuch",1)
+("notmasakbug",1)
+("now",-2)
 ("nox",1)
-("NULL",-1)
+("nox-",6)
+("np",7)
+("npmap",1)
+("NQP)",1)
+("NSClient",1)
+("NSString",-1)
+("NT+",1)
+("nt1",1)
+("ntsc",-1)
+("null",-2)
+("nulls)",1)
+("Num",0)
+("nursery",-1)
+("nv",-1)
+("nvi",1)
+("obama",-1)
+("Obj",2)
+("obj-c",19)
+("ObjC",24)
+("objc/c/c",1)
+("ObjC/ObjC",1)
+("object)",-1)
+("Objective-C",22)
+("Objective-H#",1)
+("obra",2)
+("obra_",2)
 ("obscurity)",-1)
-("oleg",4)
+("OBSD",1)
+("observation",1)
+("ofC",1)
+("oh",-2)
+("ok-",-1)
+("Olathe",1)
+("old",1)
+("oldfag",1)
+("oldmemes",1)
+("oleg",8)
+("olveyra",1)
+("omegix",1)
+("omnet",1)
+("on",2)
+("one",-2)
+("onion",1)
 ("Ontolog",4)
+("OO",-1)
+("openid-for-npaste",1)
+("OpenLDAP",0)
+("openmp",1)
+("openoffice",1)
+("openvpn",3)
+("OPERA",3)
+("opinions",-1)
+("opportunities\"",-1)
+("opqdonut",1)
+("opticron",1)
+("optimizations",1)
 ("Option",1)
+("OR",-1)
+("Oracle",-1)
+("orbitz",1)
+("Oslo",1)
+("other",-1)
+("otherwise",-1)
+("otto",3)
+("OUTPUT\194\171-",-1)
+("overdesign",-1)
+("ownuniversity",1)
+("ozric_tentacles",1)
+("ozy`",1)
+("p",1)
+("p6eval",0)
+("pablo",-2)
+("paige",-1)
+("pairs",1)
+("paja",1)
+("palpteta",1)
+("paludis",1)
+("pancake",3)
+("panflauta",1)
+("PANIC+",2)
+("Panties",1)
+("paolino",1)
+("papermachine",1)
+("parallels",1)
+("parametric-polymorphism",1)
+("paranoia",1)
 ("paros_bancarios",-1)
-("particle",11)
+("parrot",-3)
+("Parrot/Rakudo/MSVC",1)
+("parse)",1)
+("parsec",-2)
+("participants)",1)
+("particle",48)
+("partition",-1)
+("pastebin",1)
+("pastebin.me",-1)
 ("paste_rompetodo",1)
+("pastie",0)
+("pastie.org",-1)
+("pastorn",-2)
+("patata",1)
+("paterson",2)
+("Paths_foo",1)
+("patterns\"",-1)
+("patterson",0)
+("paulp",1)
+("payload",1)
+("pct",1)
+("pdftk",1)
+("Peaker",3)
+("pela",1)
+("pentium",1)
+("people",1)
+("Perl",2)
+("perl5",-1)
+("perl6",5)
+("Perl6)",0)
+("perl6advent",16)
+("Perlis",1)
+("PerlJam",34)
 ("perlmonks",-2)
 ("perltidy",1)
+("Perl\226\128\130\&6",1)
+("permissions",-1)
+("pescado",2)
+("pfloyd+",1)
+("PGE",1)
+("phantomcircuit",1)
 ("phantomTypes",1)
-("pmichaud",41)
-("pmurias",71)
+("PhatEddy",4)
+("phenny",6)
+("Philippa",1)
+("Philippa__",1)
+("Philonous",2)
+("Philonous1",1)
+("philosophical",-1)
+("phonetically",-1)
+("php",-1)
+("php->C",1)
+("php-to-C",3)
+("picky",-1)
+("pictures)",1)
+("Pietro",1)
+("pink",-1)
+("pipas",1)
+("pixeImator",1)
+("pixelmator",1)
+("pl",2)
+("places",-1)
+("plan",-1)
+("plan9",1)
+("planet)",1)
+("planetx",1)
+("platform",-2)
+("player",-1)
+("player\"",-1)
+("PLP",1)
+("pmichaud",1017)
+("pmurias",404)
+("pnate",2)
+("pochi",1)
+("poco",1)
+("pococ",1)
+("pointer",1)
+("pointers",-1)
+("pointme",2)
+("polaco",1)
+("polakitos",1)
+("Polarina",1)
+("pollo",1)
+("polonia",1)
+("polux",9)
+("population",1)
+("porro",2)
+("portability",1)
+("portenias",1)
+("porticus",-1)
+("portmaster",0)
+("ports/cc/c",1)
+("portupgrade",-1)
+("port_version",1)
+("poss",-1)
+("possible)",1)
+("postfix",5)
+("postgres",2)
+("postgresql",2)
+("postre_ser",1)
+("poucet",2)
+("pounds",1)
+("PPM",1)
+("pq",1)
+("pragmatism",1)
+("preaux_launch",1)
+("precedence",-1)
+("prefix",1)
+("preflex",0)
+("Prelude.",3)
+("present",1)
+("pretty",0)
 ("prettyprinter",-1)
-("progress",1)
-("putter",34)
+("preview",1)
+("pride",1)
+("print(x",1)
+("printf(\"c",1)
+("printpdf",-1)
+("prisms",1)
+("privnote",-1)
+("pro",1)
+("problem",-1)
+("problem-",-1)
+("productividad_negativa",1)
+("productivity",2)
+("profiling",1)
+("programming--",-1)
+("progress",3)
+("Prolog",-1)
+("proto",1)
+("protocool",0)
+("prw-r--r",-1)
+("pryor",6)
+("psychology)",1)
+("psykotic",1)
+("psytrance",1)
+("pthreads",-1)
+("ptr",1)
+("pugs",3)
+("pulper\195\173a",1)
+("pulpos",1)
+("pumkin",1)
+("pumpkin",6)
+("Pun",2)
+("punks",-1)
+("puns",-1)
+("purity",1)
+("purple",1)
+("putter",144)
+("pyrimidine",1)
+("Pythin,C",1)
+("python",0)
+("python)",1)
+("python,c",1)
+("python,ruby,c",1)
+("python-to-C",1)
+("Python/C",2)
+("python/java/c",1)
+("python/ruby/c",1)
+("qc",-1)
+("QMAKESPEC=macx-g",3)
+("Qt/C",3)
 ("qtc",1)
-("quicksilver",4)
+("quagga",1)
+("quake",1)
+("quanticle",0)
+("QuasiQuotes",1)
+("Quassel",-1)
+("queso",1)
+("question",-2)
+("questioning",1)
+("QuickCheck",5)
+("quicksilver",21)
 ("quienfuera",-1)
+("quietfanatic",7)
+("quodlibet",-1)
+("R",-2)
+("r--r--r",-1)
+("rada",-1)
 ("rafl",2)
+("RAGE",1)
+("rail",1)
+("rails",1)
+("rakudo",27)
+("rakudo-parrot-split",-1)
+("Ralith",2)
+("ram",1)
+("random",1)
 ("Range)",1)
+("ranguard",2)
+("rasmus",2)
+("ration",-1)
+("ray",1)
+("rblasch",1)
+("readabler",1)
+("readCount",3)
+("readHtml",-1)
+("readline",1)
+("ReadP",3)
+("really",-1)
+("rebootitis",-1)
+("reddit",1)
+("redditbot",-2)
+("ref",1)
+("references",1)
+("refraction",1)
+("regex)",0)
+("regexes",1)
+("regexes)",1)
+("reified",1)
+("reliable_data_storage",1)
+("remains",-1)
+("remodel",1)
+("remyo_",1)
+("renormalist",3)
+("rep",1)
+("repl",1)
+("replace",1)
+("reppie",16)
+("req",-1)
+("REQUEST---",-1)
 ("resaca",-1)
 ("resbalosa",1)
+("resources",-1)
+("resto",-1)
+("retorcidas",1)
+("retronym",1)
+("return",-1)
+("rg",1)
+("rgrau_",1)
+("rgs",3)
+("Riastradh",2)
+("ricardo_fort",1)
+("richard",1)
+("RichardO",1)
+("ricky+",1)
+("riconosciuto",1)
+("right-",-1)
+("rindolf",1)
+("Ripple)",1)
 ("rjbs",1)
-("roconnor",1)
-("rsync",2)
-("ruoso",31)
-("rurban",2)
-("rwbarton",1)
-("RWH",1)
-("s1n",7)
-("Samus_",2)
-("scala",1)
+("Robert');DROP_TABLE_Students;",-1)
+("RobPike",1)
+("rob|",1)
+("rock",1)
+("rocket",4)
+("roconnor",9)
+("rody",2)
+("rofl--",-1)
+("rog",1)
+("rollers",1)
+("rolls",1)
+("ron",6)
+("ron.koerner",1)
+("RoR",0)
+("rorx",2)
+("rorya",1)
+("RossPaterson",1)
+("RSchulz",1)
+("rsync",3)
+("ruby",-2)
+("ruoso",164)
+("ruoso/progress",1)
+("rurban",4)
+("russians",1)
+("rw-----",-1)
+("rw-------",-1)
+("rw--rw--",-1)
+("rw-r---",-1)
+("rw-r--r",-6)
+("rwbarton",6)
+("rwh",1)
+("rwx----",-5)
+("rwx-------",-1)
+("rwx--------------------",-1)
+("rwxrwx-",-1)
+("ryan[WIN]",5)
+("ryan[WTF]",0)
+("S",1)
+("s/",-1)
+("s/C++/C",1)
+("s/c/c",2)
+("S05",1)
+("S07",1)
+("S08",1)
+("s1n",15)
+("S29",1)
+("sad.",-1)
+("safari",0)
+("SAHChandler",2)
+("Saizan",14)
+("Saizan_",6)
+("Sal",-26)
+("salvatore",1)
+("salvia",1)
+("SamB",1)
+("SamB++++",1)
+("sambay\195\179n",1)
+("SamB_XP",2)
+("SamB_XP_",1)
+("saml",-1)
+("samus",2)
+("samus.viejata",1)
+("Samus_",11)
+("Samy",1)
+("sandniggismo",1)
+("sanga",-3)
+("sanguinetti",1)
+("sanity",2)
+("santander",-1)
+("Saran",5)
+("sass",1)
+("satisfacho",3)
+("Savagedlight",1)
+("say)",1)
+("say-",-1)
+("sbahra",1)
+("sbp",5)
+("sc68cal",1)
+("scala",6)
+("Scheme/C",1)
+("schwarzer",2)
+("Scite/Notepad",1)
+("scrapy",-3)
+("screen",0)
+("Scriptor",2)
+("scrollback",1)
 ("scrot",1)
-("sebazzz",6)
-("shapr",1)
+("Sean_McG",2)
+("search",1)
+("search-replace",1)
+("sebasmagri",2)
+("sebazzz",11)
+("sec",-1)
+("security",2)
+("sed",2)
+("sed++++",1)
+("SEE",1)
+("segfaults",-1)
+("self",-1)
+("semifinals",-1)
+("sensitive",-1)
+("Seq",0)
+("sequence",1)
+("sereven",1)
+("serve",-1)
+("server",-1)
+("service.<--",-1)
+("SethTisue",1)
+("setrlimit",1)
+("SF",3)
+("sgml",1)
+("shachaf",0)
+("shaft",1)
+("shapr",5)
+("sharkhat",1)
+("shawn_lane",3)
+("shi",-3)
+("sholt",1)
+("shorter",1)
+("SICP",1)
 ("sijmen",1)
-("sjanssen",2)
+("sil",-1)
+("silence",1)
+("silence---",-1)
+("SilentAgony",2)
+("silentAgony-----------------------",-1)
+("silla",-1)
+("silverlight",1)
+("silvio",1)
+("simoncpu",2)
+("simoncpu__",1)
+("SimonMarlow",1)
+("simplicity",2)
+("Simpson",1)
+("sinelaw--",1)
+("single-points-of-failure",-2)
+("singleton",1)
+("site)",1)
+("sixthgear",2)
+("sjanssen",5)
+("sjn",5)
+("sjohnson",4)
+("ski",10)
+("skids",14)
 ("skin",1)
-("slava",1)
-("software",-1)
-("spinclad",1)
-("stdc",1)
+("ski_",3)
+("skorpan",1)
+("skype",-1)
+("slang",1)
+("slashdot",1)
+("slava",5)
+("slavik",3)
+("slightly-slower-than-C",1)
+("slow",1)
+("sm",1)
+("Smalltalk/C",1)
+("smart",-1)
+("smash",1)
+("smash_",1)
+("SMBC",3)
+("smegma_covered_cocks",1)
+("smokers+",1)
+("snap",-1)
+("snarkyboojum",3)
+("Snausages",1)
+("snes",1)
+("Snow-",1)
+("sockets/c",1)
+("socks",1)
+("software",-2)
+("sohum",1)
+("solaris",-1)
+("solidsnack",1)
+("solrize_",1)
+("som",-1)
+("someone",3)
+("something)",1)
+("sony",-1)
+("sopa",1)
+("sort",1)
+("source-based-distributions",-1)
+("spaceghost",2)
+("spectests",1)
+("speed",1)
+("speling",-1)
+("spelling",-1)
+("Spencer)",4)
+("spinclad",2)
+("SPJ",4)
+("spline",2)
+("spook327",1)
+("spoon",1)
+("Spotify",1)
+("sproingie",2)
+("spx2",1)
+("Spy",1)
+("sqlalchemy",-2)
+("sqlite",4)
+("squ",1)
+("Srw--x-",-1)
+("ss",-1)
+("SSE2",-1)
+("sshirokov",3)
+("ssssssssssss",-1)
+("ST",1)
+("stackoverflow",1)
+("stallone",1)
+("startup)",-1)
+("statistics",1)
+("std",7)
+("std)",1)
+("stdc",23)
+("stdlib",1)
+("steele",1)
+("stella_artois",1)
+("stepcut",1)
+("StephenPollei",1)
+("still",1)
+("store",-1)
+("strace",1)
+("stravinsky",1)
+("strings)",1)
+("str[i]",1)
+("studio",1)
+("studio/C",1)
+("stuff)",1)
+("stupidity",1)
+("Su-Shee",3)
+("substitution",0)
+("sucia",-1)
 ("sudoku",-1)
-("svg",1)
+("sueco",2)
+("sugar",1)
+("suggestion",-1)
+("sun",-1)
+("supernovus",1)
+("superSerious",1)
+("SuperSnail",1)
+("supp-",-1)
+("support",1)
+("support\"<",-1)
+("suse",-1)
+("SVG",2)
+("svn",-5)
+("svn)",-1)
+("svn--)",1)
+("svnsync",1)
+("swt",-1)
+("swulf",-1)
+("synergy",1)
+("syntaxglitch",1)
+("SyntaxNinja",2)
+("synx`",1)
+("sysadmin",-2)
 ("sysadmins",-1)
-("tene",9)
+("system",1)
+("system''`",-1)
+("System.out.println(x",1)
+("szabgab",75)
+("s[$0]",1)
+("tab-is-not-a-valid-token",1)
+("tabcompletefishing",1)
+("TabCounter",1)
+("tables;",-1)
+("tadeo",1)
+("Taejo",0)
+("tagsoup",1)
+("takadonet",2)
+("TAPL",1)
+("TARBALL--",-1)
+("tati",1)
+("TDD",1)
+("tea",1)
+("tedv",1)
+("teledildonics",1)
+("Tene",70)
+("tennis)",2)
+("tensorpudding",1)
+("terminal)",-1)
+("Terminus",-1)
+("termites",-1)
+("test",-1)
+("testing",1)
 ("testing)",1)
-("tests",1)
+("testingThisJunk",1)
+("tests",7)
+("tests)",0)
+("texas",-1)
+("texmante",1)
+("text",1)
 ("Text.XHtml.Strict.+",1)
-("thoughtpolice",1)
+("textmate",1)
+("TextWrangler",1)
+("th",-2)
+("Thanks",-2)
+("that",-1)
+("that)",1)
+("THC",1)
+("TheDamian",6)
+("TheNavyBear",1)
+("theonion",2)
+("theorbtwo",1)
+("there",-1)
+("theRightWay",1)
+("TheZapzupNZ",1)
+("thing",-1)
+("things",-1)
+("things)",1)
+("think",1)
+("third",-1)
+("this",-3)
+("this.age",1)
+("tho",-1)
+("thoug",-1)
+("though",-1)
+("thoughtpolice",3)
+("thowe",1)
 ("ticholos",1)
-("TimToady",3)
-("tizoc",24)
-("touchpad",-1)
-("trashguy",1)
+("tickets)",1)
+("ticoz",1)
+("Tiger",-1)
+("TikZ",1)
+("timbres",1)
+("time",-1)
+("time)",1)
+("TiMidity",1)
+("timoreilly",1)
+("TimToady",95)
+("timtowtdi",1)
+("tinderbox",1)
+("tinelli",1)
+("Tinned_Tuna",143)
+("Tinned_Tuna#",0)
+("tintin",1)
+("tizoc",103)
+("tizoc_",-1)
+("tj-",-1)
+("tj--",-1)
+("tjcarter",-1)
+("tmclaugh1",1)
+("tnks",-1)
+("to-",-1)
+("todd",-2)
+("tolkad",-2)
+("tomberek",1)
+("Tomis",5)
+("tommd",1)
+("tonight",-1)
+("too",-1)
+("toolbars",-1)
+("topic",0)
+("tormenta",1)
+("tortas_fritas",1)
+("touchpad",-2)
+("Toxaris",2)
+("tr",1)
+("trac",-1)
+("trace",-1)
+("tracker",-1)
+("transistors",-1)
+("transmission",1)
+("transpose",1)
+("trapito",4)
+("trashguy",2)
+("tree",1)
+("treed",1)
+("treeSort",1)
+("tricky",-2)
+("trie",1)
+("trippa",0)
+("tromp__",1)
 ("tronik",1)
+("ttt",-1)
+("Turbo-C",1)
+("TurboC",1)
+("turtle",2)
 ("tusho",1)
-("twifkak",1)
-("types",1)
+("tu_gente",-1)
+("tu_viejo",1)
+("twanvl",2)
+("Twey",7)
+("twifkak",3)
+("twisted",-1)
+("twitterBrilliance",1)
+("typeclasses",1)
+("typeclassopedia",1)
+("types",2)
+("typing",-1)
 ("typos",1)
-("uds",-1)
+("t_j",3)
+("U4",1)
+("uasi",3)
+("Ubuntu",0)
+("uClibc",2)
+("uds",-2)
+("Ugarte",1)
+("ugh...C",1)
 ("Ultimate",1)
+("ultramage",1)
+("ultraviolence",1)
+("UML",-1)
+("undef",1)
+("undef.",1)
+("undo",0)
+("unfoldr",2)
+("Unicode",2)
+("uniplate",1)
+("universe",1)
+("universo",-1)
+("unix",-1)
+("UNIXgod",1)
+("unlambda",1)
+("unobe",1)
+("unsafeChrom",1)
+("untyped",-1)
+("up",-1)
+("upboats",1)
 ("up_the_irons",1)
-("vim",4)
+("UQlev",1)
+("uruguay",-1)
+("uruguay.internet",-1)
+("urxvt",2)
+("usb",-1)
+("useful-",-1)
+("userfriendly",1)
+("User_4574",-1361)
+("use]",-1)
+("usr",1)
+("ute",-1)
+("UTF-8",1)
+("utf8",1)
+("Util",15)
+("v",0)
+("v------",-1)
+("vaio",1)
+("Valodim",1)
+("vamped",1)
+("vanadium",1)
+("var",4)
+("var++++",1)
+("vbox",1)
+("VC",51)
+("vc++/g",1)
+("vecino",1)
+("vegai",1)
+("Vellos",2)
+("Velociraptors",-1)
+("venison",1)
+("verdelyi",0)
+("vic_",1)
+("vieja",1)
+("vienna.pm",4)
+("viklund",6)
+("vim",8)
+("vimperator",1)
+("vimscript",-1)
+("vindaloo",1)
+("virtualbox",5)
 ("VIsta",-2)
-("vixey",1)
+("visualC",1)
+("vixen",-1)
+("vixey",5)
+("vlc",-2)
+("vlc_",0)
+("vmbrasseur",2)
+("vms",1)
+("vos",-2)
+("voted",1)
 ("Vq^",1)
+("VS",1)
+("v_",1)
+("w0ls0n",1)
+("w3",1)
+("waern",1)
+("wagnerrp",1)
+("Wait\"",-1)
+("wallet",1)
+("walterbright",1)
+("Warc",-1)
+("ware",2)
+("warewolf",1)
+("water",1)
+("wayland",55)
+("wayland76",11)
+("ways-",-1)
+("wchogg",1)
+("wdf",2)
+("we",0)
+("web",-2)
 ("webfag",1)
-("Whiteknight",1)
-("xmonad",1)
-("Yea",-1)
-("yo",-2)
+("weed",333)
+("weed++",-1)
+("weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed++weed",1)
+("weekend",1)
+("Weeks)",11)
+("Well",-1)
+("Weredickie",2)
+("WEST",1)
+("wet",1)
+("WetTowel",1)
+("wharrgarble",1)
+("whi",-1)
+("Whipp)",1)
+("White\"",1)
+("White)",1)
+("whiteknight",6)
+("whoever",1)
+("whores",1)
+("why----------",-2)
+("wife)",1)
+("wijnand",1)
+("Wikipedia",3)
+("wil",1)
+("will_clinger",1)
+("Wilson)",1)
+("Windows",-3)
+("windows)",1)
+("wine",1)
+("wing",-1)
+("winter",1)
+("wireless",1)
+("wit",1)
+("wli",4)
+("wlirants",1)
+("Wolfman2000",21)
+("wollmers",20)
+("wonderfuel",-1)
+("wonderful-",-1)
+("Woodi",2)
+("wool",1)
+("WootKit",-1)
+("WOOTS",1)
+("words",1)
+("work",-2)
+("work)",1)
+("work-",-1)
+("workflow",1)
+("working",-1)
+("wormhole",1)
+("Worthington)",7)
+("wow",-1)
+("wreck'd)",1)
+("wtf",2)
+("x",11)
+("x->C",1)
+("X<szabgab>",1)
+("xaoslaad",1)
+("xavura",1)
+("xchat",1)
+("XD",-1)
+("xdie",-1)
+("xen",1)
+("xerox",1)
+("xiu",1)
+("xkcd",2)
+("xml",0)
+("xmonad",3)
+("xorg-modular",1)
+("xp",0)
+("xplat",1)
+("xrandr",1)
+("XSLT1.0",-1)
+("xyz",-1)
+("yaml",1)
+("Yay",1)
+("yayo",1)
+("ye",-1)
+("Yea",-3)
+("yesterday-",-1)
+("yi",2)
+("yitz",1)
+("yo",4)
+("Yorgey",1)
+("you",0)
+("you)",2)
+("youtube",-1)
+("z",-1)
+("Zao",4)
+("zappa",1)
+("zaslon",1)
+("zec@",1)
+("zed",3)
+("zelda",1)
+("zeno",1)
+("zev",2)
+("zfs",1)
+("zipAll",1)
+("zipios",1)
+("znc",2)
 ("zomg",1)
-("[particle]",3)
-("^",-1)
-("^^",1)
+("zooko",1)
+("zsh",2)
+("zygoloid",6)
+("zzorn",1)
+("[",-2)
+("[\"",-1)
+("[\"C",1)
+("[\"q\"",1)
+("[a..z]",1)
+("[ctcpa]",1)
+("[ctcpa]++",1)
+("[internet]--->[modem]--",-1)
+("[particle]",12)
+("[swift]",1)
+("[x+y]",1)
+("[]]",-1)
+("\\\"++intercalate\"+l*31+\"\\\",\"+l*31+\"\\\"(c(\"+l*31+\"\\\"brainfuck\"+l*64+\"n++++++++[>++",1)
+("\\13\\10",0)
+("\\bot",1)
+("\\r\\n",-2)
+("\\s",-1)
+("]]]--------------------",-1)
+("^",-24)
+("^-",-9)
+("^--",-1)
+("^-------",-1)
+("^/",-1)
+("^^",3)
+("_",-2)
 ("_anibal",1)
 ("_Jonas_",12)
+("_MaK_",1)
+("_Steve_",2)
+("__,",-1)
+("__ash__",1)
+("__ash___",1)
+("__name__",1)
+("___-__-",-1)
+("`",-8)
+("`(",1)
+("`+",1)
+("`-",-1)
+("`--",-1)
+("{",-2)
+("|'-'--------'--",-1)
+("|--",-1)
+("|---",-1)
+("|-----",-1)
+("|------",-1)
+("|-r-sr-x-",-2)
+("|<",-1)
+("|orbit|",2)
+("~artgoeshere",1)
+("~AryehGregor",1)
+("~eclipse",-1)
+("~kadaver",1)
+("~maven",1)
+("\148\228\184\128\227\129\140\233\187\146\230\156\168\227\129\149\227\130\147\227\130\146\231\180\185\228\187\139\227\129\153\227\130\139\228\186\136\229\174\154\227\128\130<",-1)
+("\171-",-2)
+("\226\128\152",1)
+("\226\128\152C",1)
+("\226\128\158C/C",1)
+("\226\152\173",2)
+("\227\129\169\227\130\130",1)
+("\195\164\195\165\195\163\195\184\203\155\196\145\197\130\195\186\195\188\195\182\195\161`\195\159\194\180\194\168\203\135\195\177\195\169\195\173\195\166^\195\167\197\147\203\152\203\154\194\175<-",-1)
+("\230\173\169\227\129\132\227\129\159\227\130\137\227\128\129\233\155\187\232\187\138\227\129\171\233\129\133\227\130\140\227\129\190\227\129\153\227\128\130\227\128\128<",-1)
+("\231\130\173\231\191\191",-1)
 ("\239\189\183\239\190\128--",-1)
+("http://en.wikipedia.org/wiki/C",-2)
+("http://img75.imageshack.us/img75/6274/photo111608001gu9.jpg<",-1)
+("http://www.fastimport.com.uy/detalle.asp?prd=2392++++++++++++++",1)
+("http://www.haskell.org/haskellwiki/Keywords#",-1)
+("say\226\144\164WHERE:/\\<",-1)
+("sa\226\144\164WHERE:/\\<",-2)
+("src/ByteStringUtils.hs:452",-1)
+("s\226\144\164WHERE:/\\<",-2)
+("used:-",-1)
+("}.perl\226\144\164WHERE:/\\<",-1)
+("\226\144\164WHERE:/\\<",-5)
--- lambdabot-4.2.2.1-orig/State/poll	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/poll	2011-01-04 11:15:57.515382705 +1100
@@ -0,0 +1,12 @@
+"blah"
+(True,[("no",0),("yes",0)])
+food
+(True,[("quesadilla",1),("meatball-sub",0)])
+logoVotingMethod
+(True,[("Schulze",1)])
+naming
+(False,[("Lovelace",1),("Babbage",0)])
+remove@src
+(False,[("no",1),("yes",1)])
+threeway
+(False,[("method3",3),("method2",0),("method1",1)])
Files lambdabot-4.2.2.1-orig/State/quote and lambdabot-4.2.2.1/State/quote differ
Files lambdabot-4.2.2.1-orig/State/seen and lambdabot-4.2.2.1/State/seen differ
--- lambdabot-4.2.2.1-orig/State/source	2009-01-18 16:01:15.000000000 +1100
+++ lambdabot-4.2.2.1/State/source	2011-01-04 11:15:57.564383256 +1100
@@ -1,3 +1,7 @@
+asTypeIn
+a `asTypeIn` f = a where _ = f a
+infixl 0 `asTypeIn`
+
 Mu
 newtype Mu f = In { out :: f (Mu f) }
 
@@ -192,6 +196,7 @@
 
 (.)
 (f . g) x = f (g x)
+NB: In lambdabot,  (.) = fmap
 
 flip
 flip f x y = f y x
@@ -280,6 +285,11 @@
 break
 break p =  span (not . p)
 
+span
+span _ xs@[]                     =  (xs, xs)
+span p xs@(x:xs') | p x          =  let (ys,zs) = span p xs' in (x:ys,zs)
+                  | otherwise    =  ([],xs)
+
 reverse
 reverse = foldl (flip (:)) []
 
@@ -744,29 +754,9 @@
 exitFailure
 exitFailure = exitWith (ExitFailure 1)
 
-IO
-newtype IO a = IO (State# RealWorld -> (# State# RealWorld, a #))
-
 failIO
 failIO s = ioError (userError s)
 
-bindIO
-bindIO (IO m) k = IO ( \ s ->
-  case m s of (# new_s, a #) -> unIO (k a) new_s)
-
-thenIO
-thenIO (IO m) k = IO ( \ s ->
-  case m s of (# new_s, a #) -> unIO k new_s)
-
-returnIO :: a -> IO a
-returnIO x = IO (\ s -> (# s, x #))
-
-unsafePerformIO
-unsafePerformIO (IO m) = lazy (case m realWorld# of (# _, r #) -> r)
-
-unsafeInterleaveIO
-unsafeInterleaveIO (IO m) = IO ( \ s -> let r = case m s of (# _, res #) -> res in (# s, r #))
-
 FilePath
 type FilePath = String
 
@@ -800,10 +790,6 @@
 IOMode
 data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode
 
-forkIO
-forkIO action = IO $ \ s -> case (fork# action_plus s) of (# s1, id #) -> (# s1, ThreadId id #)
-    where action_plus = catchException action childHandler
-
 killThread
 killThread tid = throwTo tid (AsyncException ThreadKilled)
 
@@ -837,9 +823,6 @@
 catch
 catch m k = catchException m handler where handler (IOException err) = k err
 
-evaluate
-evaluate a = IO $ \s -> case a `seq` () of () -> (# s, a #)
-
 Float
 data Float = F# Float#
 
@@ -1194,7 +1177,7 @@
 xs >>= f     = concatMap f xs
 
 [] (>>)
-xs >> ys      = concatMap (const xs) ys
+xs >> ys      = concatMap (const ys) xs
 
 [] return
 return x    = [x]
--- lambdabot-4.2.2.1-orig/State/system	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/system	2011-01-04 11:15:57.564383256 +1100
@@ -1 +1 @@
-((1223665727,565941000000),TimeDiff {tdYear = 0, tdMonth = 0, tdDay = 0, tdHour = 0, tdMin = 0, tdSec = 3368669, tdPicosec = 0})
\ No newline at end of file
+((1290244648,781347000000),TimeDiff {tdYear = 0, tdMonth = 0, tdDay = 0, tdHour = 0, tdMin = 0, tdSec = 3368669, tdPicosec = 0})
\ No newline at end of file
--- lambdabot-4.2.2.1-orig/State/tell	2009-01-18 16:01:16.000000000 +1100
+++ lambdabot-4.2.2.1/State/tell	2011-01-04 11:15:57.565382781 +1100
@@ -1,10 +1,155 @@
+("#haskell",(Nothing,[Note {noteSender = "Baughn", noteContents = "Have any of you seen parse errors when using haskell-indentation.el? (Kuribas' mode)", noteTime = (1257180374,821670000000), noteType = Ask}]))
+("10",(Nothing,[Note {noteSender = "Badger", noteContents = "", noteTime = (1233224836,492094000000), noteType = Tell}]))
+("10d6",(Nothing,[Note {noteSender = "soupdragon", noteContents = "", noteTime = (1274809408,952653000000), noteType = Tell}]))
+("1300000d6",(Nothing,[Note {noteSender = "roconnor", noteContents = "", noteTime = (1243308045,49710000000), noteType = Tell}]))
+("1d2",(Nothing,[Note {noteSender = "shepheb", noteContents = "", noteTime = (1270765117,287764000000), noteType = Tell}]))
+("1d42",(Nothing,[Note {noteSender = "soupdragon", noteContents = "", noteTime = (1274809312,28668000000), noteType = Tell}]))
+("2",(Nothing,[Note {noteSender = "roconnor", noteContents = "", noteTime = (1281402690,323149000000), noteType = Tell}]))
+("6",(Nothing,[Note {noteSender = "jmcarthur", noteContents = "", noteTime = (1281998772,795390000000), noteType = Tell}]))
+("?",(Nothing,[Note {noteSender = "dons", noteContents = "", noteTime = (1226294785,851959000000), noteType = Tell},Note {noteSender = "jnthn", noteContents = "", noteTime = (1238021728,464315000000), noteType = Tell}]))
+("about",(Nothing,[Note {noteSender = "Jafet", noteContents = "awkward", noteTime = (1261725986,329110000000), noteType = Tell}]))
+("akahige",(Nothing,[Note {noteSender = "twifkak", noteContents = "hehe, i bet you need to hit mod-shift-space to reset the layout. the config looks fine.", noteTime = (1226477584,255828000000), noteType = Tell}]))
+("alester",(Just (1237050669,6146000000),[Note {noteSender = "masak", noteContents = "nice logo. in my browser, its background is white -- would it be possible to make it transparent?", noteTime = (1237023700,619227000000), noteType = Tell}]))
+("andy753421",(Just (1259042211,827265000000),[Note {noteSender = "rob|", noteContents = "regarding your mouse button patch, did you check out experimental? we do have something very similar in there but with the ability to bind buttons to any action", noteTime = (1259004230,615685000000), noteType = Tell}]))
+("arian",(Nothing,[Note {noteSender = "tizoc", noteContents = "te sacamos toda la ficha gil!", noteTime = (1258762604,729003000000), noteType = Tell}]))
+("Arrgh`Check",(Nothing,[Note {noteSender = "RSchulz", noteContents = "out http://www.jetbrains.net/devnet/thread/289036", noteTime = (1276609676,257670000000), noteType = Tell}]))
+("ask",(Nothing,[Note {noteSender = "nus", noteContents = "", noteTime = (1264847846,48993000000), noteType = Tell}]))
+("Aww.",(Nothing,[Note {noteSender = "Baughn", noteContents = "You /agreed/ with making the indentation broken by default, too..", noteTime = (1282482897,752686000000), noteType = Tell}]))
+("Baugn",(Nothing,[Note {noteSender = "ivanm", noteContents = "good-o", noteTime = (1279528162,785533000000), noteType = Tell}]))
+("black",(Nothing,[Note {noteSender = "ivanm", noteContents = "wow, I didn't realise you were only 20! :p http://blacksapphire.com/letter-to-bush.html", noteTime = (1281003864,814562000000), noteType = Tell}]))
+("BONUS",(Just (1282690459,469712000000),[Note {noteSender = "zygoloid", noteContents = "at the end of the 'Modules' section in LYAH you give the filenames cube.hs, cuboid.hs and sphere.hs. these need to start with captial letters!", noteTime = (1278679328,493936000000), noteType = Tell},Note {noteSender = "roconnor", noteContents = "do you know Andrej Bauer?", noteTime = (1280839206,983515000000), noteType = Ask}]))
+("BONUS_",(Nothing,[Note {noteSender = "chrisdone", noteContents = "bump me", noteTime = (1266787958,976395000000), noteType = Tell}]))
+("brimstone",(Just (1257884729,883725000000),[Note {noteSender = "Weredickie", noteContents = "Shhhhhh.....", noteTime = (1257883681,506600000000), noteType = Tell}]))
 ("bringert",(Just (1224261286,487280000000),[Note {noteSender = "kolmodin", noteContents = "har du n\229gon aning om hur l\228nge man f\229r ha kvar sin @dtek.c.se-adress efter examen?", noteTime = (1223732529,162582000000), noteType = Tell}]))
-("Cale",(Just (1223686941,960036000000),[Note {noteSender = "Samy", noteContents = "Mind adding ##FreeBSD to lambdabot?", noteTime = (1223665849,89641000000), noteType = Ask}]))
-("cjs",(Nothing,[Note {noteSender = "sclv", noteContents = "Thanks for the advice on sockets -- turned out to be a handle issue that overflowed a buffer somewhere, causing occasional segfaults as well. We'll be putting in a bug report to ghc shortly.", noteTime = (1224122474,490708000000), noteType = Tell}]))
-("dolio",(Nothing,[Note {noteSender = "vixey", noteContents = "\\neg actually also works I just noticed", noteTime = (1224332603,188022000000), noteType = Tell}]))
-("dons",(Just (1224288772,443431000000),[Note {noteSender = "Baughn", noteContents = "I'm isolating the builds that failed for not-my-fault reasons, but what should I do with the logs?", noteTime = (1223805706,194572000000), noteType = Ask},Note {noteSender = "Baughn", noteContents = "cabal-install needs to actually build packages that are mentioned in preferred-versions, if they aren't already on the system. (containers<0.2 doesn't come with ghc-6.10, but Data.Map changed its interface)", noteTime = (1223807900,244320000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "I was mistaken... the mersenne-pure64 version of my code is indeed 4-5x slower than the stdGen version... and the problem comes down to the random number generation (using randomDouble and randomInt)... could the fact that I'm on an x86 machine using -pure64 have something to do with it?", noteTime = (1224146190,97718000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "nvm, I was using v 0.1.1 of -pure64... upgrading to 0.2.0.2 makes it now half the runtime of StdGen (and 1/8th the runtime of 0.1.0.1), with random number generation no longer the main bottleneck", noteTime = (1224151913,434272000000), noteType = Tell},Note {noteSender = "gwern", noteContents = "1) hackage bytestring has some messedup haddocks - http://hackage.haskell.org/packages/archive/bytestring/0.9.1.3/doc/html/Data-ByteString-Lazy.html says things like 'O(1) Unlike cons, 'cons\\'' is strict in the ByteString that we are consing onto. ' & ' let xs = cons\\' c xs in xs'", noteTime = (1224288522,224377000000), noteType = Ask},Note {noteSender = "gwern", noteContents = "also, I've been wondering for a while, why is Data.ByteString.Lazy missing some functions like lines, unlines, and words? when it has almost all the others", noteTime = (1224288581,506372000000), noteType = Ask}]))
+("byorgey",(Just (1276416364,825894000000),[Note {noteSender = "edwardk", noteContents = "i may wind up adopting your functional convex hull trick for some generalized taylor models", noteTime = (1276357709,609603000000), noteType = Tell}]))
+("CakeProphet",(Just (1278961661,432218000000),[Note {noteSender = "quicksilver", noteContents = "you use @tell", noteTime = (1278931541,18767000000), noteType = Tell}]))
+("cdsmithus",(Nothing,[Note {noteSender = "quicksilver", noteContents = "IsAOrBButNotC x => WidgetType x; you can probably think of a good name for the class. There must be some *reason* why it can be A or B but not C, and that reason can probably be made into a class.", noteTime = (1281946178,431562000000), noteType = Tell}]))
+("cgizmo",(Nothing,[Note {noteSender = "bremner", noteContents = "that was two lines of Xdefault", noteTime = (1254843364,732058000000), noteType = Tell},Note {noteSender = "Botje", noteContents = "If you still have that program that ran out of fds (we discussed it yesterday), can you put the full version somewhere? I'm having difficulty reproducing it.", noteTime = (1256921889,719235000000), noteType = Tell}]))
+("ChanServ",(Nothing,[Note {noteSender = "gonz", noteContents = "Boton", noteTime = (1225995464,430302000000), noteType = Tell}]))
+("che,",(Nothing,[Note {noteSender = "tizoc", noteContents = "est\195\161 m\195\161s barato que em amazon :\\ (y mir\195\161 el precio de lista en amazon, wtf mil d\195\179lares)", noteTime = (1242933396,466162000000), noteType = Tell}]))
+("daf",(Nothing,[Note {noteSender = "Twey", noteContents = "Congratulations!", noteTime = (1255330270,160224000000), noteType = Tell}]))
+("danielvf",(Just (1283996047,204662000000),[Note {noteSender = "ulope", noteContents = "some msg", noteTime = (1283996009,37311000000), noteType = Tell}]))
+("dccouts",(Nothing,[Note {noteSender = "MarcWeber", noteContents = "In which way do hackport and cabal-install handle flags?", noteTime = (1239678367,9442000000), noteType = Tell}]))
+("doc_bolle",(Nothing,[Note {noteSender = "lispy", noteContents = "I'll happily mention your thesis, but I couldn't find it", noteTime = (1227740925,72727000000), noteType = Tell}]))
+("dons.",(Nothing,[Note {noteSender = "Lemmih", noteContents = "Yes, I read it. It is a subset of closed world grin. It seems to be half way between the implicit laziness of core and explicit thunk layout of grin.", noteTime = (1243137226,122642000000), noteType = Tell}]))
+("drdozer",(Just (1271960510,178580000000),[Note {noteSender = "Apocalisp", noteContents = "Pure[F] just provides a function (A => F[A]) for all A. Think of putting a value in a container, e.g. creating a singleton list (A => List[A]), the Some constructor for Option (A => Option[A]), or the constant function ([A,B] (a: A) => (b: B) => a): (A => B => A). Pointed is just Functor with Pure.", noteTime = (1271889987,528470000000), noteType = Tell}]))
+("ebering",(Nothing,[Note {noteSender = "dbelange", noteContents = "dicks", noteTime = (1268693988,499599000000), noteType = Tell}]))
+("elpolillla",(Nothing,[Note {noteSender = "tizoc", noteContents = "ya se porque es el \"jaja\", es para no poner \"xD\"", noteTime = (1226023882,744897000000), noteType = Tell}]))
+("ezyang",(Nothing,[Note {noteSender = "benmachine", noteContents = "hey, remind me to talk to you about the SRCF (although I might not be around for a few days)", noteTime = (1285897874,239737000000), noteType = Tell}]))
+("finanalyst",(Just (1241767176,462044000000),[Note {noteSender = "ruoso", noteContents = "run \"make CORE\" (I suspect make all is missing a dependency on CORE)", noteTime = (1238519443,963578000000), noteType = Tell}]))
+("fish_xmonad",(Nothing,[Note {noteSender = "asgaroth", noteContents = "perhaps your haskell x11-bindings are too old", noteTime = (1237061596,598917000000), noteType = Tell}]))
+("flintf",(Just (1281341420,466806000000),[Note {noteSender = "islands", noteContents = "hello", noteTime = (1281341389,301864000000), noteType = Tell}]))
+("for",(Nothing,[Note {noteSender = "azawawi", noteContents = "a testcase try 'perl t/00-syntax.t' in $PUGS_HOME/misc/Syntax*", noteTime = (1229892110,471962000000), noteType = Tell}]))
+("frwmanners",(Nothing,[Note {noteSender = "Baughn", noteContents = "[..no version of filterE could work with...] <-- Could you expand on this?", noteTime = (1243190790,684486000000), noteType = Tell}]))
+("FUJISAN",(Just (1274720159,547442000000),[Note {noteSender = "Axman6", noteContents = "haha, thanks for the link, i feel kind of honoured, even if it is linkinus :P", noteTime = (1274614536,739982000000), noteType = Tell}]))
+("gauss",(Nothing,[Note {noteSender = "mmorrow", noteContents = "kthx", noteTime = (1256902976,603740000000), noteType = Tell}]))
+("Generating",(Nothing,[Note {noteSender = "Lemmih", noteContents = "LLVM IR directly should also alleviate any problems you had on Mac.", noteTime = (1243674675,518577000000), noteType = Tell}]))
+("ghc-updater",(Nothing,[Note {noteSender = "kolmodin", noteContents = "finds the directory /usr/lib64/ghc-6.10.1 amongst all other ghc directories it finds", noteTime = (1230056907,593949000000), noteType = Tell}]))
+("gilimanjaro",(Nothing,[Note {noteSender = "mberends", noteContents = "Hallo Gilion, kijk even in je email voor wat IRC tips en trucs!", noteTime = (1239550977,868618000000), noteType = Tell}]))
+("god",(Nothing,[Note {noteSender = "ben_m", noteContents = "\"Why exactly 42?\"", noteTime = (1257180415,151928000000), noteType = Ask}]))
+("Gracenotes",(Just (1269026062,765891000000),[Note {noteSender = "edwardk", noteContents = "the haskell-soc wiki seems to be broken. if you don't already have an account, I can't make you one, at the moment. If you want to register, send me your full name and email. In the meantime, I'll follow up and see what the status is on getting it fixed.", noteTime = (1269025997,167776000000), noteType = Tell}]))
+("green",(Just (1261356400,336531000000),[Note {noteSender = "sereven", noteContents = "try turning off num lock to enable grid select key nav -- should be fixed in darcs soon (today is 19 Oct)", noteTime = (1255949372,801708000000), noteType = Tell}]))
+("green_",(Nothing,[Note {noteSender = "sereven", noteContents = "For now, make sure numLock, etc. are off to have key navigation in grid select.", noteTime = (1255949721,228199000000), noteType = Tell}]))
+("Guest10026",(Nothing,[Note {noteSender = "luqui", noteContents = "Thanks for the bug report. Fixed!", noteTime = (1264517255,886795000000), noteType = Tell}]))
+("gunnarahlberg",(Nothing,[Note {noteSender = "vav", noteContents = "If you can idle longer in irc someone may be able to help real time. See Actions.CopyWindow (keybind copyToAll is simplest way, but could with some work use in manageHook too) Hooks.UrgencyHook has some notification tools, but pidgin might have notify plugin to use with libNotify too, or some people grep logs and put them into dzen slave lines, osd_cat, or notify-send.", noteTime = (1252958239,448553000000), noteType = Tell}]))
+("haskellbot",(Just (1277180249,993045000000),[Note {noteSender = "jbapple", noteContents = "@tell lambdabot", noteTime = (1277180241,187154000000), noteType = Tell}]))
+("hello?",(Nothing,[Note {noteSender = "scan", noteContents = "", noteTime = (1264560017,421344000000), noteType = Tell}]))
+("help",(Nothing,[Note {noteSender = "Phyx-", noteContents = "", noteTime = (1272054093,575273000000), noteType = Ask}]))
+("hey,",(Nothing,[Note {noteSender = "chessguy", noteContents = "out of curiousity, do you have any examples of using your astar hackage lying around?", noteTime = (1234627123,79317000000), noteType = Tell}]))
+("hicks`",(Nothing,[Note {noteSender = "sereven", noteContents = "if you pastebin xmonad.hs and can idle in channel a little while someone can check for problems and perhaps help.", noteTime = (1253394044,196266000000), noteType = Tell}]))
+("how",(Just (1279827211,378450000000),[Note {noteSender = "pmurias", noteContents = "should i checkout the smopp5?", noteTime = (1227436985,494985000000), noteType = Tell}]))
+("Igloo",(Just (1280968308,80911000000),[Note {noteSender = "benmachine", noteContents = "does th-lift have a source repository, or any work more recent than version 0.3 on hackage? I was planning to extend it with newtype/record constructor support", noteTime = (1280411070,870096000000), noteType = Ask},Note {noteSender = "lispy", noteContents = "do you know if there is a policy on c.h.org about how/when to upgrade software. Do I just email support@c.h.o?", noteTime = (1280968241,138118000000), noteType = Tell}]))
+("in",(Nothing,[Note {noteSender = "lilac", noteContents = "the glory", noteTime = (1232047714,417870000000), noteType = Ask}]))
+("ivman",(Nothing,[Note {noteSender = "mpiechotka", noteContents = "Is it possible to update of ebuild of haskell-updater to depends on 7.0.x not only 6.12.x?", noteTime = (1285593554,512590000000), noteType = Tell}]))
+("j3camero",(Nothing,[Note {noteSender = "Zaphus", noteContents = "Put me down as a committer, I can't promise I'll do it (damn, will need to install SVN too won't I) but some small improvements might come from me if I get the time :-)", noteTime = (1283997121,247316000000), noteType = Tell},Note {noteSender = "jmcarthur", noteContents = "coventry wants to know if he's allowed to use custom C extension modules in his python submission. this seems to me to be equivalent to allowing arbitrary binaries, which you know i would like to see as well :)", noteTime = (1284048667,234429000000), noteType = Ask},Note {noteSender = "jmcarthur", noteContents = "coventry reports that there are ssh keys in planet_wars/backend, including private ones. i'm not sure what's up with that", noteTime = (1284050821,26364000000), noteType = Tell},Note {noteSender = "jmcarthur", noteContents = "does the server have kvm and does the install qemu use it? it would be much faster for the sandboxes than plain qemu", noteTime = (1284051389,347590000000), noteType = Ask}]))
+("ja_ordent",(Just (1274068569,287609000000),[Note {noteSender = "aavogt", noteContents = "you only have to change xmonad.hs, where you can use the layout mouseResizableTile{ draggerType = BordersDragger }", noteTime = (1272575395,922769000000), noteType = Tell}]))
 ("jcpetruzz",(Nothing,[Note {noteSender = "nominolo", noteContents = "here's a small snippet of transition guide: http://hpaste.org/11076", noteTime = (1223747840,840565000000), noteType = Tell}]))
+("jfreddet",(Nothing,[Note {noteSender = "ivanm", noteContents = "yay for line endings! boo for sending three times :p", noteTime = (1254024107,848368000000), noteType = Tell}]))
+("jfredett",(Nothing,[Note {noteSender = "ivanm", noteContents = "there, I've provided you with more content for the next HWN; happy now? :p", noteTime = (1268135399,478687000000), noteType = Tell}]))
+("jhowitz",(Nothing,[Note {noteSender = "slavik1", noteContents = "give me mod_perl6 or give me death! I would really like the former though. :)", noteTime = (1236445861,916204000000), noteType = Tell}]))
+("JoeyA",(Nothing,[Note {noteSender = "ski", noteContents = "would `Applicative DB', together with things like `(.==.) :: DB (a -> a -> Bool)' be any more sensible ?", noteTime = (1285826425,495375000000), noteType = Ask}]))
+("johngoerzen",(Nothing,[Note {noteSender = "vegai", noteContents = "Hey. You mentioned in August wanting to build an imap library", noteTime = (1227347415,424271000000), noteType = Tell},Note {noteSender = "vegai", noteContents = "Have you got any code yet?", noteTime = (1227347434,422437000000), noteType = Tell}]))
+("juhp",(Nothing,[Note {noteSender = "ManateeLazyCat", noteContents = "I have push new patches to gio and manatee. From now, except bug, I won't touch gtk2hs code.... enjoy! :)", noteTime = (1285561309,333553000000), noteType = Tell}]))
+("jyp",(Nothing,[Note {noteSender = "ivanm", noteContents = "are you going to make a new hgal version with those 4 patches? I actually _might_ have a use for the vertex colouring aspect...", noteTime = (1239099756,122265000000), noteType = Ask}]))
+("kaizoku",(Just (1228900322,616823000000),[Note {noteSender = "dcoutts", noteContents = "we didn't mean that you had to leave, just asking to turn off the YARRR", noteTime = (1225705145,866729000000), noteType = Tell}]))
+("kiit",(Nothing,[Note {noteSender = "sereven", noteContents = "to use xmonad-0.9 you might have to change preferred versions (there is some setting that says use lower versions) and enable multiverse or community repos in synaptics settings too.", noteTime = (1257864880,516655000000), noteType = Tell}]))
+("koewy",(Nothing,[Note {noteSender = "mornfall", noteContents = "it might be a good idea to distribute some op privileges.", noteTime = (1264706001,135698000000), noteType = Tell}]))
+("kolmodin",(Just (1284755769,775333000000),[Note {noteSender = "slyfox_", noteContents = "how about this one? http://slyfox.ath.cx:8080/~slyfox/haskell/ldflags-for-cabal.dpatch.txt", noteTime = (1283448455,115256000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "we going to delay bumping haddock until the bugs in the 2.8 branch are fixed?", noteTime = (1283504657,901960000000), noteType = Ask},Note {noteSender = "slyfox", noteContents = "https://bugs.gentoo.org/show_bug.cgi?id=242056", noteTime = (1283578408,497288000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "why mask QC-2.3 rather than making the deps on QC stricter?", noteTime = (1283745335,308345000000), noteType = Ask},Note {noteSender = "slyfox", noteContents = "we will likely have problems to stabilize 6.10.4 for ppc and sparc - they require gcc-4.1 (or we will have to rebuild them unregisterised. i can rebuild for sparc), but 6.12.3 is ok for them as they both switched to NCG", noteTime = (1284007717,170681000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "should we bump haddock to 2.8.1?", noteTime = (1284717404,130325000000), noteType = Ask},Note {noteSender = "ivanm", noteContents = "also, you OK with dev-haskell/jail being removed (which will let us get rid of monads-fd-0.0.0.1) ?", noteTime = (1284717989,773770000000), noteType = Ask}]))
+("korstya",(Nothing,[Note {noteSender = "ManateeLazyCat", noteContents = "See http://paste2.org/get/713834 , source code you need to develop Webkit browser with gtk2hs, you need install uzbl first to compile this program, i think this solution can works on Windows. Bye, i need off now. :)", noteTime = (1268422025,437913000000), noteType = Tell}]))
+("kowey,",(Nothing,[Note {noteSender = "C-Keen", noteContents = "no the tests that fail for me are hidden_conflict.sh issue157_rollback_conflict.sh issue279_get_extra.sh and pull.sh", noteTime = (1226228808,725215000000), noteType = Tell},Note {noteSender = "thorkilnaur", noteContents = "About tn9: Sorry to belabour this, but I don't get it: tn9 currently passes the configure step (which is one possible mystery, because HTTP is missing, as you say). And fails the build step because of the --count matter. I just want to understand this.", noteTime = (1237469207,950366000000), noteType = Tell}]))
+("lucaspost",(Nothing,[Note {noteSender = "sereven", noteContents = "darcs version of xmobar has modified pipereader plugin that can handle eof -- uses this change: http://www.haskell.org/pipermail/xmonad/2009-March/007576.html", noteTime = (1257957988,988351000000), noteType = Tell}]))
+("lunabot",(Just (1233856705,319338000000),[Note {noteSender = "sbahra", noteContents = "You smell funny", noteTime = (1233856698,278013000000), noteType = Tell}]))
+("mae_",(Just (1241986793,938969000000),[Note {noteSender = "gwern", noteContents = "you ever finish the filestore blog entry? I await the feedback curiously!", noteTime = (1241986659,637138000000), noteType = Ask}]))
+("malcomw",(Nothing,[Note {noteSender = "Alpounet", noteContents = "the gsoc wiki is being updated by edwardk but account registration seems to be locked ; i don't know if you are its official \"maintainer\" but ask you anyway if it could be possible to unlock it so that students can start putting themselves there, together with their ideas ? thanks !", noteTime = (1268361236,552756000000), noteType = Tell}]))
+("manjunath",(Nothing,[Note {noteSender = "byorgey", noteContents = "Actually, when I get a round tuit, I am planning to put out an updated, standalone version of the Typeclassopedia", noteTime = (1268322017,16299000000), noteType = Tell}]))
+("marcusU",(Nothing,[Note {noteSender = "Psy|", noteContents = "that's because Xcode needs to launch GDB which needs to enter the guts of your software to work", noteTime = (1260701774,503407000000), noteType = Tell}]))
+("marrah",(Nothing,[Note {noteSender = "jsuereth", noteContents = "I'm getting the continuations plugin into scala-tools.org. Ping me when you're in, I think we need to discuss automatic inclusion of it", noteTime = (1268400099,778322000000), noteType = Tell}]))
+("masaks",(Nothing,[Note {noteSender = "eric256", noteContents = "now i need a git tutorial!! ;)", noteTime = (1229890885,911591000000), noteType = Tell}]))
+("mason",(Nothing,[Note {noteSender = "rob|", noteContents = "then paste 'o' -> <Ctrl>v (@bind <Ctrl>v = sh 'echo \"event INJECT_KEYCMD $(xclip -selection clipboard -o)\" > \"$4\"')", noteTime = (1259702768,913586000000), noteType = Tell}]))
+("mathijsje",(Just (1281137968,306356000000),[Note {noteSender = "Botje", noteContents = "randoms geeft een oneindige lijst van random getallen", noteTime = (1280747220,521727000000), noteType = Tell}]))
+("max",(Nothing,[Note {noteSender = "elpolilla", noteContents = "aguante maxy", noteTime = (1284380813,475195000000), noteType = Tell}]))
+("McManiaC",(Just (1274305022,362268000000),[Note {noteSender = "ivanm", noteContents = "cool! Axman6 and I have been discussing using gloss to make plots (or just opengl proper)!", noteTime = (1274305008,663499000000), noteType = Tell}]))
+("messages",(Nothing,[Note {noteSender = "Guenni", noteContents = "", noteTime = (1233929308,223155000000), noteType = Ask}]))
+("meuna",(Nothing,[Note {noteSender = "dschoepe", noteContents = "you need to find out the hexadecimal value of the key with xev and use that instead of a name.", noteTime = (1239377753,73951000000), noteType = Tell},Note {noteSender = "vav", noteContents = "http://hackage.haskell.org/packages/archive/X11/1.4.5/doc/html/Graphics-X11-ExtraTypes-XorgDefault.html -- if you have recent (I think > 1.4.2) version of haskell-x11 those keys may be in `import Graphics.X11.ExtraTypes' (need Xorg name for them, i.e. xK_ogonek or what it really is)", noteTime = (1239390905,625742000000), noteType = Tell}]))
 ("misc/elfish/AST",(Nothing,[Note {noteSender = "pmurias", noteContents = "is supposed to contain the description of the IRx1 in Perl 6 as opposed to a strange \"DSL\"", noteTime = (1223717098,60453000000), noteType = Tell}]))
-("mncharity",(Nothing,[Note {noteSender = "TimToady", noteContents = "see backlog for answer to your question", noteTime = (1224113759,961788000000), noteType = Tell},Note {noteSender = "TimToady", noteContents = "starting at http://irclog.perlgeek.de/perl6/2008-10-15#i_623942", noteTime = (1224113868,522397000000), noteType = Tell}]))
-("moritz_",(Nothing,[Note {noteSender = "azawawi", noteContents = "im interested in http://www.nntp.perl.org/group/perl.perl6.users/2008/07/msg788.html.", noteTime = (1224314996,873317000000), noteType = Tell}]))
-("pmurias",(Just (1224007301,912469000000),[Note {noteSender = "mncharity", noteContents = "re mildew as duplication (last night), I was wrong. eg, elf doesn'", noteTime = (1224007272,309535000000), noteType = Tell}]))
+("mjheagle",(Nothing,[Note {noteSender = "vav", noteContents = "tint2 actually seems to work really well with dual monitors here (xmonad-0.9 using Ewmh and tint2-0.7.1) thanks for tip to try it out! Please pastebin xmonad.hs to see if maybe something's missing in your Ewmh setup.", noteTime = (1261172836,459814000000), noteType = Tell}]))
+("mmorrow",(Nothing,[Note {noteSender = "aavogt", noteContents = "can lunabot import Control.Monad.Writer please?", noteTime = (1264472532,258505000000), noteType = Ask},Note {noteSender = "Saizan_", noteContents = "ohai, hpaste's DB is locked, please unlock, kthx ;)", noteTime = (1265297384,406730000000), noteType = Tell},Note {noteSender = "tibbe", noteContents = "hpaste.org is down", noteTime = (1271239133,515809000000), noteType = Tell}]))
+("moritz",(Nothing,[Note {noteSender = "masak", noteContents = "ping from dtr2 who has trouble installing ilbot.", noteTime = (1230894634,525964000000), noteType = Tell},Note {noteSender = "skids", noteContents = "backlog, re: split", noteTime = (1239983300,422122000000), noteType = Tell},Note {noteSender = "pmichaud", noteContents = "my analysis of the xml parsing problem: http://nopaste.snit.ch/16427", noteTime = (1240952553,760602000000), noteType = Tell}]))
+("nachof",(Nothing,[Note {noteSender = "elpolilla", noteContents = "pow(3, 10) == 30", noteTime = (1284402237,307870000000), noteType = Tell}]))
+("ndm",(Nothing,[Note {noteSender = "gwern", noteContents = "so I was reading your supero paper and you mentioned ghc's isSpace function had a performance bug. was that ever fixed?", noteTime = (1239226105,267196000000), noteType = Ask},Note {noteSender = "ivanm", noteContents = "the link to the haddock docs for cmdargs on its homepage links to cs.york.blah (and doesn't work/exist)", noteTime = (1252756100,937351000000), noteType = Tell},Note {noteSender = "gwern", noteContents = "I was rereading http://neilmitchell.blogspot.com/2006/11/systemfilepath-automated-testing.html and I thought I'd mention in case you didn't know that I cabalized smallcheck a while ago", noteTime = (1254080425,534620000000), noteType = Tell},Note {noteSender = "Cale", noteContents = "I've found the following simple infix function really useful with TagSoup: ss /> f = ss >>= partitions f", noteTime = (1256045849,272383000000), noteType = Tell}]))
+("nytek",(Nothing,[Note {noteSender = "dmwit", noteContents = "I recommend the \"Download Tab-bar\" extension. ...or using chromium ;-)", noteTime = (1269669828,639695000000), noteType = Tell}]))
+("odp",(Nothing,[Note {noteSender = "jsuereth_work", noteContents = "Sorry stepped out for lunch. Nexus has some nice features other repository managers do not. It actually is integrating with p2 (if you care about eclipse). I actually use archiva at work though", noteTime = (1239642690,117480000000), noteType = Tell}]))
+("Ok,",(Nothing,[Note {noteSender = "ManateeLazyCat", noteContents = "that's all template you need notice, if you have any problem, please ask in gtk2hs list. Good luck!", noteTime = (1284978366,128594000000), noteType = Tell}]))
+("oxymor00n",(Nothing,[Note {noteSender = "ivanm", noteContents = "I notice on the emacs wiki that you were going to examine how to get gmail's \"All Mail\", etc. folders showing up in gnus... did you work anything out?", noteTime = (1237553263,772138000000), noteType = Ask}]))
+("paczesiowa",(Just (1278849708,372259000000),[Note {noteSender = "ivanm", noteContents = "I was going to solve it by not having it compile anymore...", noteTime = (1278756398,281116000000), noteType = Tell},Note {noteSender = "ivanm", noteContents = "we can't use -dynamic by default since it only works with 6.12+ (though it might be possible to use an if statement to use that when it can be used), and we can't use the runhaskell approach by default since apparently some architectures don't support it :s", noteTime = (1278766224,467604000000), noteType = Tell}]))
+("paolino",(Just (1255634369,769662000000),[Note {noteSender = "byorgey", noteContents = "http://hpaste.org/fastcgi/hpaste.fcgi/view?id=10787#a10789", noteTime = (1255633519,609386000000), noteType = Tell}]))
+("pelotom",(Just (1269475947,688575000000),[Note {noteSender = "RSchulz", noteContents = "see scala.util.parsing.combinator.Parsers.positioned(...)", noteTime = (1269440831,949290000000), noteType = Tell}]))
+("phreeza",(Just (1283957517,483913000000),[Note {noteSender = "jmcarthur", noteContents = "like this!", noteTime = (1283957508,36244000000), noteType = Tell}]))
+("posta?",(Nothing,[Note {noteSender = "tizoc", noteContents = "do want, pasale mi mail para que me muestre que tiene", noteTime = (1244156978,318357000000), noteType = Tell}]))
+("preflex",(Just (1228089783,224897000000),[Note {noteSender = "andrewsw", noteContents = "hi", noteTime = (1228089773,824689000000), noteType = Tell}]))
+("pumpkinbot",(Just (1233854140,107829000000),[Note {noteSender = "ski_", noteContents = "@tell lambdabot hi", noteTime = (1233852234,396328000000), noteType = Tell}]))
+("rapidlyEmptyingDiskSpace",(Nothing,[Note {noteSender = "Olathe", noteContents = "hello", noteTime = (1231386908,641774000000), noteType = Tell}]))
+("retronym",(Just (1284958178,647305000000),[Note {noteSender = "dibblego", noteContents = "Scalala doesn't seem to build (sbt update fails getting junit-3.8.1)", noteTime = (1284942598,551470000000), noteType = Tell}]))
+("romildo",(Nothing,[Note {noteSender = "kolmodin", noteContents = "so far no version of haddock has been released that works with ghc-7. and we disable the one that comes with ghc, as we want to allow the user to upgrade", noteTime = (1285776015,589144000000), noteType = Tell}]))
+("RPS",(Nothing,[Note {noteSender = "Taejo", noteContents = "how're things going?", noteTime = (1232175988,774853000000), noteType = Tell}]))
+("Rwerwe",(Just (1255105568,898595000000),[Note {noteSender = "allbery_b", noteContents = "you should ask in #haskell, not #haskell-overflow.", noteTime = (1255005806,330423000000), noteType = Tell}]))
+("ryan[WIN]",(Just (1273014242,640287000000),[Note {noteSender = "sixthgear", noteContents = "apply http://www.bungie.net/Inside/jobs.aspx#job25768", noteTime = (1273012185,158129000000), noteType = Tell}]))
+("SamB_XP",(Just (1232072266,847832000000),[Note {noteSender = "gwern", noteContents = "re long filenames in errors - with ghc 6.10 hint, the temp files aren't used at all (it was just a hack around a 6.8 bug) so I regard it as a moot issue not worth fixing", noteTime = (1231626040,678622000000), noteType = Tell}]))
+("scalabot",(Just (1265743977,961453000000),[Note {noteSender = "JamesIry", noteContents = "\"you're so slow\"", noteTime = (1265735751,358444000000), noteType = Tell}]))
+("schmooo",(Nothing,[Note {noteSender = "hgolden", noteContents = "please try https://bugs.gentoo.org/show_bug.cgi?id=299709 workaround and see if ghci works better (when compiling syb-with-class).", noteTime = (1281987993,536673000000), noteType = Tell}]))
+("sclv",(Nothing,[Note {noteSender = "dons", noteContents = "truncate -> double2int via RULES in ghc 6.12.x", noteTime = (1279564893,132555000000), noteType = Tell}]))
+("sebazzz",(Nothing,[Note {noteSender = "elpolilla", noteContents = "nos saliste falladito :S", noteTime = (1262958466,544438000000), noteType = Tell}]))
+("secrets",(Nothing,[Note {noteSender = "islands", noteContents = "", noteTime = (1285710248,159897000000), noteType = Tell}]))
+("seyday",(Nothing,[Note {noteSender = "DBAlex", noteContents = "hello!", noteTime = (1236200245,11263000000), noteType = Tell}]))
+("sfvisser_",(Nothing,[Note {noteSender = "copumpkin", noteContents = "have you considered giving fclabels users the opportunity to provide their own update function, as well as the getters and setters? I have a situation in which I can perform an update more efficiently than a set + get", noteTime = (1283922488,558773000000), noteType = Ask}]))
+("shapr",(Just (1285949071,439378000000),[Note {noteSender = "ivanm", noteContents = "in case you weren't aware: http://us.macmillan.com/Book.aspx?isbn=9781429920575", noteTime = (1285948028,115133000000), noteType = Tell}]))
+("shapr,",(Nothing,[Note {noteSender = "jfredett", noteContents = "Just curious about logistics for tomorrow. let me know, email is jfredett@gmail.com", noteTime = (1235771914,997506000000), noteType = Tell}]))
+("shepheb",(Nothing,[Note {noteSender = "ivanm", noteContents = "are the docs for XMonad.Util.Scratchpad complete? it doesn't seem to say how to use it...", noteTime = (1281263430,502678000000), noteType = Ask}]))
+("sinelaw_",(Just (1261594461,771588000000),[Note {noteSender = "sinelaw", noteContents = "koko", noteTime = (1261594446,849069000000), noteType = Tell}]))
+("skottish",(Nothing,[Note {noteSender = "dmwit", noteContents = "Use swapMaster in your manageHook. z-ordering is tied to stack ordering in xmonad (somewhat unfortunately).", noteTime = (1275794710,995293000000), noteType = Tell}]))
+("smedge",(Nothing,[Note {noteSender = "dmwit", noteContents = "You're in the right place for Haskell critiques. You just have to hang around a bit longer after you ask your questions, especially late at (USA's) night.", noteTime = (1282370708,30724000000), noteType = Tell}]))
+("smitty1e",(Nothing,[Note {noteSender = "sereven", noteContents = "In case you didn't work it out you'll probably have to keyword lots of haskell bits, cabal downgrade is probably cause not in package.keywords or whatever paludis uses (many use paludis, but not me, too lazy) ;)", noteTime = (1232875223,679383000000), noteType = Tell}]))
+("So",(Nothing,[Note {noteSender = "ManateeLazyCat", noteContents = "you project like a real-time edit/execute editor?", noteTime = (1279124573,704716000000), noteType = Tell}]))
+("Spockz",(Just (1264187542,293721000000),[Note {noteSender = "kosmikus|n900", noteContents = "had je niet gezegd dat caprica dit weekend komt?", noteTime = (1264187171,632171000000), noteType = Tell}]))
+("ssalkin",(Nothing,[Note {noteSender = "dmwit", noteContents = "You can extract the package yourself (with tar or whatever), then modify it and run cabal install inside the unpacked directory (with no arguments).", noteTime = (1261355740,266088000000), noteType = Tell}]))
+("stableable",(Nothing,[Note {noteSender = "sjanssen", noteContents = "xmonad doesn't support window groups at this time, but it would not be at all hard to add. See the docs for ManageHook", noteTime = (1233011526,668293000000), noteType = Tell}]))
+("stoick",(Just (1243653110,956205000000),[Note {noteSender = "dibblego", noteContents = "@pl \\f g a -> f a || g a -- here is an example of flatMap and map being called on ||", noteTime = (1243653101,495200000000), noteType = Tell}]))
+("test",(Nothing,[Note {noteSender = "s_denchev", noteContents = "", noteTime = (1283957731,241443000000), noteType = Ask}]))
+("testing",(Nothing,[Note {noteSender = "DeathSkull", noteContents = "plox", noteTime = (1252996760,533439000000), noteType = Tell}]))
+("thanks",(Nothing,[Note {noteSender = "abuiles", noteContents = "to you :).", noteTime = (1270554679,853775000000), noteType = Tell}]))
+("tibbel",(Nothing,[Note {noteSender = "dons", noteContents = "http://gregorycollins.net/posts/2010/03/12/attoparsec-iteratee#comment-39671374 they're rolling their own epoll event manager", noteTime = (1268597465,660831000000), noteType = Tell}]))
+("tmitt",(Just (1266573085,393259000000),[Note {noteSender = "dmwit", noteContents = "what video card you're using", noteTime = (1264740142,898607000000), noteType = Ask}]))
+("trofi^w",(Just (1274261129,618451000000),[Note {noteSender = "ivanm", noteContents = "new xmobar ebuild (and improved live one) pushed!", noteTime = (1274260992,671709000000), noteType = Tell}]))
+("trygvis",(Just (1240138794,36805000000),[Note {noteSender = "dibblego", noteContents = "I have moved branches/scalaz4 to trunk and altered the directory structure for maven", noteTime = (1240138727,750863000000), noteType = Tell}]))
+("tutorial",(Nothing,[Note {noteSender = "Mathnerd314", noteContents = "", noteTime = (1269974922,103284000000), noteType = Tell},Note {noteSender = "Mathnerd314", noteContents = "", noteTime = (1269974986,516677000000), noteType = Ask}]))
+("tux_rocker,",(Nothing,[Note {noteSender = "kowey", noteContents = "it's worth noting that darcs-roundup integration only works if you push < 20 patches at a time due to 1000K limit on posthook environment", noteTime = (1277729813,51967000000), noteType = Tell}]))
+("vegai",(Just (1264495145,596425000000),[Note {noteSender = "dons", noteContents = "do you still follow arch-haskell@ ?", noteTime = (1264461808,722498000000), noteType = Tell}]))
+("what",(Nothing,[Note {noteSender = "slyfox", noteContents = "do you think about splittig ghc-wrapper to another package? (maybe, with 'eselect' feature) then we could play easier with stuff like this: http://slyfox.ath.cx:8080/~slyfox/ghc/ghc.sh.txt", noteTime = (1283403195,160258000000), noteType = Ask}]))
+("xmonoob",(Nothing,[Note {noteSender = "asfethan", noteContents = "use .xinitrc or spawn in xmonad.hs for auto-start and W.shift by className, or other window parameters to move windows to another workspace...", noteTime = (1265628262,952008000000), noteType = Tell}]))
+("yurinotigor",(Nothing,[Note {noteSender = "mmorrow", noteContents = "here're some useful haskell-src-exts functions http://hpaste.org/fastcgi/hpaste.fcgi/view?id=5512", noteTime = (1243990237,476330000000), noteType = Tell}]))
+("zekus",(Nothing,[Note {noteSender = "dmwit", noteContents = "You can ignore that error. However, don't \"exec\" xmonad. Don't background it, either. Just run it normally at the end of your .xinitrc.", noteTime = (1229987338,36629000000), noteType = Tell}]))
+("zooko,",(Nothing,[Note {noteSender = "C-Keen", noteContents = "sorry for this :)", noteTime = (1226436517,676473000000), noteType = Tell}]))
+("zygoloid,",(Nothing,[Note {noteSender = "luqui", noteContents = "thanks, known bug, we can't reproduce it, which makes it very hard to debug.", noteTime = (1264511793,961023000000), noteType = Tell}]))
+("[1,",(Nothing,[Note {noteSender = "Tinned_Tuna", noteContents = "2, 3]", noteTime = (1253050775,857464000000), noteType = Tell}]))
+("_Ray_.",(Nothing,[Note {noteSender = "hgolden", noteContents = "FYI, here's a simpler searchLongest: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=11376#a11495", noteTime = (1257223811,825870000000), noteType = Tell}]))
+("member:revenantphx",(Nothing,[Note {noteSender = "revenantphx_", noteContents = "you are one handsome gentleman", noteTime = (1283662806,473563000000), noteType = Tell}]))
Files lambdabot-4.2.2.1-orig/State/todo and lambdabot-4.2.2.1/State/todo differ
