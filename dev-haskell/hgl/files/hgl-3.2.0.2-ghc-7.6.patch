diff --git a/Graphics/HGL/Internals/Utilities.hs b/Graphics/HGL/Internals/Utilities.hs
index dc80fa0..440314c 100644
--- a/Graphics/HGL/Internals/Utilities.hs
+++ b/Graphics/HGL/Internals/Utilities.hs
@@ -20,7 +20,7 @@ module Graphics.HGL.Internals.Utilities(
         modMVar, modMVar_
 	) where
 
-import qualified Control.Exception as E (bracket, try, IOException, tryJust, ioErrors)
+import qualified Control.Exception as E (bracket, try, IOException, tryJust)
 import Control.Concurrent( MVar, takeMVar, putMVar )
 
 bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
@@ -33,14 +33,7 @@ bracket_ left right m = bracket left right (const m)
 type Exception = E.IOException
 safeTry :: IO a -> IO (Either Exception a)
 
-#if __GLASGOW_HASKELL >= 610 
--- ghc-6.10
 safeTry = E.try
-#else
--- ghc 6.8 (and below?)
-safeTry = E.tryJust E.ioErrors
-#endif
-
 
 ----------------------------------------------------------------
 -- Utilities
diff --git a/Graphics/HGL/X11/Display.hs b/Graphics/HGL/X11/Display.hs
index f4fe7cf..2c95743 100644
--- a/Graphics/HGL/X11/Display.hs
+++ b/Graphics/HGL/X11/Display.hs
@@ -14,12 +14,12 @@ import Control.Concurrent.MVar (MVar, newMVar, readMVar, takeMVar, putMVar)
 import Control.Monad (when)
 import Data.Maybe (isJust)
 import System.Environment (getEnv)
-import System.IO.Error (try)
+import qualified Control.Exception as E
 import System.IO.Unsafe (unsafePerformIO)
 
 getDisplayName :: IO String
 getDisplayName = do
-  disp <- try (getEnv "DISPLAY")
+  disp <- (E.try :: IO a -> IO (Either E.IOException a)) (getEnv "DISPLAY")
   return (either (const ":0.0") id disp)
 
 displayRef :: MVar (Maybe X.Display)
@@ -31,8 +31,8 @@ openDisplay host cleanup = do
   when (isJust mb_display) cleanup
   openDisplay'
  where
-  openDisplay' = do      
-    display <- X.openDisplay host `catch` \ err -> 
+  openDisplay' = do
+    display <- (E.catch :: IO a -> (IOError -> IO a) -> IO a) (X.openDisplay host) $ \ err -> 
                  ioError (userError ("Unable to open X display " ++ host))
     modMVar displayRef (const $ Just display)
     return display
diff --git a/Graphics/HGL/X11/Types.hs b/Graphics/HGL/X11/Types.hs
index 17155e8..aab9b5f 100644
--- a/Graphics/HGL/X11/Types.hs
+++ b/Graphics/HGL/X11/Types.hs
@@ -27,6 +27,7 @@ import Graphics.HGL.Internals.Types
 
 import qualified Graphics.X11.Xlib as X
 
+import qualified Control.Exception as E
 import Control.Concurrent.MVar (MVar)
 import Data.Bits
 import Data.Word (Word8)
@@ -84,7 +85,7 @@ lookupColor display col = (do
   (X.Color p _ _ _ _) <-
       X.allocColor display color_map (X.Color 0 r g b xcolor_flags)
   return p)
-     `catch` \ err -> 
+     `cE` \ err -> 
                print err >> return 0
 --	       ioError (userError ("Error: " ++ show err
 --			      ++ "\nUnable to allocate colo[u]r " ++ show (r,g,b) 
@@ -92,6 +93,7 @@ lookupColor display col = (do
  where
   screen    = X.defaultScreenOfDisplay display
   color_map = X.defaultColormapOfScreen screen
+  cE        = E.catch :: IO a -> (IOError -> IO a) -> IO a
 
   RGB r' g' b' = col
   (r,g,b) = ((fromIntegral r') * 256, (fromIntegral g') * 256, (fromIntegral b')*256)
