diff -Naur network-alt-0.3.2/Network/Alt/Socket_head.hsc network-alt-0.3.2vq/Network/Alt/Socket_head.hsc
--- network-alt-0.3.2/Network/Alt/Socket_head.hsc	2005-09-29 16:34:45.000000000 +0200
+++ network-alt-0.3.2vq/Network/Alt/Socket_head.hsc	2006-10-03 15:41:46.000000000 +0200
@@ -53,7 +53,8 @@
 #endif
 import qualified System.Posix.Internals
 #ifdef USE_FAST_PACKED_STRING
-import Data.FastPackedString(FastString, unsafeUseAsCStringLen, generate)
+import Data.ByteString(ByteString)
+import Data.ByteString.Base(unsafeUseAsCStringLen, createAndTrim)
 #endif
 
 #include <network-alt.h>
@@ -129,7 +130,7 @@
 #ifdef USE_FAST_PACKED_STRING
 
 -- | Send a string to the socket.
-sendFPS :: Socket -> FastString -> IO ()
+sendFPS :: Socket -> ByteString -> IO ()
 sendFPS s str =
   unsafeUseAsCStringLen str $ \(ptr,len) -> do
     let loop i = if i == len
@@ -139,9 +140,9 @@
 
 -- | Receive a string from the socket. The length parameter is a 
 --   hint - the actual length may be shorter.
-recvFPS :: Socket -> Int -> IO FastString
+recvFPS :: Socket -> Int -> IO ByteString
 recvFPS s len =
-  generate len $ \buf -> recv s buf len
+  createAndTrim len $ \buf -> recv s buf len
 
 #endif
 
diff -Naur network-alt-0.3.2/Network/Alt/Types.hsc network-alt-0.3.2vq/Network/Alt/Types.hsc
--- network-alt-0.3.2/Network/Alt/Types.hsc	2005-12-23 19:06:51.000000000 +0100
+++ network-alt-0.3.2vq/Network/Alt/Types.hsc	2006-10-03 15:11:31.000000000 +0200
@@ -59,4 +59,4 @@
 #enum Type, , SOCK_STREAM, SOCK_DGRAM, SOCK_RAW
 
 -- |Identification of a service. It can either be a port number ("13") or the name ("daytime"). On some platforms you can see the list of services on /etc/services.
-type Service = String
\ Ingen nyrad vid filslut
+type Service = String
diff -Naur network-alt-0.3.2/Setup.lhs network-alt-0.3.2vq/Setup.lhs
--- network-alt-0.3.2/Setup.lhs	2005-10-18 16:30:46.000000000 +0200
+++ network-alt-0.3.2vq/Setup.lhs	2006-10-03 15:11:49.000000000 +0200
@@ -14,11 +14,11 @@
 >
 > myHooks :: UserHooks
 > myHooks = defaultUserHooks { postClean = cleanupHook, 
->                              postConf = \_ _ _ -> configure >> return ExitSuccess
+>                              postConf = \_ _ _ _ -> configure >> return ExitSuccess
 >                            }
 
 
-> cleanupHook _ _ _ = do
+> cleanupHook _ _ _ _ = do
 >   cleanupHsc2hs "Network/Alt"
 >   mapM del ["network-alt.buildinfo","network-alt-config.h","Network/Alt/Socket.hsc"]
 >   withChdir "build/autohell" $ do
@@ -104,4 +104,4 @@
 >   case os of
 >    "mingw32" -> putStrLn ("Running on "++show os++" - using Windows mode") >> windowsConfigure
 >    _         -> putStrLn ("Running on "++show os++" - using Unix mode")    >> unixConfigure
->   createSocketHSC cabal
\ Ingen nyrad vid filslut
+>   createSocketHSC cabal
