diff --git a/src/Hakyll/Core/Resource/Provider/File.hs b/src/Hakyll/Core/Resource/Provider/File.hs
index b2172b8..3ecb0cd 100644
--- a/src/Hakyll/Core/Resource/Provider/File.hs
+++ b/src/Hakyll/Core/Resource/Provider/File.hs
@@ -1,5 +1,6 @@
 -- | A concrete 'ResourceProvider' that gets it's resources from the filesystem
 --
+{-# LANGUAGE CPP #-}
 module Hakyll.Core.Resource.Provider.File
     ( fileResourceProvider
     ) where
@@ -29,6 +30,10 @@ fileResourceProvider configuration = do
                               (mtime . unResource)
   where
     mtime r = do
+#if MIN_VERSION_directory(1,2,0)
+        getModificationTime r 
+#else
         ct <- toCalendarTime =<< getModificationTime r
         let str = formatCalendarTime defaultTimeLocale "%s" ct
         return $ readTime defaultTimeLocale "%s" str
+#endif
diff --git a/src/Hakyll/Core/Util/File.hs b/src/Hakyll/Core/Util/File.hs
index 24814ae..426aea1 100644
--- a/src/Hakyll/Core/Util/File.hs
+++ b/src/Hakyll/Core/Util/File.hs
@@ -1,5 +1,6 @@
 -- | A module containing various file utility functions
 --
+{-# LANGUAGE CPP #-}
 module Hakyll.Core.Util.File
     ( makeDirectories
     , getRecursiveContents
@@ -8,7 +9,6 @@ module Hakyll.Core.Util.File
     ) where
 
 import Control.Applicative ((<$>))
-import System.Time (ClockTime)
 import Control.Monad (forM, filterM)
 import Data.List (isPrefixOf)
 import System.Directory ( createDirectoryIfMissing, doesDirectoryExist
@@ -21,6 +21,18 @@ import System.FilePath ( normalise, takeDirectory, splitPath
 
 import Hakyll.Core.Configuration
 
+#if MIN_VERSION_directory(1,2,0)
+import Data.Time (UTCTime)
+#else
+import System.Time (ClockTime)
+#endif
+
+#if MIN_VERSION_directory(1,2,0)
+type DirectoryTime = UTCTime
+#else
+type DirectoryTime = ClockTime
+#endif
+
 -- | Given a path to a file, try to make the path writable by making
 --   all directories on the path.
 --
@@ -52,8 +64,8 @@ getRecursiveContents includeDirs topdir = do
 -- | Check if a timestamp is obsolete compared to the timestamps of a number of
 -- files. When they are no files, it is never obsolete.
 --
-isObsolete :: ClockTime    -- ^ The time to check.
-           -> [FilePath]   -- ^ Dependencies of the cached file.
+isObsolete :: DirectoryTime -- ^ The time to check.
+           -> [FilePath]    -- ^ Dependencies of the cached file.
            -> IO Bool
 isObsolete _ [] = return False
 isObsolete timeStamp depends = do
