--- accelerate-cuda-0.12.1.1-orig/accelerate-cuda.cabal	2012-08-06 11:28:45.000000000 +1000
+++ accelerate-cuda-0.12.1.1/accelerate-cuda.cabal	2012-09-14 21:11:02.345405137 +1000
@@ -90,22 +90,22 @@
                         array                   >= 0.3          && < 0.5,
                         base                    == 4.*,
                         binary                  == 0.5.*,
-                        blaze-builder           == 0.3.*,
-                        bytestring              == 0.9.*,
-                        containers              == 0.4.*,
+                        bytestring              >= 0.9          && < 0.11,
+                        containers              >= 0.4          && < 0.6,
                         cryptohash              == 0.7.*,
                         cuda                    >= 0.4.1        && < 0.5,
-                        directory               >= 1.0          && < 1.2,
+                        directory               >= 1.0          && < 1.3,
                         fclabels                >= 1.0          && < 1.2,
                         filepath                >= 1.0          && < 1.4,
                         hashable                == 1.1.*,
                         hashtables              >= 1.0.1        && < 1.1,
-                        language-c-quote        == 0.3.*,
-                        mainland-pretty         == 0.1.*,
+                        language-c-quote        >= 0.4,
+                        mainland-pretty         >= 0.2,
                         mtl                     >= 2.0          && < 2.2,
                         pretty                  >= 1.0          && < 1.2,
                         process                 >= 1.0          && < 1.2,
-                        srcloc                  == 0.1.*,
+                        srcloc                  >= 0.2,
+                        text                    >= 0.11,
                         transformers            >= 0.2          && < 0.4,
                         unordered-containers    >= 0.1.4        && < 0.3
 
--- accelerate-cuda-0.12.1.1-orig/Data/Array/Accelerate/CUDA/CodeGen.hs	2012-08-06 11:28:45.000000000 +1000
+++ accelerate-cuda-0.12.1.1/Data/Array/Accelerate/CUDA/CodeGen.hs	2012-09-14 20:57:53.481423442 +1000
@@ -506,10 +506,10 @@
 codegenIntegralScalar ty x | IntegralDict <- integralDict ty = [cexp| ( $ty:(codegenIntegralType ty) ) $exp:(cintegral x) |]
 
 codegenFloatingScalar :: FloatingType a -> a -> C.Exp
-codegenFloatingScalar (TypeFloat   _) x = C.Const (FloatConst (shows x "f") (toRational x) noSrcLoc) noSrcLoc
-codegenFloatingScalar (TypeCFloat  _) x = C.Const (FloatConst (shows x "f") (toRational x) noSrcLoc) noSrcLoc
-codegenFloatingScalar (TypeDouble  _) x = C.Const (DoubleConst (show x) (toRational x) noSrcLoc) noSrcLoc
-codegenFloatingScalar (TypeCDouble _) x = C.Const (DoubleConst (show x) (toRational x) noSrcLoc) noSrcLoc
+codegenFloatingScalar (TypeFloat   _) x = C.Const (FloatConst (shows x "f") (toRational x) noLoc) noLoc
+codegenFloatingScalar (TypeCFloat  _) x = C.Const (FloatConst (shows x "f") (toRational x) noLoc) noLoc
+codegenFloatingScalar (TypeDouble  _) x = C.Const (DoubleConst (show x) (toRational x) noLoc) noLoc
+codegenFloatingScalar (TypeCDouble _) x = C.Const (DoubleConst (show x) (toRational x) noLoc) noLoc
 
 codegenNonNumScalar :: NonNumType a -> a -> C.Exp
 codegenNonNumScalar (TypeBool   _) x = cbool x
--- accelerate-cuda-0.12.1.1-orig/Data/Array/Accelerate/CUDA/CodeGen/Base.hs	2012-08-06 11:28:45.000000000 +1000
+++ accelerate-cuda-0.12.1.1/Data/Array/Accelerate/CUDA/CodeGen/Base.hs	2012-09-14 20:57:53.481423442 +1000
@@ -71,7 +71,7 @@
 ccall fn args = [cexp|$id:fn ($args:args)|]
 
 typename :: String -> Type
-typename name = Type (DeclSpec [] [] (Tnamed (Id name noSrcLoc) noSrcLoc) noSrcLoc) (DeclRoot noSrcLoc) noSrcLoc
+typename name = Type (DeclSpec [] [] (Tnamed (Id name noLoc) noLoc) noLoc) (DeclRoot noLoc) noLoc
 
 cchar :: Char -> Exp
 cchar c = [cexp|$char:c|]
@@ -178,7 +178,7 @@
 -- Turn a plain type into a ptr type
 --
 cptr :: Type -> Type
-cptr t | Type d@(DeclSpec _ _ _ _) r@(DeclRoot _) lb <- t = Type d (Ptr [] r noSrcLoc) lb
+cptr t | Type d@(DeclSpec _ _ _ _) r@(DeclRoot _) lb <- t = Type d (Ptr [] r noLoc) lb
        | otherwise                                        = t
 
 
--- accelerate-cuda-0.12.1.1-orig/Data/Array/Accelerate/CUDA/Compile.hs	2012-08-06 11:28:45.000000000 +1000
+++ accelerate-cuda-0.12.1.1/Data/Array/Accelerate/CUDA/Compile.hs	2012-09-14 21:05:48.567916645 +1000
@@ -36,8 +36,6 @@
 import Numeric
 import Prelude                                          hiding ( exp, catch )
 import Control.Applicative                              hiding ( Const )
-import Blaze.ByteString.Builder
-import Blaze.ByteString.Builder.Char8
 import Control.Exception
 import Control.Monad
 import Control.Monad.Trans
@@ -52,11 +50,12 @@
 import System.IO
 import System.IO.Unsafe
 import System.Process
-import Text.PrettyPrint.Mainland                        ( RDoc(..), ppr, renderCompact )
-import Data.ByteString.Internal                         ( w2c )
+import Text.PrettyPrint.Mainland                        ( ppr, renderCompact, displayLazyText )
 import qualified Data.HashSet                           as Set
 import qualified Data.ByteString                        as B
-import qualified Data.ByteString.Lazy                   as L
+import qualified Data.Text.Lazy                         as T
+import qualified Data.Text.Lazy.IO                      as T
+import qualified Data.Text.Lazy.Encoding                as T
 import qualified Foreign.CUDA.Driver                    as CUDA
 import qualified Foreign.CUDA.Analysis                  as CUDA
 
@@ -360,12 +359,12 @@
 compile table dev acc fvar = do
   exists        <- isJust `fmap` liftIO (KT.lookup table key)
   unless exists $ do
-    message     $  unlines [ show key, map w2c (L.unpack code) ]
+    message     $  unlines [ show key, T.unpack code ]
     nvcc        <- fromMaybe (error "nvcc: command not found") <$> liftIO (findExecutable "nvcc")
     (file,hdl)  <- openTemporaryFile "dragon.cu"   -- rawr!
     flags       <- compileFlags file
     (_,_,_,pid) <- liftIO $ do
-      L.hPut hdl code                 `finally`     hClose hdl
+      T.hPutStr hdl code              `finally`     hClose hdl
       createProcess (proc nvcc flags) `onException` removeFile file
     --
     liftIO $ KT.insert table key (CompileProcess file pid)
@@ -374,15 +373,8 @@
   where
     cunit       = codegenAcc dev acc fvar
     entry       = show cunit
-    key         = (CUDA.computeCapability dev, hashlazy code)
-    code        = toLazyByteString
-                . layout . renderCompact $ ppr cunit
-    --
-    layout (RText _ s next)     = fromString s  `mappend` layout next
-    layout (RChar c   next)     = fromChar c    `mappend` layout next
-    layout (RLine _   next)     = fromChar '\n' `mappend` layout next   -- no indenting
-    layout (RPos _    next)     = layout next                           -- no line markers
-    layout REmpty               = mempty                                -- done
+    key         = (CUDA.computeCapability dev, hashlazy (T.encodeUtf8 code) )
+    code        = displayLazyText . renderCompact $ ppr cunit
 
 
 -- Wait for the compilation process to finish
