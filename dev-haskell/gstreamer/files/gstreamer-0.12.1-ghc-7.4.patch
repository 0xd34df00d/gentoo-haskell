fix build failure on ghc-7.4 (Eq constraints)

Media/Streaming/GStreamer/Core/Buffer.chs:216:13:
    Could not deduce (Eq numT) arising from a use of `/='
    from the context (BufferClass bufferT, Integral intT, Num numT)
      bound by the type signature for
                 marshalGetNum :: (BufferClass bufferT, Integral intT, Num numT) =>
                                  (Ptr Buffer -> IO intT) -> numT -> bufferT -> Maybe numT
      at Media/Streaming/GStreamer/Core/Buffer.chs:(213,1)-(218,22)
    Possible fix:
      add (Eq numT) to the context of
        the type signature for
          marshalGetNum :: (BufferClass bufferT, Integral intT, Num numT) =>
                           (Ptr Buffer -> IO intT) -> numT -> bufferT -> Maybe numT
    In the expression: n /= invalid
    In the expression: if n /= invalid then Just n else Nothing
    In the expression:
      let
        n = fromIntegral
            $ unsafePerformIO $ withMiniObject (toBuffer buffer) getAction
      in if n /= invalid then Just n else Nothing
diff --git a/Media/Streaming/GStreamer/Core/Buffer.chs b/Media/Streaming/GStreamer/Core/Buffer.chs
index 006a2f1..92d63b1 100644
--- a/Media/Streaming/GStreamer/Core/Buffer.chs
+++ b/Media/Streaming/GStreamer/Core/Buffer.chs
@@ -205,7 +205,7 @@ unsafeBufferGetPtrM = do
   liftIO $ liftM castPtr $
       {# get GstBuffer->data #} ptr
 
-marshalGetNum :: (BufferClass bufferT, Integral intT, Num numT)
+marshalGetNum :: (BufferClass bufferT, Integral intT, Num numT, Eq numT)
               => (Ptr Buffer -> IO intT)
               -> numT
               -> bufferT
@@ -217,7 +217,7 @@ marshalGetNum getAction invalid buffer =
           then Just n
           else Nothing
 
-marshalGetNumM :: (BufferClass bufferT, Integral intT, Num numT, MonadIO m)
+marshalGetNumM :: (BufferClass bufferT, Integral intT, Num numT, Eq numT, MonadIO m)
               => (Ptr Buffer -> IO intT)
               -> numT
               -> MiniObjectT bufferT m (Maybe numT)
