--- filestore-0.5.0.1-orig/filestore.cabal	2012-10-22 10:20:24.000000000 +1100
+++ filestore-0.5.0.1/filestore.cabal	2012-12-18 15:30:17.380843900 +1100
@@ -43,7 +43,7 @@
                          time >= 1.1 && < 1.5,
                          xml >= 1.3 && < 1.4,
                          split >= 0.1 && < 0.3,
-                         Diff >= 0.1.2 && < 0.2,
+                         Diff >= 0.2 && < 0.3,
                          old-locale >= 1.0 && < 1.1
 
     Exposed-modules:     Data.FileStore, Data.FileStore.Types, Data.FileStore.Git, Data.FileStore.Darcs, Data.FileStore.Mercurial,
--- filestore-0.5.0.1-orig/Data/FileStore/Generic.hs	2012-10-22 10:20:24.000000000 +1100
+++ filestore-0.5.0.1/Data/FileStore/Generic.hs	2012-12-18 15:19:10.381594445 +1100
@@ -14,7 +14,7 @@
 module Data.FileStore.Generic
            ( modify
            , create
-           , DI(..)
+           , Diff(..)
            , diff
            , searchRevisions
            , smartRetrieve
@@ -27,7 +27,7 @@
 import Control.Exception (throwIO, catch, SomeException, try)
 import Data.FileStore.Utils
 import Data.List (isInfixOf)
-import Data.Algorithm.Diff (DI(..), getGroupedDiff)
+import Data.Algorithm.Diff (Diff(..), getGroupedDiff)
 import System.FilePath ((</>))
 import Prelude hiding (catch)
 
@@ -73,7 +73,7 @@
        return $ Left (MergeInfo latestRev conflicts mergedText)
 
 -- | Return a unified diff of two revisions of a named resource.
--- Format of the diff is a list @[(DI, [String])]@, where
+-- Format of the diff is a list @[(Diff, [String])]@, where
 -- @DI@ is @F@ (in first document only), @S@ (in second only),
 -- or @B@ (in both), and the list is a list of lines (without
 -- newlines at the end).
@@ -81,10 +81,10 @@
      -> FilePath      -- ^ Resource name to get diff for.
      -> Maybe RevisionId  -- ^ @Just@ old revision ID, or @Nothing@ for empty.
      -> Maybe RevisionId  -- ^ @Just@ oew revision ID, or @Nothing@ for latest.
-     -> IO [(DI, [String])]
+     -> IO [Diff [String]]
 diff fs name Nothing id2 = do
   contents2 <- retrieve fs name id2
-  return [(S, lines contents2)]   -- no need to run getGroupedDiff here - diff vs empty document 
+  return [Second (lines contents2) ]   -- no need to run getGroupedDiff here - diff vs empty document 
 diff fs name id1 id2 = do
   contents1 <- retrieve fs name id1
   contents2 <- retrieve fs name id2
diff --git a/tests/Tests.lhs b/tests/Tests.lhs
index f69d8c4..b1bff74 100644
--- a/tests/Tests.lhs
+++ b/tests/Tests.lhs
@@ -12,7 +12,7 @@ This program runs tests for the filestore modules.
 > import Data.Time
 > import Data.Maybe (mapMaybe)
 > import System.FilePath
-> import Data.Algorithm.Diff (DI(..))
+> import Data.Algorithm.Diff (Diff(..))
 
 > main = do
 >   testFileStore (gitFileStore "tmp/gitfs") "Data.FileStore.Git"
@@ -336,13 +336,13 @@ This program runs tests for the filestore modules.
 
 >   [secondrev, firstrev] <- history fs [diffTitle] (TimeRange Nothing Nothing) Nothing
 >   diff' <- diff fs diffTitle (Just $ revId firstrev) (Just $ revId secondrev)
->   let subtracted' = mapMaybe (\(d,s) -> if d == F then Just s else Nothing) diff'
+>   let subtracted' = [s | First s <- diff']
 >   assertEqual "subtracted lines" [[last (lines testContents)]] subtracted'
 
     Diff from Nothing should be diff from empty document.
 
 >   diff'' <- diff fs diffTitle Nothing (Just $ revId firstrev)
->   let added'' = mapMaybe (\(d,s) -> if d == S then Just s else Nothing) diff''
+>   let added'' = [s | Second s <- diff']
 >   assertEqual "added lines from empty document to first revision" [lines testContents] added''
 
     Diff to Nothing should be diff to latest.
