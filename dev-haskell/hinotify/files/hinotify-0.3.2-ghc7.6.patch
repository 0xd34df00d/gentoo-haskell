Mon Oct 22 11:44:43 FET 2012  Sergei Trofimovich <slyfox@community.haskell.org>
  * switched to extensible-exceptions (ghc-7.6 support)
  
  Fixes build failure:
  > [2 of 2] Compiling System.INotify   ( dist/build/System/INotify.hs, dist/build/System/INotify.o )
  > src/System/INotify.hsc:316:13: Not in scope: `catch'
  > src/System/INotify.hsc:322:27: Not in scope: `catch'
diff -rN -u old-hinotify/hinotify.cabal new-hinotify/hinotify.cabal
--- old-hinotify/hinotify.cabal	2012-10-23 18:20:00.066881000 +0300
+++ new-hinotify/hinotify.cabal	2012-10-23 18:20:00.087881000 +0300
@@ -23,7 +23,7 @@
 library
     build-depends:  unix
     if flag(split-base)
-        build-depends:  base >= 3 && < 5, containers, directory
+        build-depends:  base >= 3 && < 5, containers, directory, extensible-exceptions
     else
         build-depends:  base < 3
     extensions:     ForeignFunctionInterface
diff -rN -u old-hinotify/src/System/INotify.hsc new-hinotify/src/System/INotify.hsc
--- old-hinotify/src/System/INotify.hsc	2012-10-23 18:20:00.066881000 +0300
+++ new-hinotify/src/System/INotify.hsc	2012-10-23 18:20:00.091881000 +0300
@@ -37,8 +37,7 @@
 import Prelude hiding (init)
 import Control.Monad
 import Control.Concurrent
-import Control.Concurrent.MVar
-import Control.Exception (bracket)
+import qualified Control.Exception.Extensible as E
 import Data.Maybe
 import Data.Map (Map)
 import qualified Data.Map as Map
@@ -291,7 +290,7 @@
         isDir = isSet inIsdir
         isSet bits = maskIsSet bits mask
         name = fromJust nameM
-       
+
 inotify_start_thread :: Handle -> MVar EventMap -> IO (ThreadId, ThreadId)
 inotify_start_thread h em = do
     chan_events <- newChan
@@ -313,13 +312,15 @@
     runHandler (_,  e@QOverflow) = do -- send overflows to all handlers
         handlers <- readMVar em
         flip mapM_ (Map.elems handlers) $ \handler ->
-            catch (handler e) (\_ -> return ()) -- supress errors
+             handler e `E.catch` ignore_failure
     runHandler (wd, event) = do 
         handlers <- readMVar em
         let handlerM = Map.lookup wd handlers
         case handlerM of
           Nothing -> putStrLn "runHandler: couldn't find handler" -- impossible?
-          Just handler -> catch (handler event) (\_ -> return ())
+          Just handler -> handler event `E.catch` ignore_failure
+    ignore_failure :: E.SomeException -> IO ()
+    ignore_failure _e = return ()
 
 killINotify :: INotify -> IO ()
 killINotify (INotify h _ _ tid1 tid2) =
@@ -328,8 +329,8 @@
        hClose h
 
 withINotify :: (INotify -> IO a) -> IO a
-withINotify = bracket initINotify killINotify
-        
+withINotify = E.bracket initINotify killINotify
+
 foreign import ccall unsafe "sys/inotify.h inotify_init" c_inotify_init :: IO CInt
 foreign import ccall unsafe "sys/inotify.h inotify_add_watch" c_inotify_add_watch :: CInt -> CString -> CUInt -> IO CInt
 foreign import ccall unsafe "sys/inotify.h inotify_rm_watch" c_inotify_rm_watch :: CInt -> CInt -> IO CInt
