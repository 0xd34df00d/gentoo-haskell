--- repa-3.1.4.2-orig/repa.cabal	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/repa.cabal	2012-05-18 15:58:00.561363928 +1000
@@ -26,7 +26,7 @@
         base                 == 4.*,
         ghc-prim             == 0.2.*,
         vector               == 0.9.*,
-        bytestring           == 0.9.*,
+        bytestring           >= 0.9 && < 0.11,
         QuickCheck           >= 2.3 && < 2.5,
         template-haskell     >= 2.5 && < 2.8
 
--- repa-3.1.4.2-orig/Data/Array/Repa/Eval/Gang.hs	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/Data/Array/Repa/Eval/Gang.hs	2012-05-18 16:18:51.289336546 +1000
@@ -7,14 +7,17 @@
 where
 import GHC.IO
 import GHC.ST
+#if MIN_VERSION_base(4,4,0)
 import GHC.Conc                 (forkOn)
+#else
+import GHC.Conc                 (forkOnIO)
+#endif
 import Control.Concurrent.MVar
 import Control.Exception        (assert)
 import Control.Monad
 import GHC.Conc			(numCapabilities)
 import System.IO
 
-
 -- TheGang --------------------------------------------------------------------
 -- | This globally shared gang is auto-initialised at startup and shared by all
 --   Repa computations.
@@ -105,7 +108,12 @@
                 mvsDone
 
         -- Create all the worker threads
-        zipWithM_ forkOn [0..]
+        zipWithM_ 
+#if MIN_VERSION_base(4,4,0)
+            forkOn [0..]
+#else
+            forkOnIO [0..]
+#endif
                 $ zipWith3 gangWorker 
                         [0 .. n-1] mvsRequest mvsDone
 
--- repa-3.1.4.2-orig/Data/Array/Repa/Repr/ForeignPtr.hs	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/Data/Array/Repa/Repr/ForeignPtr.hs	2012-05-18 16:24:15.879016593 +1000
@@ -1,3 +1,4 @@
+{-# LANGUAGE CPP #-}
 
 module Data.Array.Repa.Repr.ForeignPtr
         ( F, Array (..)
@@ -12,7 +13,11 @@
 import Foreign.ForeignPtr
 import Foreign.Marshal.Alloc
 import System.IO.Unsafe
+#if MIN_VERSION_base(4,4,0)
 import qualified Foreign.ForeignPtr.Unsafe      as Unsafe
+#else
+import qualified Foreign.ForeignPtr as Unsafe
+#endif
 
 -- | Arrays represented as foreign buffers in the C heap.
 data F
--- repa-3.1.4.2-orig/Data/Array/Repa/Repr/HintInterleave.hs	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/Data/Array/Repa/Repr/HintInterleave.hs	2012-05-18 16:25:24.434042191 +1000
@@ -1,4 +1,4 @@
-
+{-# LANGUAGE CPP #-}
 module Data.Array.Repa.Repr.HintInterleave
         (I, Array (..), hintInterleave)
 where
@@ -9,6 +9,10 @@
 import Data.Array.Repa.Base
 import Debug.Trace
 
+#if !MIN_VERSION_base(4,4,0)
+traceEventIO :: String -> IO ()
+traceEventIO = putTraceMsg
+#endif
 
 -- | Hints that computing this array will be an unbalanced workload
 --   and evaluation should be interleaved between the processors.
--- repa-3.1.4.2-orig/Data/Array/Repa/Repr/Cursored.hs	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/Data/Array/Repa/Repr/Cursored.hs	2012-05-18 16:20:31.430747948 +1000
@@ -1,4 +1,4 @@
-{-# LANGUAGE MagicHash #-}
+{-# LANGUAGE MagicHash, CPP, TypeSynonymInstances #-}
 module Data.Array.Repa.Repr.Cursored
         ( C, Array (..)
         , makeCursored)
@@ -14,6 +14,11 @@
 import GHC.Exts
 import Debug.Trace
 
+#if !MIN_VERSION_base(4,4,0)
+traceEventIO :: String -> IO ()
+traceEventIO = putTraceMsg
+#endif
+
 -- | Cursored Arrays.
 --   These are produced by Repa's stencil functions, and help the fusion
 --   framework to share index compuations between array elements.
--- repa-3.1.4.2-orig/Data/Array/Repa/Repr/Delayed.hs	2012-05-04 16:28:21.000000000 +1000
+++ repa-3.1.4.2/Data/Array/Repa/Repr/Delayed.hs	2012-05-18 16:19:40.892031841 +1000
@@ -1,4 +1,4 @@
-{-# LANGUAGE MagicHash #-}
+{-# LANGUAGE MagicHash, CPP, TypeSynonymInstances #-}
 module Data.Array.Repa.Repr.Delayed
         ( D, Array(..)
         , fromFunction, toFunction
@@ -14,6 +14,11 @@
 import Debug.Trace
 import GHC.Exts
 
+#if !MIN_VERSION_base(4,4,0)
+traceEventIO :: String -> IO ()
+traceEventIO = putTraceMsg
+#endif
+
 -- | Delayed arrays are represented as functions from the index to element value.
 --
 --   Every time you index into a delayed array the element at that position 
