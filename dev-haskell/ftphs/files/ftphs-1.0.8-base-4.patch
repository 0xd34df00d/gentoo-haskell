diff --git a/src/Network/FTP/Server.hs b/src/Network/FTP/Server.hs
index 03402e7..5b54203 100644
--- a/src/Network/FTP/Server.hs
+++ b/src/Network/FTP/Server.hs
@@ -98,7 +98,7 @@ import Text.Printf
 import Data.Char
 import Data.IORef
 import Data.List
-import Control.Exception(finally)
+import qualified Control.Exception as E
 import System.IO
 
 data DataType = ASCII | Binary
@@ -166,7 +166,7 @@ instance Ord Command where
 
 trapIOError :: FTPServer -> IO a -> (a -> IO Bool) -> IO Bool
 trapIOError h testAction remainingAction =
-    do result <- try testAction
+    do result <- (E.try :: IO a -> IO (Either E.IOException a)) testAction
        case result of
          Left err -> do sendReply h 550 (show err)
                         return True
@@ -214,7 +214,7 @@ commandLoop h@(FTPServer fh _ _) =
                                     ("Closing due to error: " ++ (show e))
                             hClose fh
                             return False
-        in do continue <- (flip catch) errorhandler 
+        in do continue <- (flip (E.catch :: IO a -> (IOError -> IO a) -> IO a)) errorhandler
                (do x <- parseCommand fh
                    case x of
                      Left err -> do sendReply h 500 $
@@ -348,14 +348,15 @@ runDataChan h@(FTPServer _ _ state) func =
     do chan <- readIORef (datachan state)
        case chan of
           NoChannel -> fail "Can't connect when no data channel exists"
-          PassiveMode ss -> do finally (handleOne ss (\sock _ _ -> func h sock))
-                                       (do closeSocketServer ss
-                                           closeconn h
-                                       )
+          PassiveMode ss -> do (E.finally :: IO a -> IO b -> IO a)
+                                   (handleOne ss (\sock _ _ -> func h sock))
+                                   (do closeSocketServer ss
+                                       closeconn h
+                                   )
           PortMode sa -> do proto <- getProtocolNumber "tcp"
                             s <- socket AF_INET Stream proto
                             connect s sa
-                            finally (func h s) $ closeconn h
+                            E.finally (func h s) $ closeconn h
 
 help_pasv = ("Initiate a passive-mode connection", "")
 cmd_pasv :: CommandHandler
@@ -414,11 +415,11 @@ cmd_stor h@(FTPServer _ fs state) args =
                   do readh <- socketToHandle sock ReadMode
                      mode <- readIORef (datatype state)
                      case mode of
-                      ASCII -> finally (hLineInteract readh fh datamap)
-                                       (hClose readh)
-                      Binary -> finally (do vSetBuffering fh (BlockBuffering (Just 4096))
-                                            hCopy readh fh
-                                        ) (hClose readh)
+                      ASCII -> E.finally (hLineInteract readh fh datamap)
+                                         (hClose readh)
+                      Binary -> E.finally (do vSetBuffering fh (BlockBuffering (Just 4096))
+                                              hCopy readh fh
+                                          ) (hClose readh)
         in
         if length args < 1
            then do sendReply h 501 "Filename required"
@@ -447,18 +448,18 @@ rtransmitString thestr (FTPServer _ _ state) sock =
            hSetBuffering writeh (BlockBuffering (Just 4096))
            mode <- readIORef (datatype state)
            case mode of
-              ASCII -> finally (copyit writeh)
-                               (hClose writeh)
-              Binary -> finally (hPutStr writeh thestr)
-                                (hClose writeh)
+              ASCII -> E.finally (copyit writeh)
+                                 (hClose writeh)
+              Binary -> E.finally (hPutStr writeh thestr)
+                                  (hClose writeh)
 
 rtransmitH :: HVFSOpenEncap -> FTPServer -> Socket -> IO ()
 rtransmitH fhencap h sock =
     case fhencap of
        HVFSOpenEncap fh ->
-        finally (do c <- vGetContents fh
-                    rtransmitString c h sock
-                ) (vClose fh)
+        E.finally (do c <- vGetContents fh
+                      rtransmitString c h sock
+                  ) (vClose fh)
 
 genericTransmit :: FTPServer -> a -> (a -> FTPServer -> Socket -> IO ()) -> IO Bool
 genericTransmit h dat func =
