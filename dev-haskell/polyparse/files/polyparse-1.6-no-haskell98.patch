diff --git a/polyparse.cabal b/polyparse.cabal
index a41d630..5ffcb54 100644
--- a/polyparse.cabal
+++ b/polyparse.cabal
@@ -19,7 +19,7 @@ cabal-version:  >=1.2
 
 library
   hs-source-dirs:	src
-  build-depends:	base <= 6, haskell98
+  build-depends:	base <= 6
   exposed-modules:
         Text.ParserCombinators.HuttonMeijer,
         Text.ParserCombinators.HuttonMeijerWallace,
diff --git a/src/Text/Parse.hs b/src/Text/Parse.hs
index 4c10c9f..bab5b29 100644
--- a/src/Text/Parse.hs
+++ b/src/Text/Parse.hs
@@ -29,10 +29,10 @@ module Text.Parse
   , allAsString
   ) where
 
-import Char (isSpace,toLower,isUpper,isDigit,isOctDigit,isHexDigit,digitToInt
-            ,isAlpha,isAlphaNum,ord,chr)
-import List (intersperse)
-import Ratio
+import Data.Char (isSpace,toLower,isUpper,isDigit,isOctDigit,isHexDigit,digitToInt
+                 ,isAlpha,isAlphaNum,ord,chr)
+import Data.List (intersperse)
+import Data.Ratio
 import Text.ParserCombinators.Poly
 
 ------------------------------------------------------------------------
@@ -224,9 +224,9 @@ parseInt base radix isDigit digitToInt =
                                    (map (fromIntegral.digitToInt) cs))
                  `adjustErr` (++("\nexpected one or more "++base++" digits"))
 parseDec, parseOct, parseHex :: (Integral a) => TextParser a
-parseDec = parseInt "decimal" 10 Char.isDigit    Char.digitToInt
-parseOct = parseInt "octal"    8 Char.isOctDigit Char.digitToInt
-parseHex = parseInt "hex"     16 Char.isHexDigit Char.digitToInt
+parseDec = parseInt "decimal" 10 Data.Char.isDigit    Data.Char.digitToInt
+parseOct = parseInt "octal"    8 Data.Char.isOctDigit Data.Char.digitToInt
+parseHex = parseInt "hex"     16 Data.Char.isHexDigit Data.Char.digitToInt
 
 parseFloat :: (RealFrac a) => TextParser a
 parseFloat = do ds   <- many1 (satisfy isDigit)
diff --git a/src/Text/Parse/ByteString.hs b/src/Text/Parse/ByteString.hs
index 438301e..5b0f62b 100644
--- a/src/Text/Parse/ByteString.hs
+++ b/src/Text/Parse/ByteString.hs
@@ -32,10 +32,10 @@ module Text.Parse.ByteString
   , allAsString
   ) where
 
-import Char (isUpper,isDigit,isOctDigit,isHexDigit,digitToInt
-            ,isSpace,isAlpha,isAlphaNum,ord,chr,toLower)
-import List (intersperse)
-import Ratio
+import Data.Char (isUpper,isDigit,isOctDigit,isHexDigit,digitToInt
+                 ,isSpace,isAlpha,isAlphaNum,ord,chr,toLower)
+import Data.List (intersperse)
+import Data.Ratio
 import qualified Data.ByteString.Lazy.Char8 as BS
 import Data.ByteString.Lazy.Char8 (ByteString)
 import Text.ParserCombinators.Poly.ByteString
@@ -263,16 +263,16 @@ parseInt base radix isDigit digitToInt =
 
 -- | Parse a decimal, octal, or hexadecimal (unsigned) Integral numeric literal.
 parseDec, parseOct, parseHex :: (Integral a) => TextParser a
-parseDec = parseInt "decimal" 10 Char.isDigit    Char.digitToInt
-parseOct = parseInt "octal"    8 Char.isOctDigit Char.digitToInt
-parseHex = parseInt "hex"     16 Char.isHexDigit Char.digitToInt
+parseDec = parseInt "decimal" 10 Data.Char.isDigit    Data.Char.digitToInt
+parseOct = parseInt "octal"    8 Data.Char.isOctDigit Data.Char.digitToInt
+parseHex = parseInt "hex"     16 Data.Char.isHexDigit Data.Char.digitToInt
 
 -- | parseUnsignedInteger uses the underlying ByteString readInteger, so
 --   will be a lot faster than the generic character-by-character parseInt.
 parseUnsignedInteger :: TextParser Integer
 parseUnsignedInteger = P (\bs -> case BS.uncons bs of
                                  Just (c, _)
-                                  | Char.isDigit c ->
+                                  | Data.Char.isDigit c ->
                                      case BS.readInteger bs of
                                      Just (i, bs') -> Success bs' i
                                      Nothing -> error "XXX Can't happen"
diff --git a/src/Text/ParserCombinators/HuttonMeijer.hs b/src/Text/ParserCombinators/HuttonMeijer.hs
index f7b5327..8de8391 100644
--- a/src/Text/ParserCombinators/HuttonMeijer.hs
+++ b/src/Text/ParserCombinators/HuttonMeijer.hs
@@ -34,8 +34,8 @@ module Text.ParserCombinators.HuttonMeijer
     letter, alphanum, string, ident, nat, int, spaces, comment, junk,
     skip, token, natural, integer, symbol, identifier) where
 
-import Char
-import Monad
+import Data.Char
+import Control.Monad
 
 infixr 5 +++
 
diff --git a/src/Text/ParserCombinators/HuttonMeijerWallace.hs b/src/Text/ParserCombinators/HuttonMeijerWallace.hs
index 2b76dfd..9afc5d5 100644
--- a/src/Text/ParserCombinators/HuttonMeijerWallace.hs
+++ b/src/Text/ParserCombinators/HuttonMeijerWallace.hs
@@ -53,8 +53,8 @@ module Text.ParserCombinators.HuttonMeijerWallace
   , reparse
   ) where
 
-import Char
-import Monad
+import Data.Char
+import Control.Monad
 
 infixr 5 +++
 
