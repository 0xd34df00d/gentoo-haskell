--- wxcore-0.13.2-orig/wxcore.cabal	2012-01-06 03:56:58.000000000 +1100
+++ wxcore-0.13.2/wxcore.cabal	2012-01-07 13:15:11.568647279 +1100
@@ -208,7 +208,7 @@
 
   if flag(splitBase)
     build-depends:
-      array >= 0.2 && < 0.4,
+      array >= 0.2 && < 0.5,
       base >= 4 && < 5,
       containers >= 0.2 && < 0.5
   else
--- wxcore-0.13.2-orig/src/haskell/Graphics/UI/WXCore/Events.hs	2012-01-06 03:56:56.000000000 +1100
+++ wxcore-0.13.2/src/haskell/Graphics/UI/WXCore/Events.hs	2012-01-07 13:21:58.970516229 +1100
@@ -237,6 +237,7 @@
 import Foreign.StablePtr
 import Foreign.Ptr
 import Foreign.C.String
+import Foreign.C.Types (CInt(..))
 import Foreign.Marshal.Alloc
 import Foreign.Marshal.Array
 import Foreign.Marshal.Utils
--- wxcore-0.13.2-orig/src/haskell/Graphics/UI/WXCore/WxcTypes.hs	2012-01-06 03:56:56.000000000 +1100
+++ wxcore-0.13.2/src/haskell/Graphics/UI/WXCore/WxcTypes.hs	2012-01-07 13:16:09.570677329 +1100
@@ -567,7 +567,7 @@
 rectFromSize (Size w h)
   = Rect 0 0 w h
 
-rectIsEmpty :: (Num a) => Rect2D a -> Bool
+rectIsEmpty :: (Eq a, Num a) => Rect2D a -> Bool
 rectIsEmpty (Rect l t w h)
   = (w==0 && h==0)
 
@@ -849,7 +849,7 @@
 toCChar = castCharToCChar
 
 -- generalised to work with Char and CChar
-withCharResult :: (Num a, Integral a) => IO a -> IO Char
+withCharResult :: (Num a, Integral a, Show a) => IO a -> IO Char
 withCharResult io
   = do x <- io
        if (x < 0)
