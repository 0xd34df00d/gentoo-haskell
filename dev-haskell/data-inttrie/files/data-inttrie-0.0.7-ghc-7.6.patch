From f8ed1d97f5383f029e97c409044104da77daca0a Mon Sep 17 00:00:00 2001
From: nand <nand@lavabit.com>
Date: Sat, 15 Sep 2012 10:21:13 +0200
Subject: [PATCH] Add extra Num constraints for GHC 7.6

---
 Data/IntTrie.hs | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/Data/IntTrie.hs b/Data/IntTrie.hs
index 2785148..d1a7cc4 100644
--- a/Data/IntTrie.hs
+++ b/Data/IntTrie.hs
@@ -47,14 +47,14 @@ instance Applicative IntTrie where
         IntTrie (fneg <*> xneg) (fz xz) (fpos <*> xpos)
 
 -- | Apply the trie to an argument.  This is the semantic map.
-apply :: (Ord b, Bits b) => IntTrie a -> b -> a
+apply :: (Ord b, Bits b, Num b) => IntTrie a -> b -> a
 apply ~(IntTrie neg z pos) x =
     case compare x 0 of
         LT -> applyPositive neg (-x)
         EQ -> z
         GT -> applyPositive pos x
 
-applyPositive :: (Bits b) => BitTrie a -> b -> a
+applyPositive :: (Bits b, Num b) => BitTrie a -> b -> a
 applyPositive ~(BitTrie one even odd) x
     | x == 1 = one
     | testBit x 0 = applyPositive odd (x `shiftR` 1)
@@ -63,10 +63,10 @@ applyPositive ~(BitTrie one even odd) x
 -- | The identity trie.  
 --
 -- > apply identity = id
-identity :: (Bits a) => IntTrie a
+identity :: (Bits a, Num a) => IntTrie a
 identity = IntTrie (fmap negate identityPositive) 0 identityPositive
 
-identityPositive :: (Bits a) => BitTrie a
+identityPositive :: (Bits a, Num a) => BitTrie a
 identityPositive = go
     where
     go = BitTrie 1 (fmap (`shiftL` 1) go) (fmap (\n -> (n `shiftL` 1) .|. 1) go)
@@ -75,14 +75,14 @@ identityPositive = go
 --
 -- > apply (modify x f t) i | i == x = f (apply t i)
 -- >                        | otherwise = apply t i
-modify :: (Ord b, Bits b) => b -> (a -> a) -> IntTrie a -> IntTrie a
+modify :: (Ord b, Bits b, Num b) => b -> (a -> a) -> IntTrie a -> IntTrie a
 modify x f ~(IntTrie neg z pos) =
     case compare x 0 of
         LT -> IntTrie (modifyPositive (-x) f neg) z pos
         EQ -> IntTrie neg (f z) pos
         GT -> IntTrie neg z (modifyPositive x f pos)
 
-modifyPositive :: (Bits b) => b -> (a -> a) -> BitTrie a -> BitTrie a
+modifyPositive :: (Bits b, Num b) => b -> (a -> a) -> BitTrie a -> BitTrie a
 modifyPositive x f ~(BitTrie one even odd)
     | x == 1      = BitTrie (f one) even odd
     | testBit x 0 = BitTrie one even (modifyPositive (x `shiftR` 1) f odd)
@@ -91,5 +91,5 @@ modifyPositive x f ~(BitTrie one even odd)
 -- | Overwrite the function at one point
 --
 -- > overwrite i x = modify i (const x)
-overwrite :: (Ord b, Bits b) => b -> a -> IntTrie a -> IntTrie a
+overwrite :: (Ord b, Bits b, Num b) => b -> a -> IntTrie a -> IntTrie a
 overwrite i x = modify i (const x)
-- 
1.7.12