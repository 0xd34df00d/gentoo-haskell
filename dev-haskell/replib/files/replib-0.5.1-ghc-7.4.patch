--- RepLib-0.5.1-orig/RepLib.cabal	2011-08-26 03:13:13.000000000 +1000
+++ RepLib-0.5.1/RepLib.cabal	2012-02-06 23:43:35.391335713 +1100
@@ -22,7 +22,7 @@
 
 Library
   build-depends: base >= 4.3 && < 5, 
-                 template-haskell >= 2.4 && < 2.7, 
+                 template-haskell >= 2.4 && < 2.8, 
                  mtl >= 2.0 && < 2.1,
                  type-equality >= 0.1.0.2 && < 0.2,
                  containers >= 0.4 && < 0.5
--- RepLib-0.5.1-orig/Generics/RepLib/Derive.hs	2011-08-26 03:13:13.000000000 +1000
+++ RepLib-0.5.1/Generics/RepLib/Derive.hs	2012-02-06 23:56:05.286921851 +1100
@@ -4,6 +4,7 @@
            , ScopedTypeVariables
            , GADTs
            , GeneralizedNewtypeDeriving
+           , CPP
   #-}
 {-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
 
@@ -43,7 +44,11 @@
 import Control.Monad (replicateM, zipWithM, liftM, liftM2, when)
 import Control.Monad.Writer (WriterT, MonadWriter(..), runWriterT, lift)
 import Control.Arrow ((***), second)
+#if MIN_VERSION_template_haskell(2,7,0)
+import Control.Applicative ((<$>), Applicative)
+#else
 import Control.Applicative ((<$>))
+#endif
 
 import Unsafe.Coerce
 
@@ -80,7 +85,11 @@
 -- while generating constructor representations.
 
 newtype QN a = QN { unQN :: WriterT (S.Set Int) Q a }
+#if MIN_VERSION_template_haskell(2,7,0)
+  deriving (Applicative, Functor, Monad, MonadWriter (S.Set Int))
+#else    
   deriving (Functor, Monad, MonadWriter (S.Set Int))
+#endif
 
 liftQN :: Q a -> QN a
 liftQN = QN . lift
@@ -93,9 +102,17 @@
   qReport b s           = liftQN $ qReport b s
   qRecover              = error "qRecover not implemented for QN"
   qReify n              = liftQN $ qReify n
+#if MIN_VERSION_template_haskell(2,7,0)
+  qReifyInstances n tys = liftQN $ qReifyInstances n tys
+#else
   qClassInstances n tys = liftQN $ qClassInstances n tys
+#endif
   qLocation             = liftQN qLocation
   qRunIO io             = liftQN $ qRunIO io                       
+#if MIN_VERSION_template_haskell(2,7,0)
+  qLookupName ns s      = liftQN $ qLookupName ns s
+  qAddDependentFile fp  = liftQN $ qAddDependentFile fp
+#endif
 
 -- Generate the representation for a data constructor.
 -- As our representation of data constructors evolves, so must this definition.
