--- ltk-0.12.1.0-orig/ltk.cabal	2012-06-05 03:26:42.000000000 +1000
+++ ltk-0.12.1.0/ltk.cabal	2012-12-09 12:43:46.435824328 +1100
@@ -16,8 +16,8 @@
 tested-with: GHC ==6.10 || ==6.12 || ==7.0
 
 Library
-    build-depends: Cabal >=1.6.0 && <1.15, base >=4.0.0.0 && <4.6,
-               containers >=0.2 && <0.5, filepath >=1.1.0 && <1.4,
+    build-depends: Cabal >=1.6.0 && <1.18, base >=4.0.0.0 && <5,
+               containers >=0.2 && <0.6, filepath >=1.1.0 && <1.4,
                glib >=0.10.0 && <0.13, gtk >=0.10.0 && <0.13,
                mtl >=1.1.0.2 && <2.2, parsec >=2.1.0.1 && <3.2,
                pretty >=1.0.1.0 && <1.2, transformers >=0.2.2.0 && <0.4,
--- ltk-0.12.1.0-orig/src/Graphics/UI/Editor/Simple.hs	2012-06-05 03:26:42.000000000 +1000
+++ ltk-0.12.1.0/src/Graphics/UI/Editor/Simple.hs	2012-12-09 00:34:23.871191620 +1100
@@ -63,6 +63,7 @@
 import Graphics.UI.Editor.Basics
        (GUIEvent(..), GUIEventSelector(..), propagateAsChanged,
         genericGUIEvents, activateEvent, Editor)
+import Control.Exception as E (catch, IOException)
 
 -- ------------------------------------------------------------
 -- * Simple Editors
@@ -359,8 +360,8 @@
         s <- ext
         case s of
             Nothing -> return Nothing
-            Just s -> catch (liftM Just (readIO s))
-                            (\e -> do
+            Just s -> E.catch (liftM Just (readIO s))
+                            (\(e :: IOException) -> do
                                 putStrLn ("Generic editor no parse for " ++ s ++ " " ++ show e)
                                 return Nothing)
     return (wid,ginj,gext)
--- ltk-0.12.1.0-orig/src/Text/PrinterParser.hs	2012-06-05 03:26:42.000000000 +1000
+++ ltk-0.12.1.0/src/Text/PrinterParser.hs	2012-12-09 00:34:23.872191645 +1100
@@ -1,4 +1,4 @@
-{-# OPTIONS_GHC -XTypeSynonymInstances -XFlexibleInstances #-}
+{-# LANGUAGE TypeSynonymInstances, FlexibleInstances, ScopedTypeVariables #-}
 --
 -- | Module for saving and restoring preferences and settings
 --
@@ -49,6 +49,7 @@
 import Data.List (foldl')
 import qualified Text.ParserCombinators.Parsec as  P
     ((<?>), CharParser(..), parseFromFile)
+import Control.Exception as E (catch, IOException)
 
 
 type Printer beta       =   beta -> PP.Doc
@@ -227,12 +228,12 @@
     foldl' (\ doc (FDS _ printer _) ->  doc PP.$+$ printer date) PP.empty dateDesc
 
 readFields :: FilePath -> [FieldDescriptionS alpha] -> alpha -> IO alpha
-readFields fn fieldDescrs defaultValue = catch (do
+readFields fn fieldDescrs defaultValue = E.catch (do
     res <- P.parseFromFile (parseFields defaultValue fieldDescrs) fn
     case res of
                 Left pe -> error $ "Error reading file " ++ show fn ++ " " ++ show pe
                 Right r -> return r)
-    (\ e -> error $ "Error reading file " ++ show fn ++ " " ++ show e)
+    (\ (e::IOException) -> error $ "Error reading file " ++ show fn ++ " " ++ show e)
 
 parseFields ::  alpha ->  [FieldDescriptionS alpha] ->  P.CharParser () alpha
 parseFields defaultValue descriptions =
