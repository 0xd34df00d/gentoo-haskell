diff --git a/src/Language/JavaScript/Parser/Lexer.hs b/src/Language/JavaScript/Parser/Lexer.hs
index 79fa9c5..2472f16 100644
--- a/src/Language/JavaScript/Parser/Lexer.hs
+++ b/src/Language/JavaScript/Parser/Lexer.hs
@@ -703,26 +703,29 @@ alex_scan_tkn user orig_input len input s last_acc =
   case alexGetByte input of
      Nothing -> (new_acc, input)
      Just (c, new_input) -> 
-
-
-
-	let
-		(base) = alexIndexInt32OffAddr alex_base s
-		((I# (ord_c))) = fromIntegral c
+	case fromIntegral c of {(I# (ord_c)) ->
+	   let  (base) = alexIndexInt32OffAddr alex_base s
 		(offset) = (base +# ord_c)
 		(check)  = alexIndexInt16OffAddr alex_check offset
-		
+#if MIN_VERSION_base(4,7,0)	
+		(new_s) = case (offset >=# 0#) `orI#` (check ==# ord_c) of
+			  	1# -> alexIndexInt16OffAddr alex_table offset
+			  	0# -> alexIndexInt16OffAddr alex_deflt s
+#else
 		(new_s) = if (offset >=# 0#) && (check ==# ord_c)
 			  then alexIndexInt16OffAddr alex_table offset
 			  else alexIndexInt16OffAddr alex_deflt s
-	in
-	case new_s of 
-	    -1# -> (new_acc, input)
-		-- on an error, we want to keep the input *before* the
-		-- character that failed, not after.
-    	    _ -> alex_scan_tkn user orig_input (if c < 0x80 || c >= 0xC0 then (len +# 1#) else len)
+#endif			
+
+	   in
+    	    case new_s of 
+	       -1# -> (new_acc, input)
+	   	   -- on an error, we want to keep the input *before* the
+  		   -- character that failed, not after.
+    	       _ -> alex_scan_tkn user orig_input (if c < 0x80 || c >= 0xC0 then (len +# 1#) else len)
                                                 -- note that the length is increased ONLY if this is the 1st byte in a char encoding)
 			new_input new_s new_acc
+	}
 
   where
 	check_accs [] = last_acc
