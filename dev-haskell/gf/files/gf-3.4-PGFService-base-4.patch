Sun Mar 10 00:38:14 FET 2013  Sergei Trofimovich <slyfox@community.haskell.org>
  * ghc-7.6: fix src/server/PGFService.hs (use catch from base-4 Control.Exception)
diff -rN -u old-GF/src/server/PGFService.hs new-GF/src/server/PGFService.hs
--- old-GF/src/server/PGFService.hs	2013-03-10 00:43:29.706644703 +0300
+++ new-GF/src/server/PGFService.hs	2013-03-10 00:43:31.846644812 +0300
@@ -16,7 +16,7 @@
 import qualified Data.ByteString.Lazy as BS
 
 import Control.Concurrent
-import Control.Exception(evaluate)
+import qualified Control.Exception as E
 import Control.Monad
 import Control.Monad.State(State,evalState,get,put)
 import Data.Char
@@ -31,6 +31,9 @@
 import System.Directory(removeFile)
 import Fold(fold) -- transfer function for OpenMath LaTeX
 
+catchIOE :: IO a -> (E.IOException -> IO a) -> IO a
+catchIOE = E.catch
+
 logFile :: FilePath
 logFile = "pgf-error.log"
 
@@ -154,7 +157,7 @@
 doExternal (Just cmd) input =
   do liftIO $ logError ("External command: "++cmd)
      cmds <- liftIO $ (fmap lines $ readFile "external_services")
-                        `catch` const (return [])
+                        `catchIOE` const (return [])
      liftIO $ logError ("External services: "++show cmds)
      if cmd `elem` cmds then ok else err
   where
@@ -357,7 +360,7 @@
     -- fork off a thread to start consuming the output
     output  <- BS.hGetContents outh
     outMVar <- newEmptyMVar
-    _ <- forkIO $ evaluate (BS.length output) >> putMVar outMVar ()
+    _ <- forkIO $ E.evaluate (BS.length output) >> putMVar outMVar ()
 
     -- now write and flush any input
     hPutStr inh code
