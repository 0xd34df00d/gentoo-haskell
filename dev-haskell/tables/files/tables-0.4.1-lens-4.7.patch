diff --git a/src/Data/Table.hs b/src/Data/Table.hs
index 0356a0c..0110050 100644
--- a/src/Data/Table.hs
+++ b/src/Data/Table.hs
@@ -575,17 +575,17 @@ instance Applicative f => Group f (Key SupplementalHash t a) t a where
     SupplementalHashMap idx -> traverse (\(k,vs) -> indexed f k (fromList vs)) (HM.toList idx) <&> mconcat
   {-# INLINE group #-}
 
-instance (Applicative f, Gettable f) => Group f (Key Inverted t (Set a)) t a where
+instance (Applicative f, Contravariant f, Functor f) => Group f (Key Inverted t (Set a)) t a where
   group _  _ EmptyTable = pure EmptyTable
   group ky f (Table m)  = case ixTab m ky of
     InvertedMap idx -> coerce $ traverse (\(k,vs) -> indexed f k (fromList vs)) $ M.toList idx
 
-instance (Applicative f, Gettable f, a ~ Int) => Group f (Key InvertedInt t IntSet) t a where
+instance (Applicative f, Contravariant f, Functor f, a ~ Int) => Group f (Key InvertedInt t IntSet) t a where
   group _  _ EmptyTable = pure EmptyTable
   group ky f (Table m)  = case ixTab m ky of
     InvertedIntMap idx -> coerce $ traverse (\(k,vs) -> indexed f k (fromList vs)) $ IM.toList idx
 
-instance (Applicative f, Gettable f) => Group f (Key InvertedHash t (HashSet a)) t a where
+instance (Applicative f, Contravariant f, Functor f) => Group f (Key InvertedHash t (HashSet a)) t a where
   group _  _ EmptyTable = pure EmptyTable
   group ky f (Table m)  = case ixTab m ky of
     InvertedHashMap idx -> coerce $ traverse (\(k,vs) -> indexed f k (fromList vs)) $ HM.toList idx
