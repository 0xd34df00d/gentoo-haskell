diff --git a/src/Diagrams/Backend/Cairo/CmdLine.hs b/src/Diagrams/Backend/Cairo/CmdLine.hs
index 832ef84..e0bc114 100644
--- a/src/Diagrams/Backend/Cairo/CmdLine.hs
+++ b/src/Diagrams/Backend/Cairo/CmdLine.hs
@@ -33,6 +33,7 @@ import System.Console.CmdArgs.Implicit hiding (args)
 import Prelude hiding      (catch)
 
 import Data.Maybe          (fromMaybe)
+import Data.Time.Clock     (UTCTime, getCurrentTime)
 import Control.Monad       (when, forM_)
 import Data.List.Split
 
@@ -45,7 +46,6 @@ import System.Process      (runProcess, waitForProcess)
 import System.IO           (openFile, hClose, IOMode(..),
                             hSetBuffering, BufferMode(..), stdout)
 import System.Exit         (ExitCode(..))
-import System.Time         (ClockTime, getClockTime)
 import Control.Concurrent  (threadDelay)
 import Control.Exception   (catch, SomeException(..), bracket)
 
@@ -202,7 +202,7 @@ indexize nDigits i opts = opts { output = output' }
         (base, ext) = splitExtension (output opts)
 
 #ifdef CMDLINELOOP
-waitForChange :: Maybe ClockTime -> DiagramOpts -> String -> [String] -> IO ()
+waitForChange :: Maybe UTCTime -> DiagramOpts -> String -> [String] -> IO ()
 waitForChange lastAttempt opts prog args = do
     hSetBuffering stdout NoBuffering
     go lastAttempt
@@ -222,7 +222,7 @@ waitForChange lastAttempt opts prog args = do
 --   of this attempt.  Otherwise (if nothing has changed since the
 --   last attempt), return @Nothing@.  Also return a Bool saying
 --   whether a successful recompilation happened.
-recompile :: Maybe ClockTime -> String -> Maybe String -> IO (Bool, Maybe ClockTime)
+recompile :: Maybe UTCTime -> String -> Maybe String -> IO (Bool, Maybe UTCTime)
 recompile lastAttempt prog mSrc = do
   let errFile = prog ++ ".errors"
       srcFile = fromMaybe (prog ++ ".hs") mSrc
@@ -239,7 +239,7 @@ recompile lastAttempt prog mSrc = do
         then putStrLn "" >> putStrLn (replicate 75 '-') >> readFile errFile >>= putStr
         else putStrLn "done."
 
-      curTime <- getClockTime
+      curTime <- getCurrentTime
       return (status == ExitSuccess, Just curTime)
 
     else return (False, Nothing)
