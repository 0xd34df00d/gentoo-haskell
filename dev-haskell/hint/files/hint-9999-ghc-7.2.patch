--- hint-9999-orig/hint.cabal	2011-09-10 00:37:19.550021447 +1000
+++ hint-9999/hint.cabal	2011-09-10 00:31:47.445988962 +1000
@@ -56,7 +56,7 @@
   }
 
   if !os(windows) {
-      build-depends:    unix >= 2.2.0.0 && < 2.5
+      build-depends:    unix >= 2.2.0.0 && < 2.6
   }
 
   exposed-modules:    Language.Haskell.Interpreter
--- hint-9999-orig/src/Hint/Parsers.hs	2011-09-10 00:31:47.159981185 +1000
+++ hint-9999/src/Hint/Parsers.hs	2011-09-10 00:28:04.937941295 +1000
@@ -11,6 +11,11 @@
 
 import qualified Hint.GHC as GHC
 
+#if __GLASGOW_HASKELL__ >= 702       
+import qualified SrcLoc
+import qualified FastString
+#endif
+
 data ParseResult = ParseOk | ParseError GHC.SrcSpan GHC.Message
 
 parseExpr :: MonadInterpreter m => String -> m ParseResult
@@ -19,13 +24,26 @@
 parseType :: MonadInterpreter m => String -> m ParseResult
 parseType = runParser GHC.parseType
 
+#if __GLASGOW_HASKELL__ >= 702       
+runParser :: MonadInterpreter m => GHC.P a -> String -> m ParseResult
+#else
 runParser :: MonadInterpreter m => GHC.P a -> String -> m ParseResult
+#endif
 runParser parser expr =
     do dyn_fl <- runGhc GHC.getSessionDynFlags
        --
+#if __GLASGOW_HASKELL__ >= 702       
+       let buf = GHC.stringToStringBuffer expr
+#else
        buf <- liftIO $ GHC.stringToStringBuffer expr
+#endif
        --
+#if __GLASGOW_HASKELL__ >= 702
+       let srcLoc = SrcLoc.mkRealSrcLoc (FastString.mkFastString "<no location info>") 0 0
+       let parse_res = GHC.unP parser (Compat.mkPState dyn_fl buf srcLoc)
+#else
        let parse_res = GHC.unP parser (Compat.mkPState dyn_fl buf GHC.noSrcLoc)
+#endif
        --
        case parse_res of
            GHC.POk{}            -> return ParseOk
--- hint-9999-orig/src/Hint/Context.hs	2011-09-10 00:31:47.157981131 +1000
+++ hint-9999/src/Hint/Context.hs	2011-09-09 23:24:38.814547881 +1000
@@ -230,7 +230,11 @@
     do let (q,     u) = Util.partition (isJust . snd) ms
            (quals, unquals) = (map (\(a, Just b) -> (a,b)) q, map fst u)
        --
+#if __GLASGOW_HASKELL__ >= 702       
+       let unqual_mods = map (GHC.simpleImportDecl . GHC.mkModuleName) unquals
+#else
        unqual_mods <- mapM findModule unquals
+#endif
        mapM_ (findModule . fst) quals -- just to be sure they exist
        --
        old_qual_hack_mod <- fromState import_qual_hack_mod
--- hint-9999-orig/src/Hint/Conversions.hs	2011-09-10 00:31:47.157981131 +1000
+++ hint-9999/src/Hint/Conversions.hs	2011-09-10 00:45:47.487862783 +1000
@@ -10,6 +10,11 @@
 import Language.Haskell.Syntax ( HsModule(..), HsDecl(..), HsQualType )
 import Language.Haskell.Parser ( parseModule, ParseResult(ParseOk) )
 
+#if __GLASGOW_HASKELL__ >= 702      
+import qualified SrcLoc
+import qualified HsImpExp
+#endif
+
 -- | Conversions from GHC representation to standard representations
 class FromGhcRep ghc target where
     fromGhcRep :: MonadInterpreter m => ghc -> m target
@@ -53,6 +58,11 @@
 instance FromGhcRep_ GHC.Module String where
     fromGhcRep_ = GHC.moduleNameString . GHC.moduleName
 
+#if __GLASGOW_HASKELL__ >= 702      
+instance FromGhcRep_ (GHC.ImportDecl GHC.RdrName) ModuleName where
+    fromGhcRep_ = GHC.moduleNameString . SrcLoc.unLoc . HsImpExp.ideclName
+#endif
+
 -- ---------------- Misc -----------------------------
 
 isSucceeded :: GHC.SuccessFlag -> Bool
--- hint-9999-orig/src/Hint/Compat.hs	2011-09-10 00:31:47.155981077 +1000
+++ hint-9999/src/Hint/Compat.hs	2011-09-09 21:20:01.734112155 +1000
@@ -6,11 +6,24 @@
 
 import qualified Hint.GHC as GHC
 
+#if __GLASGOW_HASKELL__ >= 702
+import qualified Outputable
+#endif
+
 -- Kinds became a synonym for Type in GHC 6.8. We define this wrapper
 -- to be able to define a FromGhcRep instance for both versions
 newtype Kind = Kind GHC.Kind
 
-#if __GLASGOW_HASKELL__ >= 700
+#if __GLASGOW_HASKELL__ >= 702
+supportedLanguages = GHC.supportedLanguagesAndExtensions
+
+setContext = GHC.setContext
+
+getContext = GHC.getContext
+
+mkPState = GHC.mkPState
+    
+#elif __GLASGOW_HASKELL__ >= 700
 -- supportedLanguages :: [String]
 supportedLanguages = GHC.supportedLanguagesAndExtensions
 
@@ -110,6 +123,14 @@
                                   GHC.ghcLink    = GHC.LinkInMemory}
 #endif
 
+#if __GLASGOW_HASKELL__ >= 702
+pprType :: GHC.Type -> Outputable.SDoc
+pprType = GHC.pprTypeForUser False -- False means drop explicit foralls
+
+pprKind :: GHC.Kind -> Outputable.SDoc
+pprKind = pprType
+
+#else
   -- 6.08 and above
 pprType :: GHC.Type -> (GHC.PprStyle -> GHC.Doc)
 pprType = GHC.pprTypeForUser False -- False means drop explicit foralls
@@ -117,6 +138,7 @@
 pprKind :: GHC.Kind -> (GHC.PprStyle -> GHC.Doc)
 pprKind = pprType
 
+#endif
 #elif __GLASGOW_HASKELL__ >= 606
   -- 6.6 only
 
