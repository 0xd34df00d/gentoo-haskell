--- git-annex-3.20111122-orig/git-annex.cabal	2011-11-23 06:21:05.000000000 +1100
+++ git-annex-3.20111122/git-annex.cabal	2011-11-26 22:29:39.854796641 +1100
@@ -28,7 +28,7 @@
 
 Executable git-annex
   Main-Is: git-annex.hs
-  Build-Depends: haskell98, MissingH, hslogger, directory, filepath,
+  Build-Depends: MissingH, hslogger, directory, filepath,
    unix, containers, utf8-string, network, mtl, bytestring, old-locale, time,
    pcre-light, extensible-exceptions, dataenc, SHA, process, hS3, HTTP,
    base < 5, monad-control, json
--- git-annex-3.20111122-orig/Logs/Location.hs	2011-11-23 06:21:05.000000000 +1100
+++ git-annex-3.20111122/Logs/Location.hs	2011-11-26 22:52:09.764160928 +1100
@@ -1,3 +1,5 @@
+{-# LANGUAGE BangPatterns #-}
+
 {- git-annex location log
  -
  - git-annex keeps track of which repositories have the contents of annexed
--- git-annex-3.20111122-orig/Utility/TempFile.hs	2011-11-23 06:21:05.000000000 +1100
+++ git-annex-3.20111122/Utility/TempFile.hs	2011-11-26 22:50:52.431098331 +1100
@@ -7,7 +7,7 @@
 
 module Utility.TempFile where
 
-import IO (bracket)
+import Control.Exception (bracket)
 import System.IO
 import System.Posix.Process hiding (executeFile)
 import System.Directory
--- git-annex-3.20111122-orig/Locations.hs	2011-11-23 06:21:05.000000000 +1100
+++ git-annex-3.20111122/Locations.hs	2011-11-26 22:50:39.742759848 +1100
@@ -26,8 +26,8 @@
 	prop_idempotent_fileKey
 ) where
 
-import Bits
-import Word
+import Data.Bits
+import Data.Word
 import Data.Hash.MD5
 
 import Common
--- git-annex-3.20111122-orig/Git.hs	2011-11-23 06:21:05.000000000 +1100
+++ git-annex-3.20111122/Git.hs	2011-11-26 23:31:20.003956386 +1100
@@ -72,7 +72,7 @@
 
 import System.Posix.Directory
 import System.Posix.User
-import IO (bracket_, try)
+import Control.Exception (bracket_, try)
 import qualified Data.Map as M hiding (map, split)
 import Network.URI
 import Data.Char
@@ -438,7 +438,7 @@
  - index file. -}
 useIndex :: FilePath -> IO (IO ())
 useIndex index = do
-	res <- try $ getEnv var
+	res <- (try :: IO (Maybe String) -> IO (Either IOException (Maybe String))) $ getEnv var
 	setEnv var index True
 	return $ reset res
 	where
@@ -485,7 +485,7 @@
 	   been already read. Instead, chdir to the repo. -}
 	cwd <- getCurrentDirectory
 	bracket_ (changeWorkingDirectory d)
-		(\_ -> changeWorkingDirectory cwd) $
+		(changeWorkingDirectory cwd) $
 			pOpen ReadFromPipe "git" ["config", "--list"] $
 				hConfigRead repo
 configRead r = assertLocal r $ error "internal"
