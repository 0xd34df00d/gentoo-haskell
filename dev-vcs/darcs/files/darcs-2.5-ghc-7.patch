--- darcs-2.5-orig/Distribution/ShellHarness.hs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/Distribution/ShellHarness.hs	2011-02-06 00:48:56.785259643 +1100
@@ -3,6 +3,7 @@
 
 import Prelude hiding( catch )
 import System.Directory ( getCurrentDirectory, setPermissions,
+                          emptyPermissions,
                           Permissions(..), getDirectoryContents,
                           findExecutable, createDirectoryIfMissing,
                           renameFile, removeFile )
@@ -10,7 +11,7 @@
 import System.Exit ( ExitCode (..) )
 import System.FilePath
 import System.IO
-import System( system )
+import System.Cmd( system )
 import System.Process ( ProcessHandle,
                         runInteractiveProcess, waitForProcess,
                         getProcessExitCode )
@@ -111,7 +112,7 @@
                  forM tixfiles $ \f -> removeFile f
                  return ()
              mapM_ (\x->
-                  setPermissions x (Permissions
+                  setPermissions x (emptyPermissions
                                    {readable = True
                                    ,writable = True
                                    ,executable = False
--- darcs-2.5-orig/src/Darcs/Commands/Changes.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/Changes.lhs	2011-02-06 00:48:56.786351069 +1100
@@ -120,7 +120,10 @@
   Sealed unrec <- if null files then return (Sealed identity)
                   else Sealed `fmap` unrecordedChanges opts repository files
                   `catch` \_ -> return (Sealed identity) -- this is triggered when repository is remote
-  let filez = map (fn2fp . normPath . fp2fn) $ applyToFilepaths (invert unrec) $ map toFilePath files
+  let filez :: [FilePath]
+      filez = map (fn2fp . normPath . fp2fn) $ applyToFilepaths (invert unrec) $ map toFilePath files
+      filtered_changes :: (RepoPatch p) => PatchSet p ->
+          ([(Sealed2 (PatchInfoAnd p), [FilePath])], [FilePath], Doc)
       filtered_changes p = maybe_reverse $ getChangesInfo opts filez p
   debugMessage "About to read the repository..."
   patches <- readRepo repository
@@ -136,7 +139,8 @@
             ps <- readRepo repository -- read repo again to prevent holding onto
                                        -- values forced by filtered_changes
             putDocLnWith printers $ changelog opts ps $ filtered_changes patches
-  where maybe_reverse (xs,b,c) = if doReverse opts
+  where maybe_reverse :: ([a],b,c) -> ([a],b,c)
+        maybe_reverse (xs,b,c) = if doReverse opts
                                  then (reverse xs, b, c)
                                  else (xs, b, c)
 
--- darcs-2.5-orig/src/Darcs/Commands/Convert.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/Convert.lhs	2011-02-06 00:48:56.787348747 +1100
@@ -223,7 +223,8 @@
 
       optimizeInventory repository
       putInfo opts $ text "Finished converting."
-      where revertable x = x `clarifyErrors` unlines
+      where revertable :: IO a -> IO a
+            revertable x = x `clarifyErrors` unlines
                   ["An error may have left your new working directory an inconsistent",
                    "but recoverable state. You should be able to make the new",
                    "repository consistent again by running darcs revert -a."]
--- darcs-2.5-orig/src/Darcs/Commands/Get.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/Get.lhs	2011-02-06 00:48:56.788341019 +1100
@@ -192,9 +192,12 @@
                                    (putInfo opts $ text "Using lazy repository."))
   withRepository opts $- \repository -> goToChosenVersion repository opts
   putInfo opts $ text "Finished getting."
-      where copyRepo =
+      where copyRepo :: IO ()
+            copyRepo =
                 withRepository opts $- \repository -> do
-                  let hashUs   = formatHas HashedInventory rf
+                  let hashUs :: Bool
+                      hashUs   = formatHas HashedInventory rf
+                      hashThem :: Bool
                       hashThem = formatHas HashedInventory rfsource
                   case () of _ | hashUs && hashThem -> do
                                    debugMessage "Identifying and copying repository..."
@@ -210,6 +213,7 @@
                                    putInfo opts $ text "Fetching a hashed repository as an old-fashioned one..."
                                    copyRepoHashed repository
                                | otherwise -> copyRepoOldFashioned repository opts repodir
+            copyRepoHashed :: (RepoPatch p) => Repository p -> IO ()
             copyRepoHashed repository =
               do identifyRepositoryFor repository repodir >>= copyRepository
                  when (SetScriptsExecutable `elem` opts) setScriptsExecutable
--- darcs-2.5-orig/src/Darcs/Commands/Record.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/Record.lhs	2011-02-06 00:48:56.789259265 +1100
@@ -333,6 +333,7 @@
                            (n:ls) -> return (n, takeWhile
                                              (not.(eod `isPrefixOf`)) ls,
                                              Just f)
+          append_info :: (FilePathLike a) => a -> String -> IO ()
           append_info f oldname =
               do fc <- readLocaleFile f
                  appendToFile f $ \h ->
--- darcs-2.5-orig/src/Darcs/Commands/Send.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/Send.lhs	2011-02-06 00:48:56.789259265 +1100
@@ -160,7 +160,8 @@
              putStrLn $ "Creating patch to "++formatPath repodir++"..."
         wtds <- decideOnBehavior input_opts repo
         sendToThem repository input_opts wtds repodir them
-    where the_context [] = return Nothing
+    where the_context :: (RepoPatch p) => [DarcsFlag] -> IO (Maybe (PatchSet p))
+          the_context [] = return Nothing
           the_context (Context foo:_)
               = (Just . scanContext )`fmap` mmapFilePS (toFilePath foo)
           the_context (_:fs) = the_context fs
--- darcs-2.5-orig/src/Darcs/Commands/ShowTags.lhs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Commands/ShowTags.lhs	2011-02-06 00:48:56.790333771 +1100
@@ -20,7 +20,7 @@
 module Darcs.Commands.ShowTags ( showTags ) where
 import Darcs.Arguments ( DarcsFlag(..), workingRepoDir )
 import Darcs.Commands ( DarcsCommand(..), nodefaults )
-import Darcs.Hopefully ( info )
+import Darcs.Hopefully ( info, PatchInfoAnd )
 import Darcs.Repository ( amInRepository, readRepo, withRepository, ($-) )
 import Darcs.Patch.Info ( piTag )
 import Darcs.Patch.Set ( newset2RL )
@@ -58,7 +58,8 @@
 tagsCmd opts _ = withRepository opts $- \repository -> do
   patches <- readRepo repository
   sequence_ $ mapRL process $ newset2RL patches
-  where process hp =
+  where process :: PatchInfoAnd p -> IO ()
+        process hp =
             case piTag $ info hp of
               Just t -> do
                  t' <- normalize t t False
--- darcs-2.5-orig/src/Darcs/Patch/Set.hs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Patch/Set.hs	2011-02-06 00:48:56.791344526 +1100
@@ -52,7 +52,8 @@
 
 progressPatchSet :: String -> PatchSet p C(start x7) -> PatchSet p C(start x7)
 progressPatchSet k (PatchSet ps0 ts0) = PatchSet (mapRL_RL prog ps0) $ mapRL_RL pts ts0
-    where prog = progress k
+    where prog :: a -> a
+          prog = progress k
           pts :: Tagged p C(x8 y) -> Tagged p C(x8 y)
           pts (Tagged t h ps) = Tagged (prog t) h (mapRL_RL prog ps)
 
--- darcs-2.5-orig/src/Darcs/Population.hs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/Darcs/Population.hs	2011-02-06 00:48:56.791344526 +1100
@@ -87,7 +87,8 @@
 getRepoPopVersion repobasedir pinfo = withRepositoryDirectory [] repobasedir $- \repository ->
    do pips <- newset2RL `liftM` readRepo repository
       return $ (unseal applyPatchSetPop) (mkPatchSet $ dropWhileRL ((/=pinfo).info) pips) initPop
-             where mkPatchSet (Sealed xs) = seal $ PatchSet xs NilRL
+             where mkPatchSet :: Sealed (RL (PatchInfoAnd a)) -> Sealed (PatchSet a)
+                   mkPatchSet (Sealed xs) = seal $ PatchSet xs NilRL
                    dropWhileRL :: (FORALL(x y) a C(x y) -> Bool) -> RL a C(r v) -> Sealed (RL a C(r))
                    dropWhileRL _ NilRL = seal NilRL
                    dropWhileRL p xs@(x:<:xs')
--- darcs-2.5-orig/src/DateMatcher.hs	2010-10-25 02:29:26.000000000 +1100
+++ darcs-2.5/src/DateMatcher.hs	2011-02-06 00:48:56.792446583 +1100
@@ -33,7 +33,7 @@
                  MCalendarTime(..), toMCalendarTime, unsafeToCalendarTime,
                  unsetTime,
                )
-import Text.ParserCombinators.Parsec ( eof, parse, ParseError )
+import Text.ParserCombinators.Parsec ( eof, parse, ParseError, Parser )
 
 -- | 'withinDay' @x y@ is true if @x <= y < (x + one_day)@
 -- Note that this converts the two dates to @ClockTime@ to avoid
@@ -153,7 +153,9 @@
                 (parseDate tzNow d)
                 samePartialDate ]
  where
+   tillEof :: Parser a -> Parser a
    tillEof p = do { x <- p; eof; return x }
+   parseDateWith :: Parser a -> Either ParseError a
    parseDateWith p = parse (tillEof p) "" d
 
 -- | 'tryMatchers' @ms@ returns the first successful match in @ms@
