From 7a99d39068bcc90d927d74786dd4651578f8fe83 Mon Sep 17 00:00:00 2001
From: Sergei Trofimovich <slyfox@gentoo.org>
Date: Tue, 20 Nov 2012 11:01:21 +0300
Subject: [PATCH] ghc-7.6 basic compatibility

- Import CInt / CLong cuntructors for FFI
- Switch from System.IO.Error.catch to Darcs.Utils.catchIOError

Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
---
 src/ByteStringUtils.hs              |  2 +-
 src/Darcs/ColorPrinter.hs           |  5 +++--
 src/Darcs/Commands/Add.hs           |  4 ++--
 src/Darcs/Commands/Changes.hs       |  3 ++-
 src/Darcs/Commands/Check.hs         |  3 ++-
 src/Darcs/Commands/Get.hs           |  3 ++-
 src/Darcs/Commands/MarkConflicts.hs |  6 +++---
 src/Darcs/Commands/Record.hs        |  4 ++--
 src/Darcs/Commands/Replace.hs       |  7 ++++---
 src/Darcs/Commands/Revert.hs        |  4 ++--
 src/Darcs/Commands/Rollback.hs      |  4 ++--
 src/Darcs/Commands/Send.hs          |  8 ++++----
 src/Darcs/Commands/ShowAuthors.hs   |  3 ++-
 src/Darcs/Commands/TrackDown.hs     |  5 +++--
 src/Darcs/Commands/Unrecord.hs      |  3 ++-
 src/Darcs/Commands/Unrevert.hs      |  4 ++--
 src/Darcs/Compat.hs                 |  2 +-
 src/Darcs/External.hs               | 16 ++++++++--------
 src/Darcs/MonadProgress.hs          |  3 ++-
 src/Darcs/Repository.hs             |  4 ++--
 src/Darcs/Repository/HashedRepo.hs  |  7 ++++---
 src/Darcs/Repository/Internal.hs    |  5 +++--
 src/Darcs/Repository/Old.hs         |  7 ++++---
 src/Darcs/Repository/Prefs.hs       |  4 ++--
 src/Darcs/Repository/Repair.hs      |  4 ++--
 src/Darcs/Repository/State.hs       |  4 ++--
 src/Darcs/Utils.hs                  |  5 ++++-
 src/URL/Curl.hs                     |  2 +-
 28 files changed, 73 insertions(+), 58 deletions(-)

diff --git a/src/ByteStringUtils.hs b/src/ByteStringUtils.hs
index 6999312..670b50b 100644
--- a/src/ByteStringUtils.hs
+++ b/src/ByteStringUtils.hs
@@ -78,7 +78,7 @@ import System.Console.Haskeline.Encoding ( decode, encode )
 
 import Foreign.Storable         ( peekElemOff, peek )
 import Foreign.Marshal.Array    ( advancePtr )
-import Foreign.C.Types          ( CInt )
+import Foreign.C.Types
 
 import Data.Bits                ( rotateL )
 import Data.Char                ( ord, isSpace )
diff --git a/src/Darcs/ColorPrinter.hs b/src/Darcs/ColorPrinter.hs
index a1c3f16..b6bcb50 100644
--- a/src/Darcs/ColorPrinter.hs
+++ b/src/Darcs/ColorPrinter.hs
@@ -4,6 +4,7 @@ module Darcs.ColorPrinter ( errorDoc, traceDoc, assertDoc, fancyPrinters ) where
 import Debug.Trace ( trace )
 import System.IO ( stderr )
 import Darcs.External (getTermNColors)
+import Darcs.Utils (catchIOError)
 import Printer (Printer, Printers, Printers'(..), Printable(..), Color(..),
                 invisiblePrinter, (<>), (<?>), Doc(Doc,unDoc), unsafeBothText, simplePrinter, hcat,
                 unsafeText, unsafePackedString,
@@ -93,8 +94,8 @@ getPolicy handle = unsafePerformIO $
                   }
  where
   getEnvBool s = safeGetEnv s >>= return.(/= "0")
-  safeGetEnv s = getEnv s `catch` \_ -> return "0"
-  getEnvString s = getEnv s `catch` \_ -> return ""
+  safeGetEnv s = getEnv s `catchIOError` \_ -> return "0"
+  getEnvString s = getEnv s `catchIOError` \_ -> return ""
 
 
 -- printers
diff --git a/src/Darcs/Commands/Add.hs b/src/Darcs/Commands/Add.hs
index a4af71b..4e32945 100644
--- a/src/Darcs/Commands/Add.hs
+++ b/src/Darcs/Commands/Add.hs
@@ -60,7 +60,7 @@ import Darcs.RepoPath ( SubPath, toFilePath, simpleSubPath, toPath )
 import Darcs.Repository.State ( readRecordedAndPending )
 import Darcs.Repository ( amInHashedRepository, withRepoLock, RepoJob(..), addToPending )
 import Darcs.Repository.Prefs ( darcsdirFilter, boringFileFilter )
-import Darcs.Utils ( treeHas, treeHasDir, treeHasAnycase, getFileStatus, withCurrentDirectory, nubsort )
+import Darcs.Utils ( treeHas, treeHasDir, treeHasAnycase, getFileStatus, withCurrentDirectory, nubsort, catchIOError )
 import Darcs.Witnesses.Ordered ( FL(..), (+>+), nullFL )
 import Darcs.Witnesses.Sealed ( Sealed(..), Gap(..), FreeLeft, unFreeLeft )
 
@@ -269,7 +269,7 @@ addp msgs opts cur0 files = do
                             "' ... couldn't add parent directory '" ++
                             parentdir ++ "' to repository"
                     return (cur, Nothing, Nothing)
-              `catch` \e -> do
+              `catchIOError` \e -> do
                   putWarning opts . text $
                       msgSkipping msgs ++ " '" ++ f ++ "' ... " ++ show e
                   return (cur, Nothing, Nothing)
diff --git a/src/Darcs/Commands/Changes.hs b/src/Darcs/Commands/Changes.hs
index c0fd590..24916e1 100644
--- a/src/Darcs/Commands/Changes.hs
+++ b/src/Darcs/Commands/Changes.hs
@@ -58,6 +58,7 @@ import Darcs.Patch.TouchesFiles ( lookTouch )
 import Darcs.Patch.Apply( ApplyState )
 import Darcs.Patch ( RepoPatch, invert, xmlSummary, description,
                      effectOnFilePaths, listTouchedFiles, effect )
+import Darcs.Utils ( catchIOError )
 import Darcs.Witnesses.Eq ( EqCheck(..) )
 import Darcs.Witnesses.Ordered ( FL(NilFL), RL(..), filterFLFL, filterRL,
                                  reverseFL, (:>)(..), mapRL )
@@ -126,7 +127,7 @@ showChanges opts files =
   Sealed unrec <- case files of
     Nothing -> return $ Sealed NilFL
     Just _ -> Sealed `fmap` unrecordedChanges (UseIndex, ScanKnown) repository files
-                  `catch` \_ -> return (Sealed NilFL) -- this is triggered when repository is remote
+                  `catchIOError` \_ -> return (Sealed NilFL) -- this is triggered when repository is remote
   let normfp = fn2fp . normPath . fp2fn
       undoUnrecordedOnFPs = effectOnFilePaths (invert unrec)
       recFiles = map normfp . undoUnrecordedOnFPs . map toFilePath <$> files
diff --git a/src/Darcs/Commands/Check.hs b/src/Darcs/Commands/Check.hs
index f1161e8..dd95fd2 100644
--- a/src/Darcs/Commands/Check.hs
+++ b/src/Darcs/Commands/Check.hs
@@ -35,6 +35,7 @@ import Darcs.Repository ( Repository, amInHashedRepository, withRepository,
                           withRepoLock, replacePristine, writePatchSet )
 import Darcs.Patch ( RepoPatch, showPatch, PrimOf )
 import Darcs.Patch.Apply( ApplyState )
+import Darcs.Utils ( catchIOError )
 import Darcs.Witnesses.Ordered ( FL(..) )
 import Darcs.Witnesses.Sealed ( Sealed(..), unFreeLeft )
 import Darcs.Repository.Prefs ( filetypeFunction )
@@ -105,7 +106,7 @@ check' opts repository = do
    where
      brokenPristine newpris = do
          putInfo opts $ text "Looks like we have a difference..."
-         mc' <- (fmap Just $ readRecorded repository) `catch` (\_ -> return Nothing)
+         mc' <- (fmap Just $ readRecorded repository) `catchIOError` (\_ -> return Nothing)
          case mc' of
            Nothing -> do putInfo opts $ text "cannot compute that difference, try repair"
                          putInfo opts $ text "" $$ text "Inconsistent repository"
diff --git a/src/Darcs/Commands/Get.hs b/src/Darcs/Commands/Get.hs
index 358b61a..ccf60a7 100644
--- a/src/Darcs/Commands/Get.hs
+++ b/src/Darcs/Commands/Get.hs
@@ -49,6 +49,7 @@ import Darcs.Patch.Depends ( findCommonWithThem, countUsThem )
 import Darcs.Repository.Prefs ( setDefaultrepo )
 import Darcs.Repository.Motd ( showMotd )
 import Darcs.Match ( havePatchsetMatch, getOnePatchset )
+import Darcs.Utils ( catchIOError )
 import Progress ( debugMessage )
 import Printer ( text, errorDoc, ($$) )
 import Darcs.Lock ( writeBinFile )
@@ -259,7 +260,7 @@ goToChosenVersion repository opts =
            do _ <- tentativelyRemovePatches repository (compression opts) us'
               tentativelyAddToPending repository opts $ invert $ effect us'
               finalizeRepositoryChanges repository
-              apply (invert $ effect ps) `catch` \e ->
+              apply (invert $ effect ps) `catchIOError` \e ->
                   fail ("Couldn't undo patch in working dir.\n" ++ show e)
               makeScriptsExecutable opts (invert $ effect ps)
 
diff --git a/src/Darcs/Commands/MarkConflicts.hs b/src/Darcs/Commands/MarkConflicts.hs
index bbc0b07..3bc6aea 100644
--- a/src/Darcs/Commands/MarkConflicts.hs
+++ b/src/Darcs/Commands/MarkConflicts.hs
@@ -33,7 +33,7 @@ import Darcs.Patch ( invert, PrimOf )
 import Darcs.Witnesses.Ordered ( FL(..) )
 import Darcs.Witnesses.Sealed ( Sealed(Sealed) )
 import Darcs.Resolution ( patchsetConflictResolutions )
-import Darcs.Utils ( promptYorn )
+import Darcs.Utils ( promptYorn, catchIOError )
 #include "impossible.h"
 #include "gadts.h"
 
@@ -96,12 +96,12 @@ markconflictsCmd opts [] = withRepoLock opts $ RepoJob $ \(repository :: Reposit
                           " in the working directory.")
                  confirmed <- promptYorn "Are you sure? "
                  unless confirmed $ exitWith ExitSuccess
-                 applyToWorking repository opts (invert pend') `catch` \e ->
+                 applyToWorking repository opts (invert pend') `catchIOError` \e ->
                     bug ("Can't undo pending changes!" ++ show e)
   repository' <- undoUnrec pend
   withSignalsBlocked $
     do addToPending repository' res
-       _ <- applyToWorking repository' opts res `catch` \e ->
+       _ <- applyToWorking repository' opts res `catchIOError` \e ->
            bug ("Problem marking conflicts in mark-conflicts!" ++ show e)
        return ()
   putStrLn "Finished marking conflicts."
diff --git a/src/Darcs/Commands/Record.hs b/src/Darcs/Commands/Record.hs
index f5ee4d7..8d2fb6f 100644
--- a/src/Darcs/Commands/Record.hs
+++ b/src/Darcs/Commands/Record.hs
@@ -72,7 +72,7 @@ import Darcs.Arguments ( DarcsFlag( PromptLongComment, NoEditLongComment,
                          setScriptsExecutableOption
                          , unified )
 import Darcs.Flags (willRemoveLogFile, diffingOpts, compression, isInteractive)
-import Darcs.Utils ( askUser, promptYorn, PromptConfig(..), promptChar, editFile, clarifyErrors )
+import Darcs.Utils ( askUser, promptYorn, PromptConfig(..), promptChar, editFile, clarifyErrors, catchIOError )
 import Progress ( debugMessage)
 import Darcs.ProgressPatches( progressFL)
 import IsoDate ( getIsoDateTime, cleanLocalDate )
@@ -289,7 +289,7 @@ getLog opts m_old make_log chs = gl opts
                            return (p, thelog, Nothing)
           gl (LogFile f:fs) =
               do -- round 1 (patchname)
-                 mlp <- lines `fmap` readLocaleFile f `catch` (\_ -> return [])
+                 mlp <- lines `fmap` readLocaleFile f `catchIOError` (\_ -> return [])
                  firstname <- case (patchname_specified, mlp) of
                                 (FlagPatchName  p, []) -> return p
                                 (_, p:_)               -> return p -- logfile trumps prior!
diff --git a/src/Darcs/Commands/Replace.hs b/src/Darcs/Commands/Replace.hs
index 1bf5659..5a6c7d9 100644
--- a/src/Darcs/Commands/Replace.hs
+++ b/src/Darcs/Commands/Replace.hs
@@ -41,6 +41,7 @@ import Darcs.Patch.Patchy ( Apply )
 import Darcs.Witnesses.Ordered ( FL(..), (+>+), concatFL, toFL )
 import Darcs.Witnesses.Sealed ( Sealed(..), mapSeal, FreeLeft, Gap(..) )
 import Darcs.Patch.RegChars ( regChars )
+import Darcs.Utils ( catchIOError )
 import Data.Char ( isSpace )
 import Darcs.RepoPath ( SubPath, toFilePath, sp2fn )
 import Darcs.Repository.Prefs ( FileType(TextFile) )
@@ -141,7 +142,7 @@ replaceCmd opts (old:new:relfs) = withRepoLock opts $ RepoJob $ \repository -> d
   files <- filterM (exists work) fs
   Sealed pswork <- mapSeal concatFL . toFL <$> mapM (repl toks cur work) files
   addToPending repository pswork
-  _ <- applyToWorking repository opts pswork `catch` \e ->
+  _ <- applyToWorking repository opts pswork `catchIOError` \e ->
       fail $ "Can't do replace on working!\n"
           ++ "Perhaps one of the files already contains '"++ new++"'?\n"
           ++ show e
@@ -189,8 +190,8 @@ floatSubPath :: SubPath -> AnchoredPath
 floatSubPath = floatPath . fn2fp . sp2fn
 
 maybeApplyToTree :: (Apply p, ApplyState p ~ Tree) => p C(x y) -> Tree IO -> IO (Maybe (Tree IO))
-maybeApplyToTree patch tree = catch (Just `fmap` applyToTree patch tree)
-                                    (\_ -> return Nothing)
+maybeApplyToTree patch tree = catchIOError (Just `fmap` applyToTree patch tree)
+                                           (\_ -> return Nothing)
 
 defaultToks :: String
 defaultToks = "A-Za-z_0-9"
diff --git a/src/Darcs/Commands/Revert.hs b/src/Darcs/Commands/Revert.hs
index a066965..0153896 100644
--- a/src/Darcs/Commands/Revert.hs
+++ b/src/Darcs/Commands/Revert.hs
@@ -31,7 +31,7 @@ import Darcs.Arguments ( DarcsFlag( All, Debug ),
                         fixSubPaths,
                         listRegisteredFiles, umaskOption, unified
                       )
-import Darcs.Utils ( askUser )
+import Darcs.Utils ( askUser, catchIOError )
 import Darcs.RepoPath ( toFilePath )
 import Darcs.Repository ( withRepoLock, RepoJob(..), withGutsOf,
                     addToPending,
@@ -112,7 +112,7 @@ revertCmd opts args = withRepoLock opts $ RepoJob $ \repository -> do
                    Just (p':>_) -> writeUnrevert repository p' rec NilFL
                    Nothing -> writeUnrevert repository (norevert+>+p) rec NilFL
                  when (Debug `elem` opts) $ putStrLn "About to apply to the working directory."
-                 _ <- applyToWorking repository opts (invert p) `catch` \e ->
+                 _ <- applyToWorking repository opts (invert p) `catchIOError` \e ->
                      fail ("Unable to apply inverse patch!" ++ show e)
                  return ()) :: IO ()
   putStrLn "Finished reverting."
diff --git a/src/Darcs/Commands/Rollback.hs b/src/Darcs/Commands/Rollback.hs
index ae184e6..bcaa6f2 100644
--- a/src/Darcs/Commands/Rollback.hs
+++ b/src/Darcs/Commands/Rollback.hs
@@ -62,7 +62,7 @@ import Darcs.SelectChanges ( selectChanges,
 import Darcs.Commands.Record ( getLog )
 import Darcs.Commands.Unrecord ( getLastPatches )
 import Darcs.Commands.Util ( announceFiles, filterExistingFiles )
-import Darcs.Utils ( clarifyErrors, PromptConfig(..), promptChar )
+import Darcs.Utils ( clarifyErrors, PromptConfig(..), promptChar, catchIOError )
 import Printer ( renderString )
 import Progress ( debugMessage )
 import Darcs.Witnesses.Sealed ( Sealed(..) )
@@ -183,7 +183,7 @@ undoItNow opts repo (_ :> prims) =
       tentativelyAddToPending repo opts pw
       withGutsOf repo $ do
         finalizeRepositoryChanges repo
-        _ <- applyToWorking repo opts pw `catch` \e ->
+        _ <- applyToWorking repo opts pw `catchIOError` \e ->
             fail ("error applying rolled back patch to working directory\n"
                   ++ show e)
         debugMessage "Finished applying unrecorded rollback patch"
diff --git a/src/Darcs/Commands/Send.hs b/src/Darcs/Commands/Send.hs
index 5d49c5e..345cc15 100644
--- a/src/Darcs/Commands/Send.hs
+++ b/src/Darcs/Commands/Send.hs
@@ -72,7 +72,7 @@ import qualified Data.ByteString.Char8 as BC (unpack)
 import Darcs.Lock ( withOpenTemp, writeDocBinFile, readDocBinFile, worldReadableTemp, removeFileMayNotExist )
 import Darcs.SelectChanges ( selectChanges, WhichChanges(..), selectionContext, runSelection )
 import Darcs.Patch.Depends ( findCommonWithThem )
-import Darcs.Utils ( askUser, promptYorn, catchall, editFile, formatPath, getSystemEncoding, isUTF8Locale )
+import Darcs.Utils ( askUser, promptYorn, catchall, editFile, formatPath, getSystemEncoding, isUTF8Locale, catchIOError )
 import Data.Text.Encoding       ( decodeUtf8' )
 import Progress ( debugMessage )
 import Darcs.Email ( makeEmail )
@@ -267,8 +267,8 @@ sendBundle opts to_be_sent bundle fname wtds their_name=
                   (putInfo opts . text $ ("Successfully sent patch bundle to: "
                             ++ to
                             ++ ccs (getCc opts) ++"."))
-                 `catch` \e -> do warnMailBody
-                                  fail $ ioeGetErrorString e
+                 `catchIOError` \e -> do warnMailBody
+                                         fail $ ioeGetErrorString e
                ccs [] = []
                ccs cs  = " and cc'ed " ++ cs
 
@@ -282,7 +282,7 @@ sendBundle opts to_be_sent bundle fname wtds their_name=
              (\url -> do
                 putInfo opts . text $ "Posting patch to " ++ url
                 postUrl url (BC.unpack nbody) "message/rfc822")
-             `catch` const sendmail
+             `catchIOError` const sendmail
            cleanup opts mailfile
 
 generateEmailToString :: [WhatToDo] -> String
diff --git a/src/Darcs/Commands/ShowAuthors.hs b/src/Darcs/Commands/ShowAuthors.hs
index 6344498..dfc1364 100644
--- a/src/Darcs/Commands/ShowAuthors.hs
+++ b/src/Darcs/Commands/ShowAuthors.hs
@@ -34,6 +34,7 @@ import Darcs.Patch.PatchInfoAnd ( info )
 import Darcs.Repository ( amInRepository, readRepo, withRepository, RepoJob(..) )
 import Darcs.Patch.Info ( piAuthor )
 import Darcs.Patch.Set ( newset2RL )
+import Darcs.Utils ( catchIOError )
 import Darcs.Witnesses.Ordered ( mapRL )
 import Printer ( text )
 import Data.Function (on)
@@ -141,7 +142,7 @@ compiledAuthorSpellings :: [DarcsFlag] -> IO [Spelling]
 compiledAuthorSpellings opts = do
   let as_file = ".authorspellings"
   contents <- (Ratified.readFile -- never unlinked from within darcs
-               as_file `catch` (\_ -> return ""))
+               as_file `catchIOError` (\_ -> return ""))
   let parse_results = map (parse sentence as_file) $ lines contents
   clean 1 parse_results
  where
diff --git a/src/Darcs/Commands/TrackDown.hs b/src/Darcs/Commands/TrackDown.hs
index 49990a9..ec4082c 100644
--- a/src/Darcs/Commands/TrackDown.hs
+++ b/src/Darcs/Commands/TrackDown.hs
@@ -38,6 +38,7 @@ import Darcs.Patch.Format ( PatchListFormat )
 import Darcs.Patch.Patchy ( Patchy, Invert, Apply, ShowPatch )
 import Darcs.Patch ( RepoPatch, Named, description, apply, invert )
 import Darcs.Patch.Set ( newset2RL )
+import Darcs.Utils ( catchIOError )
 import Printer ( putDocLn )
 import Darcs.Test ( getTest )
 import Darcs.Lock ( withTempDir )
@@ -107,7 +108,7 @@ trackNextLinear opts test (p:<:ps) = do
     test_result <- test
     if test_result == ExitSuccess
        then putStrLn "Success!"
-       else do apply (invert p) `catch` \e -> fail ("Bad patch:\n" ++ show e)
+       else do apply (invert p) `catchIOError` \e -> fail ("Bad patch:\n" ++ show e)
                makeScriptsExecutable opts (invert p)
                putStrLn "Trying without the patch:"
                putDocLn $ description $ invert p
@@ -189,5 +190,5 @@ unapplyRL :: (Invert p, ShowPatch p, Apply p, ApplyMonad IO (ApplyState p)) => R
 unapplyRL patches = sequence_ (mapRL (safeApply . invert) patches)
 
 safeApply :: (Invert p, ShowPatch p, Apply p, ApplyMonad IO (ApplyState p)) => p C(x y) -> IO ()
-safeApply p = apply p `catch` (\msg -> fail ("Bad patch (during trackdown --bisect):\n" ++ show msg))
+safeApply p = apply p `catchIOError` (\msg -> fail ("Bad patch (during trackdown --bisect):\n" ++ show msg))
 
diff --git a/src/Darcs/Commands/Unrecord.hs b/src/Darcs/Commands/Unrecord.hs
index b20b20b..e9fcd05 100644
--- a/src/Darcs/Commands/Unrecord.hs
+++ b/src/Darcs/Commands/Unrecord.hs
@@ -58,6 +58,7 @@ import Darcs.SelectChanges ( selectChanges
                            , WhichChanges(..)
                            , selectionContext, runSelection )
 import Darcs.Patch.Bundle ( makeBundleN, patchFilename, contextPatches )
+import Darcs.Utils ( catchIOError )
 import Progress ( debugMessage )
 import Darcs.Witnesses.Sealed ( Sealed(..) )
 import Darcs.RepoPath( useAbsoluteOrStd )
@@ -218,7 +219,7 @@ genericObliterateCmd cmdname opts _ = withRepoLock opts $ RepoJob $ \repository
                                 tentativelyAddToPending repository opts $ invert $ effect removed
                                 finalizeRepositoryChanges repository
                                 debugMessage "Applying patches to working directory..."
-                                _ <- applyToWorking repository opts (invert p_after_pending) `catch` \e ->
+                                _ <- applyToWorking repository opts (invert p_after_pending) `catchIOError` \e ->
                                     fail ("Couldn't undo patch in working dir.\n" ++ show e)
                                 return ()
         putStrLn $ "Finished " ++ presentParticiple cmdname ++ "."
diff --git a/src/Darcs/Commands/Unrevert.hs b/src/Darcs/Commands/Unrevert.hs
index 42f54f1..6090a5a 100644
--- a/src/Darcs/Commands/Unrevert.hs
+++ b/src/Darcs/Commands/Unrevert.hs
@@ -46,7 +46,7 @@ import Darcs.SelectChanges ( selectChanges, WhichChanges(First),
 import qualified Data.ByteString as B
 import Darcs.Lock ( writeDocBinFile, removeFileMayNotExist )
 import Darcs.Patch.Depends ( mergeThem )
-import Darcs.Utils ( askUser, catchall )
+import Darcs.Utils ( askUser, catchall, catchIOError )
 import Darcs.Patch.Bundle ( scanBundle, makeBundleN )
 import IsoDate ( getIsoDateTime )
 import Darcs.SignalHandler ( withSignalsBlocked )
@@ -98,7 +98,7 @@ unrevertCmd opts [] = withRepoLock opts $ RepoJob $ \repository -> do
   tentativelyAddToPending repository opts p
   withSignalsBlocked $
       do finalizeRepositoryChanges repository
-         _ <- applyToWorking repository opts p `catch` \e ->
+         _ <- applyToWorking repository opts p `catchIOError` \e ->
              fail ("Error applying unrevert to working directory...\n"
                    ++ show e)
          debugMessage "I'm about to writeUnrevert."
diff --git a/src/Darcs/Compat.hs b/src/Darcs/Compat.hs
index 351474b..ce84312 100644
--- a/src/Darcs/Compat.hs
+++ b/src/Darcs/Compat.hs
@@ -15,7 +15,7 @@ import Foreign.C.String ( peekCString )
 #endif
 
 import Control.Monad ( unless )
-import Foreign.C.Types ( CInt )
+import Foreign.C.Types
 import Foreign.C.String ( CString, withCString )
 import Foreign.C.Error ( throwErrno, eEXIST, getErrno )
 import System.Directory ( getCurrentDirectory )
diff --git a/src/Darcs/External.hs b/src/Darcs/External.hs
index d671cf4..e8aabde 100644
--- a/src/Darcs/External.hs
+++ b/src/Darcs/External.hs
@@ -53,7 +53,7 @@ import Darcs.Flags ( DarcsFlag( SignAs, Sign, SignSSL,
                                 Verify, VerifySSL )
                    , RemoteDarcs(..) )
 import Darcs.RepoPath ( AbsolutePath, toFilePath )
-import Darcs.Utils ( breakCommand, getViewer, ortryrunning, )
+import Darcs.Utils ( breakCommand, getViewer, ortryrunning, catchIOError )
 import Progress ( withoutProgress, debugMessage )
 
 import ByteStringUtils (gzReadFilePS, linesPS, unlinesPS)
@@ -102,7 +102,7 @@ diffProgram = do
 -- |Get the name of the darcs executable (as supplied by @getProgName@)
 darcsProgram :: IO String
 darcsProgram = getProgName
--- Another option: getEnv "DARCS" `catch` \_ -> getProgName
+-- Another option: getEnv "DARCS" `catchIOError` \_ -> getProgName
 
 backupByRenaming :: FilePath -> IO ()
 backupByRenaming = backupBy rename
@@ -200,7 +200,7 @@ cloneTreeExcept except source dest =
             mk_dest   fp = dest   </> fp
         zipWithM_ cloneSubTree (map mk_source fps') (map mk_dest fps')
      else fail ("cloneTreeExcept: Bad source " ++ source)
-   `catch` fail ("cloneTreeExcept: Bad source " ++ source)
+   `catchIOError` fail ("cloneTreeExcept: Bad source " ++ source)
 
 cloneSubTree :: FilePath -> FilePath -> IO ()
 cloneSubTree source dest =
@@ -215,9 +215,9 @@ cloneSubTree source dest =
      else if isRegularFile fs then
         cloneFile source dest
      else fail ("cloneSubTree: Bad source "++ source)
-    `catch` (\e -> if isDoesNotExistError e
-                   then return ()
-                   else ioError e)
+    `catchIOError` (\e -> if isDoesNotExistError e
+                              then return ()
+                              else ioError e)
 
 cloneFile :: FilePath -> FilePath -> IO ()
 cloneFile = copyFile
@@ -226,7 +226,7 @@ maybeURLCmd :: String -> String -> IO(Maybe(String))
 maybeURLCmd what url =
   do let prot = map toUpper $ takeWhile (/= ':') url
      fmap Just (getEnv ("DARCS_" ++ what ++ "_" ++ prot))
-             `catch` \_ -> return Nothing
+             `catchIOError` \_ -> return Nothing
 
 speculateRemote :: String -> FilePath -> IO () -- speculations are always Cachable
 #if defined(HAVE_CURL) || defined(HAVE_HTTP)
@@ -318,7 +318,7 @@ generateEmail h f t s cc body = do
         newline = B.singleton 10
 
 haveSendmail :: IO Bool
-haveSendmail = (sendmailPath >> return True) `catch` (\_ -> return False)
+haveSendmail = (sendmailPath >> return True) `catchIOError` (\_ -> return False)
 
 -- | Send an email, optionally containing a patch bundle
 --   (more precisely, its description and the bundle itself)
diff --git a/src/Darcs/MonadProgress.hs b/src/Darcs/MonadProgress.hs
index 6ff6c3f..7b7b91f 100644
--- a/src/Darcs/MonadProgress.hs
+++ b/src/Darcs/MonadProgress.hs
@@ -28,6 +28,7 @@ module Darcs.MonadProgress ( MonadProgress(..), ProgressAction(..)
 import Progress ( beginTedious, endTedious, tediousSize, finishedOneIO )
 import Printer ( hPutDocLn, Doc )
 import Darcs.ColorPrinter () -- for instance Show Doc
+import Darcs.Utils ( catchIOError )
 import System.IO ( stderr )
 import qualified Storage.Hashed.Monad as HSM
 
@@ -57,7 +58,7 @@ instance MonadProgress IO where
        endTedious what
     where go item =
             do finishedOneIO what (show $ paMessage item)
-               paAction item `catch` \e ->
+               paAction item `catchIOError` \e ->
                  do hPutDocLn stderr $ paOnError item
                     ioError e
 
diff --git a/src/Darcs/Repository.hs b/src/Darcs/Repository.hs
index a57be0f..b277062 100644
--- a/src/Darcs/Repository.hs
+++ b/src/Darcs/Repository.hs
@@ -114,7 +114,7 @@ import Darcs.Repository.Format ( RepoProperty ( HashedInventory ), RepoFormat,
 import Darcs.Repository.Prefs ( writeDefaultPrefs )
 import Darcs.Patch.Depends ( areUnrelatedRepos, findUncommon )
 
-import Darcs.Utils ( withCurrentDirectory, catchall, promptYorn )
+import Darcs.Utils ( withCurrentDirectory, catchall, promptYorn, catchIOError )
 import Darcs.External ( copyFileOrUrl, Cachable(..), fetchFileLazyPS )
 import Progress ( debugMessage, tediousSize, beginTedious, endTedious )
 import Darcs.ProgressPatches (progressRLShowTags, progressFL)
@@ -146,7 +146,7 @@ import qualified Data.ByteString.Lazy.Char8 as BL
 
 createRepository :: [DarcsFlag] -> IO ()
 createRepository opts = do
-  createDirectory darcsdir `catch`
+  createDirectory darcsdir `catchIOError`
       (\e-> if isAlreadyExistsError e
             then fail "Tree has already been initialized!"
             else fail $ "Error creating directory `"++darcsdir++"'.")
diff --git a/src/Darcs/Repository/HashedRepo.hs b/src/Darcs/Repository/HashedRepo.hs
index 48a1f1e..af68755 100644
--- a/src/Darcs/Repository/HashedRepo.hs
+++ b/src/Darcs/Repository/HashedRepo.hs
@@ -62,6 +62,7 @@ import Darcs.Patch.Apply ( Apply, ApplyState )
 import Darcs.Patch.ReadMonads ( parseStrictly )
 import Darcs.Patch.Depends ( commuteToEnd, slightlyOptimizePatchset )
 import Darcs.Patch.Info ( PatchInfo, showPatchInfo, humanFriendly, readPatchInfo )
+import Darcs.Utils ( catchIOError )
 import Darcs.Witnesses.Unsafe ( unsafeCoerceP )
 import Darcs.Witnesses.Ordered ( reverseRL, reverseFL, (+<+) )
 
@@ -99,7 +100,7 @@ applyHashed' root p = do case root of
                          return $ BC.unpack . encodeBase16 $ treeHash t
 
 applyHashed :: (ApplyState q ~ Tree, Patchy q) => String -> q C(x y) -> IO String
-applyHashed h p = applyHashed' hash p `catch` \_ -> do
+applyHashed h p = applyHashed' hash p `catchIOError` \_ -> do
                           hPutStrLn stderr warn
                           inv <- gzReadFilePS invpath
                           let oldroot = BC.pack $ inv2pris inv
@@ -142,7 +143,7 @@ finalizeTentativeChanges r compr =
 readHashedPristineRoot :: Repository p C(r u t) -> IO (Maybe String)
 readHashedPristineRoot (Repo d _ _ _) =
     withCurrentDirectory d $ do
-      i <- (Just `fmap` gzReadFilePS (darcsdir++"/hashed_inventory")) `catch` (\_ -> return Nothing)
+      i <- (Just `fmap` gzReadFilePS (darcsdir++"/hashed_inventory")) `catchIOError` (\_ -> return Nothing)
       return $ inv2pris `fmap` i
 
 cleanPristine :: Repository p C(r u t) -> IO ()
@@ -210,7 +211,7 @@ readRepoUsingSpecificInventory :: (RepoPatch p, ApplyState p ~ Tree) => String -
   -> String -> IO (PatchSet p C(Origin s))
 readRepoUsingSpecificInventory invPath repo dir = do
   realdir <- toPath `fmap` ioAbsoluteOrRemote dir
-  Sealed ps <- readRepoPrivate (extractCache repo) realdir invPath `catch`
+  Sealed ps <- readRepoPrivate (extractCache repo) realdir invPath `catchIOError`
                  (\e -> do hPutStrLn stderr ("Invalid repository:  " ++ realdir)
                            ioError e)
   return $ unsafeCoerceP ps
diff --git a/src/Darcs/Repository/Internal.hs b/src/Darcs/Repository/Internal.hs
index 0055a5b..ecc186c 100644
--- a/src/Darcs/Repository/Internal.hs
+++ b/src/Darcs/Repository/Internal.hs
@@ -106,6 +106,7 @@ import Darcs.Flags ( DarcsFlag(Verbose, Quiet,
                                WorkRepoUrl, WorkRepoDir, UMask, Test, LeaveTestDir,
                                SetScriptsExecutable, DryRun ),
                      wantExternalMerge, compression, Compression )
+
 import Darcs.Witnesses.Eq ( EqCheck(..) )
 import Darcs.Witnesses.Unsafe ( unsafeCoerceP, unsafeCoercePStart )
 import Darcs.Witnesses.Ordered ( FL(..), RL(..),
@@ -131,7 +132,7 @@ import Darcs.Patch.Set ( Origin )
 import Darcs.Patch.Depends ( deepOptimizePatchset, removeFromPatchSet, mergeThem )
 import Darcs.RepoPath ( FilePathLike, AbsolutePath, toFilePath,
                         ioAbsoluteOrRemote, toPath )
-import Darcs.Utils ( promptYorn, catchall, withCurrentDirectory, withUMask, nubsort )
+import Darcs.Utils ( promptYorn, catchall, withCurrentDirectory, withUMask, nubsort, catchIOError )
 import Progress ( debugMessage )
 import Darcs.ProgressPatches (progressFL)
 import Darcs.URL ( isFile )
@@ -350,7 +351,7 @@ makeNewPending repo@(Repo r _ _ tp) origp =
        cur <- readRecorded repo
        Sealed p <- readNewPendingLL repo -- :: IO (Sealed (FL (PrimOf p) C(t)))
 -- Warning:  A do-notation statement discarded a result of type Tree.Tree IO.
-       _ <- catch (applyToTree p cur) $ \err -> do
+       _ <- catchIOError (applyToTree p cur) $ \err -> do
          let buggyname = pendingName tp ++ "_buggy"
          renameFile newname buggyname
          bugDoc $ text ("There was an attempt to write an invalid pending! " ++ show err)
diff --git a/src/Darcs/Repository/Old.hs b/src/Darcs/Repository/Old.hs
index 493a5e7..a903730 100644
--- a/src/Darcs/Repository/Old.hs
+++ b/src/Darcs/Repository/Old.hs
@@ -36,6 +36,7 @@ import qualified Data.ByteString.Char8 as BC (break, pack)
 import Darcs.Patch ( RepoPatch, Named,
                      readPatch )
 
+import Darcs.Utils ( catchIOError )
 import Darcs.Witnesses.Ordered ( RL(..) )
 import Darcs.Patch.Info ( PatchInfo, makeFilename, readPatchInfos )
 import Darcs.Patch.Set ( PatchSet(..), Tagged(..), SealedPatchSet )
@@ -55,7 +56,7 @@ readOldRepo d = do
   realdir <- toPath `fmap` ioAbsoluteOrRemote d
   let k = "Reading inventory of repository "++d
   beginTedious k
-  readRepoPrivate k realdir "inventory" `catch`
+  readRepoPrivate k realdir "inventory" `catchIOError`
                         (\e -> do hPutStrLn stderr ("Invalid repository:  " ++ realdir)
                                   ioError e)
 
@@ -92,7 +93,7 @@ readRepoPrivate k d iname = do
                                 _ -> (Nothing, reverse $ readPatchInfos i)
                  Sealed ts <- fmap (unseal seal) $ unsafeInterleaveIO $ read_ts parse mt
                  Sealed ps <- unseal seal `fmap` unsafeInterleaveIO (read_patches parse is)
-                 Sealed tag00 <-  parse tag0 `catch`
+                 Sealed tag00 <-  parse tag0 `catchIOError`
                                   \e -> return $ seal $
                                         patchInfoAndPatch tag0 $ unavailable $ show e
                  return $ seal $ Tagged tag00 Nothing ps :<: ts
@@ -112,7 +113,7 @@ readRepoPrivate k d iname = do
           read_patches parse (i:is) =
               lift2Sealed (:<:)
                           (read_patches parse is)
-                          (parse i `catch` \e ->
+                          (parse i `catchIOError` \e ->
                            return $ seal $ patchInfoAndPatch i $ unavailable $ show e)
           lift2Sealed :: (FORALL(y z) q C(y z) -> pp C(y) -> r C(z))
                       -> IO (Sealed pp) -> (FORALL(b) IO (Sealed (q C(b)))) -> IO (Sealed r)
diff --git a/src/Darcs/Repository/Prefs.hs b/src/Darcs/Repository/Prefs.hs
index bf35826..52b59a7 100644
--- a/src/Darcs/Repository/Prefs.hs
+++ b/src/Darcs/Repository/Prefs.hs
@@ -47,7 +47,7 @@ import System.Environment ( getEnvironment )
 
 import Darcs.Flags ( DarcsFlag( NoCache, NoSetDefault, DryRun, RemoteRepo ) )
 import Darcs.RepoPath ( AbsolutePath, ioAbsolute, toFilePath, getCurrentDirectory )
-import Darcs.Utils ( catchall, stripCr )
+import Darcs.Utils ( catchall, stripCr, catchIOError )
 import Darcs.External ( gzFetchFilePS, Cachable( Cachable ) )
 import qualified Data.ByteString.Char8 as BC ( unpack )
 import qualified Data.ByteString       as B  ( empty )
@@ -294,7 +294,7 @@ binariesFileHelp =
 filetypeFunction :: IO (FilePath -> FileType)
 filetypeFunction = do
     binsfile <- defPrefval "binariesfile" (darcsdir ++ "/prefs/binaries")
-    bins <- getPrefLines binsfile `catch`
+    bins <- getPrefLines binsfile `catchIOError`
              (\e-> if isDoesNotExistError e then return [] else ioError e)
     gbs <- getGlobal "binaries"
     let regexes = map mkRegex (bins ++ gbs)
diff --git a/src/Darcs/Repository/Repair.hs b/src/Darcs/Repository/Repair.hs
index 9884d7b..4c9bca7 100644
--- a/src/Darcs/Repository/Repair.hs
+++ b/src/Darcs/Repository/Repair.hs
@@ -43,7 +43,7 @@ import Darcs.Repository ( Repository, readRepo, makePatchLazy
                         , readRecorded, readIndex, readRecordedAndPending )
 
 import Progress ( debugMessage, beginTedious, endTedious, tediousSize, finishedOneIO )
-import Darcs.Utils ( catchall )
+import Darcs.Utils ( catchall, catchIOError )
 import Darcs.Global ( darcsdir )
 import Darcs.Lock( withTempDir )
 import Printer ( Doc, putDocLn, text )
@@ -134,7 +134,7 @@ replayRepository' whereToReplay' repo opts = do
   checkUniqueness putVerbose putInfo repo
   createDirectoryIfMissing False whereToReplay
   putVerbose $ text "Reading recorded state..."
-  pris <- readRecorded repo `catch` \_ -> return emptyTree
+  pris <- readRecorded repo `catchIOError` \_ -> return emptyTree
   putVerbose $ text "Applying patches..."
   patches <- readRepo repo
   debugMessage "Fixing any broken patches..."
diff --git a/src/Darcs/Repository/State.hs b/src/Darcs/Repository/State.hs
index a69d4ff..5642385 100644
--- a/src/Darcs/Repository/State.hs
+++ b/src/Darcs/Repository/State.hs
@@ -53,7 +53,7 @@ import Darcs.Witnesses.Sealed ( Sealed(Sealed), seal, unFreeLeft, mapSeal )
 import Darcs.Diff ( treeDiff )
 import Darcs.Flags ( UseIndex(..), ScanKnown(..) )
 import Darcs.Global ( darcsdir )
-import Darcs.Utils ( filterPaths )
+import Darcs.Utils ( filterPaths, catchIOError )
 
 import Darcs.Repository.InternalTypes ( Repository(..) )
 import Darcs.Repository.Format(formatHas, RepoProperty(NoWorkingDir))
@@ -257,7 +257,7 @@ readPending :: (RepoPatch p, ApplyState p ~ Tree)
 readPending repo =
   do Sealed pending <- readPendingLL repo
      pristine <- readRecorded repo
-     catch ((\t -> (t, seal pending)) `fmap` applyToTree pending pristine) $ \ err -> do
+     catchIOError ((\t -> (t, seal pending)) `fmap` applyToTree pending pristine) $ \ err -> do
        putStrLn $ "Yikes, pending has conflicts! " ++ show err
        putStrLn $ "Stashing the buggy pending as _darcs/patches/pending_buggy"
        renameFile "_darcs/patches/pending"
diff --git a/src/Darcs/Utils.hs b/src/Darcs/Utils.hs
index a3d6551..b606825 100644
--- a/src/Darcs/Utils.hs
+++ b/src/Darcs/Utils.hs
@@ -35,6 +35,7 @@ module Darcs.Utils
     , environmentHelpPager
     -- * Errors and exceptions
     , catchall
+    , catchIOError
     , clarifyErrors
     , prettyException
     , prettyError
@@ -76,7 +77,7 @@ import Data.Maybe ( isJust )
 
 import Foreign.C.String ( CString, withCString, peekCString )
 import Foreign.C.Error ( throwErrno )
-import Foreign.C.Types ( CInt )
+import Foreign.C.Types
 
 #ifdef FORCE_CHAR8_ENCODING
 import GHC.IO.Encoding ( setFileSystemEncoding, setForeignEncoding, char8 )
@@ -128,6 +129,8 @@ catchall :: IO a
          -> IO a
 a `catchall` b = a `catchNonSignal` (\_ -> b)
 
+catchIOError :: IO a -> (IOError -> IO a) -> IO a
+catchIOError = catch
 
 maybeGetEnv :: String
             -> IO (Maybe String)
diff --git a/src/URL/Curl.hs b/src/URL/Curl.hs
index 6e41304..13920b2 100644
--- a/src/URL/Curl.hs
+++ b/src/URL/Curl.hs
@@ -6,7 +6,7 @@ module URL.Curl where
 
 import Control.Exception.Extensible ( bracket )
 import Control.Monad ( when )
-import Foreign.C.Types ( CLong, CInt )
+import Foreign.C.Types
 
 import Progress ( debugMessage )
 
-- 
1.8.0

