From b6d1bf96068d8a7449da8504589ef4c1547215e2 Mon Sep 17 00:00:00 2001
From: Sergei Trofimovich <slyfox@gentoo.org>
Date: Thu, 24 Jan 2013 01:36:21 +0300
Subject: [PATCH] integer-gmp: improve cross-compiling support
 GmpDerivedConstants.h

Before the patch GmpDerivedConstants.h was generated
by running mkGmpDerivedConstants on target.

Now it's generated only with help of autoconf macros.
Tested on --target=ia64-unknown-linux-gnu.

Signed-off-by: Sergei Trofimovich <slyfox@gentoo.org>
---
 .gitignore                       |  1 -
 cbits/GmpDerivedConstants.h.in   | 10 ++++++++++
 configure.ac                     | 28 ++++++++++++++++++++++++----
 gmp/ghc.mk                       |  8 --------
 gmp/ln                           |  0
 5 files changed, 34 insertions(+), 13 deletions(-)
 create mode 100644 cbits/GmpDerivedConstants.h.in
 mode change 100644 => 100755 gmp/ln

diff --git a/.gitignore b/.gitignore
index 012224d..56857e9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,4 +8,3 @@ ghc.mk
 gmp/config.mk
 integer-gmp.buildinfo
 cbits/GmpDerivedConstants.h
-cbits/mkGmpDerivedConstants
diff --git a/cbits/GmpDerivedConstants.h.in b/cbits/GmpDerivedConstants.h.in
new file mode 100644
index 0000000..241372f
--- /dev/null
+++ b/cbits/GmpDerivedConstants.h.in
@@ -0,0 +1,10 @@
+#define SIZEOF_MP_INT @SIZEOF_MP_INT@
+#define OFFSET_MP_INT__mp_alloc @OFFSET_MP_INT__mp_alloc@
+#define REP_MP_INT__mp_alloc b@REP_MP_INT__mp_alloc@
+#define MP_INT__mp_alloc(__ptr__)  REP_MP_INT__mp_alloc[__ptr__+OFFSET_MP_INT__mp_alloc]
+#define OFFSET_MP_INT__mp_size @OFFSET_MP_INT__mp_size@
+#define REP_MP_INT__mp_size b@REP_MP_INT__mp_size@
+#define MP_INT__mp_size(__ptr__)  REP_MP_INT__mp_size[__ptr__+OFFSET_MP_INT__mp_size]
+#define OFFSET_MP_INT__mp_d @OFFSET_MP_INT__mp_d@
+#define REP_MP_INT__mp_d b@REP_MP_INT__mp_d@
+#define MP_INT__mp_d(__ptr__)  REP_MP_INT__mp_d[__ptr__+OFFSET_MP_INT__mp_d]
diff --git a/configure.ac b/configure.ac
index b6a8003..aeb1f86 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1,8 +1,5 @@
 AC_INIT([Haskell integer (GMP)], [0.1], [libraries@haskell.org], [integer])
 
-# Safety check: Ensure that we are in the correct source directory.
-AC_CONFIG_SRCDIR([cbits/mkGmpDerivedConstants.c])
-
 AC_CANONICAL_TARGET
 
 AC_ARG_WITH([cc],
@@ -71,7 +68,30 @@ AC_SUBST(GMP_FRAMEWORK)
 AC_SUBST(HaveLibGmp)
 AC_SUBST(HaveFrameworkGMP)
 
-AC_CONFIG_FILES([integer-gmp.buildinfo gmp/config.mk])
+dnl GMP_INT_TO_CONST(int_expr, var_name)
+AC_DEFUN([GMP_INT_TO_VAR],
+[
+    AC_MSG_CHECKING([for $1 size])
+    AC_COMPUTE_INT([$2], [$1],[[#include <stdio.h>
+#include <stddef.h>
+#include "gmp.h"
+
+#define FIELD_OFFSET(s_type, field) offsetof(s_type, field)
+#define FIELD_SIZE_BITS(s_type, field) (unsigned long)sizeof (__typeof__(((((s_type*)0)->field)))) * 8
+]], AC_MSG_ERROR([Failed to compute size of $1]))
+    AC_MSG_RESULT($$2)
+    AC_SUBST($2)
+])
+
+GMP_INT_TO_VAR([[sizeof (MP_INT)]], [SIZEOF_MP_INT])
+GMP_INT_TO_VAR([[FIELD_OFFSET(MP_INT,_mp_alloc)]],    [OFFSET_MP_INT__mp_alloc])
+GMP_INT_TO_VAR([[FIELD_SIZE_BITS(MP_INT,_mp_alloc)]], [REP_MP_INT__mp_alloc])
+GMP_INT_TO_VAR([[FIELD_OFFSET(MP_INT,_mp_size)]],     [OFFSET_MP_INT__mp_size])
+GMP_INT_TO_VAR([[FIELD_SIZE_BITS(MP_INT,_mp_size)]],  [REP_MP_INT__mp_size])
+GMP_INT_TO_VAR([[FIELD_OFFSET(MP_INT,_mp_d)]],        [OFFSET_MP_INT__mp_d])
+GMP_INT_TO_VAR([[FIELD_SIZE_BITS(MP_INT,_mp_d)]],     [REP_MP_INT__mp_d])
+
+AC_CONFIG_FILES([integer-gmp.buildinfo gmp/config.mk cbits/GmpDerivedConstants.h])
 
 dnl--------------------------------------------------------------------
 dnl * Generate the header cbits/GmpDerivedConstants.h
diff --git a/gmp/ghc.mk b/gmp/ghc.mk
index 8c60e6f..2dc46f3 100644
--- a/gmp/ghc.mk
+++ b/gmp/ghc.mk
@@ -42,12 +42,6 @@ endif
 libraries/integer-gmp_CC_OPTS += $(addprefix -I,$(GMP_INCLUDE_DIRS))
 libraries/integer-gmp_CC_OPTS += $(addprefix -L,$(GMP_LIB_DIRS))
 
-libraries/integer-gmp/cbits/mkGmpDerivedConstants$(exeext): libraries/integer-gmp/cbits/mkGmpDerivedConstants.c
-	"$(CC_STAGE1)" $(SRC_CC_OPTS) $(CONF_CC_OPTS_STAGE1) $(libraries/integer-gmp_CC_OPTS) $< -o $@
-
-libraries/integer-gmp/cbits/GmpDerivedConstants.h: libraries/integer-gmp/cbits/mkGmpDerivedConstants$(exeext)
-	$< > $@
-
 # Compile GMP only if we don't have it already
 #
 # We use GMP's own configuration stuff, because it's all rather hairy
@@ -82,8 +76,6 @@ ifneq "$(HaveLibGmp)" "YES"
 ifneq "$(HaveFrameworkGMP)" "YES"
 $(libraries/integer-gmp_dist-install_depfile_c_asm): libraries/integer-gmp/gmp/gmp.h
 
-libraries/integer-gmp/cbits/mkGmpDerivedConstants$(exeext): libraries/integer-gmp/gmp/gmp.h
-
 libraries/integer-gmp_CC_OPTS += -I$(TOP)/libraries/integer-gmp/gmp
 
 libraries/integer-gmp_dist-install_EXTRA_OBJS += libraries/integer-gmp/gmp/objs/*.o
-- 
1.8.1.1

