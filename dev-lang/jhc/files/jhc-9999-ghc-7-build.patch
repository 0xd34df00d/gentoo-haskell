Build fixes against ghc-7.0.3
Mostly type and extension annotations
diff -rN -u old-jhc/src/E/SSimplify.hs new-jhc/src/E/SSimplify.hs
--- old-jhc/src/E/SSimplify.hs	2011-04-05 18:09:15.884391001 +0300
+++ new-jhc/src/E/SSimplify.hs	2011-04-05 18:09:16.175391001 +0300
@@ -1,3 +1,4 @@
+{-# LANGUAGE TypeFamilies #-}
 module E.SSimplify(
     Occurance(..),
     cacheSimpOpts,
@@ -113,6 +114,7 @@
 
 collectOccurance :: E -> OM E -- ^ (annotated expression, free variables mapped to their occurance info)
 collectOccurance e = f e where
+    f :: E -> OM E
     f e@ESort {} = return e
     f e@Unknown {} = return e
     f (EPi tvr@TVr { tvrIdent = eid, tvrType =  a} b) | isEmptyId eid = arg $ do
@@ -184,6 +186,7 @@
             l' = mapLitBinds (annbind' fvs) l
         tell (fvs',fromList $ map tvrIdent (litBinds l'))
         return (Alt l' e')
+    arg :: OM a -> OM a
     arg m = do
         let mm (OMap mp,y) = (OMap $ fmap (const noUseInfo) mp,y)
         censor mm m
@@ -203,8 +206,11 @@
     Just x -> annb x tvr
 annb x tvr = tvrInfo_u (Info.insert x) tvr
 
+mapLitBinds :: (e -> e) -> Lit e t -> Lit e t
 mapLitBinds f lc@LitCons { litArgs = es } = lc { litArgs = map f es }
 mapLitBinds f (LitInt e t) = LitInt e t
+
+mapLitBindsM :: (e -> OM e) -> Lit e t -> OM (Lit e t)
 mapLitBindsM f lc@LitCons { litArgs = es } = do
     es <- mapM f es
     return lc { litArgs = es }
@@ -483,6 +489,7 @@
         let lupRules t = concat [ combRules c | c <- dsIn, combIdent c == t]
         return [ combRules_s (lupRules (tvrIdent t)) $ bindComb (t,e) | (t,e) <- dsOut ]
 
+    getType :: CanTypeCheck DataTable a ty => a -> ty
     getType e = infertype (progDataTable prog) e
     doit = do
         smAddNamesIdSet (progUsedIds prog)
diff -rN -u old-jhc/src/FrontEnd/Class.hs new-jhc/src/FrontEnd/Class.hs
--- old-jhc/src/FrontEnd/Class.hs	2011-04-05 18:09:15.900391001 +0300
+++ new-jhc/src/FrontEnd/Class.hs	2011-04-05 18:09:16.178391001 +0300
@@ -29,7 +29,7 @@
 import qualified Text.PrettyPrint.HughesPJ as PPrint
 
 import Data.Binary
-import Doc.DocLike
+import Doc.DocLike as D
 import Doc.PPrint
 import FrontEnd.KindInfer
 import FrontEnd.Tc.Kind
@@ -221,7 +221,7 @@
     pnone [] f = putStrLn " none"
     pnone xs f = f
     passoc (nk,as,mt) = text "type" <+> pprint nk <+> hsep (map pprint as) <> case mt of
-        Nothing -> empty
+        Nothing -> D.empty
         Just s -> text " = " <> pprint s
 
 
diff -rN -u old-jhc/src/FrontEnd/KindInfer.hs new-jhc/src/FrontEnd/KindInfer.hs
--- old-jhc/src/FrontEnd/KindInfer.hs	2011-04-05 18:09:15.913391001 +0300
+++ new-jhc/src/FrontEnd/KindInfer.hs	2011-04-05 18:09:16.180391001 +0300
@@ -29,7 +29,7 @@
 import qualified Data.Map as Map
 import qualified Data.Traversable as T
 
-import Doc.DocLike
+import Doc.DocLike as D
 import Doc.PPrint
 import FrontEnd.HsSyn
 import FrontEnd.Tc.Kind
@@ -76,7 +76,7 @@
         [ pprint x <+> text "=>" <+> pprint y | (x,y) <- Map.toList m] ++
         [ text "associated type" <+> pprint n <+> pprint ab  | (n,ab) <- Map.toList ev] ++
         [ text "class" <+> pprint n <+> pprint ab  | (n,ab) <- Map.toList cs] ++
-        [empty]
+        [D.empty]
 
 --------------------------------------------------------------------------------
 
diff -rN -u old-jhc/src/Grin/Grin.hs new-jhc/src/Grin/Grin.hs
--- old-jhc/src/Grin/Grin.hs	2011-04-05 18:09:15.944391001 +0300
+++ new-jhc/src/Grin/Grin.hs	2011-04-05 18:09:16.185391001 +0300
@@ -1,4 +1,5 @@
 {-# OPTIONS_GHC -funbox-strict-fields #-}
+{-# LANGUAGE TypeFamilies #-}
 
 module Grin.Grin(
     Callable(..),
diff -rN -u old-jhc/src/Info/Types.hs new-jhc/src/Info/Types.hs
--- old-jhc/src/Info/Types.hs	2011-04-05 18:09:15.962391001 +0300
+++ new-jhc/src/Info/Types.hs	2011-04-05 18:09:16.188391001 +0300
@@ -1,3 +1,4 @@
+{-# LANGUAGE TypeFamilies #-}
 -- | some useful types to use in Info's that don't really fit anywhere else
 module Info.Types(module Info.Types, module Info.Properties) where
 
diff -rN -u old-jhc/src/StringTable/Atom.hsc new-jhc/src/StringTable/Atom.hsc
--- old-jhc/src/StringTable/Atom.hsc	2011-04-05 18:09:15.972391001 +0300
+++ new-jhc/src/StringTable/Atom.hsc	2011-04-05 18:09:16.189391001 +0300
@@ -1,4 +1,5 @@
 {-# OPTIONS_GHC -fffi -XTypeSynonymInstances -XDeriveDataTypeable  #-}
+{-# LANGUAGE TypeFamilies #-}
 module StringTable.Atom(
     Atom(),
     ToAtom(..),
diff -rN -u old-jhc/src/Util/BitSet.hs new-jhc/src/Util/BitSet.hs
--- old-jhc/src/Util/BitSet.hs	2011-04-05 18:09:15.982391001 +0300
+++ new-jhc/src/Util/BitSet.hs	2011-04-05 18:09:16.191391001 +0300
@@ -1,4 +1,5 @@
 {-# LANGUAGE BangPatterns #-}
+{-# LANGUAGE TypeFamilies #-}
 module Util.BitSet(
     BitSet(),
     EnumBitSet(..),
diff -rN -u old-jhc/src/Util/GMap.hs new-jhc/src/Util/GMap.hs
--- old-jhc/src/Util/GMap.hs	2011-04-05 18:09:15.985391001 +0300
+++ new-jhc/src/Util/GMap.hs	2011-04-05 18:09:16.191391001 +0300
@@ -1,3 +1,4 @@
+{-# LANGUAGE TypeFamilies #-}
 module Util.GMap where
 
 import Data.Monoid
diff -rN -u old-jhc/src/Util/Relation.hs new-jhc/src/Util/Relation.hs
--- old-jhc/src/Util/Relation.hs	2011-04-05 18:09:15.996391001 +0300
+++ new-jhc/src/Util/Relation.hs	2011-04-05 18:09:16.193391001 +0300
@@ -1,4 +1,4 @@
-
+{-# LANGUAGE TypeFamilies #-}
 -- | extend Data.Set with relation operations
 
 module Util.Relation where
diff -rN -u old-jhc/src/Util/SetLike.hs new-jhc/src/Util/SetLike.hs
--- old-jhc/src/Util/SetLike.hs	2011-04-05 18:09:16.000391001 +0300
+++ new-jhc/src/Util/SetLike.hs	2011-04-05 18:09:16.194391001 +0300
@@ -1,3 +1,4 @@
+{-# LANGUAGE TypeFamilies #-}
 module Util.SetLike where
 
 import Data.List(foldl')
