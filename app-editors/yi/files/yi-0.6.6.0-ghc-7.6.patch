--- yi-0.6.6.0-orig/yi.cabal	2012-07-21 16:15:35.000000000 +1000
+++ yi-0.6.6.0/yi.cabal	2013-04-02 01:13:40.193763608 +1100
@@ -205,12 +205,12 @@
     Parser.Incremental
 
   build-depends:
-    Cabal >= 1.10 && < 1.15,
-    Diff >=0.1 && <0.2,
+    Cabal >= 1.10 && < 1.17,
+    Diff >=0.1 && <0.4,
     array, containers,  directory, process, old-locale,
     base >= 4 && < 5,
-    binary == 0.5.*,
-    bytestring >= 0.9.1 && < 0.9.3,
+    binary >= 0.5,
+    bytestring >= 0.9.1 && < 0.11,
     cautious-file >= 1.0.1,
     concrete-typerep == 0.1.*,
     derive >=2.4 && <2.7,
@@ -222,21 +222,21 @@
     filepath>=1.1 && <1.4,
     fingertree >= 0 && <0.1,
     ghc-paths ==0.1.*,
-    hashable < 1.2,
+    hashable < 1.3,
     hint > 0.3.1,
     mtl >= 0.1.0.1,
-    pointedlist >= 0.3.5 && <0.4,
+    pointedlist >= 0.4 && <0.6,
     pureMD5 >= 0.2.3,
     random,
     regex-base ==0.93.*,
     regex-tdfa == 1.1.*,
     rosezipper >= 0.1 && < 0.3,
-    split == 0.1.*,
-    template-haskell >= 2.4 && < 2.8,
+    split >= 0.1 && < 0.3,
+    template-haskell >= 2.4 && < 2.9,
     time >= 1.1 && < 1.5,
     utf8-string >= 0.3.1,
     uniplate,
-    unix-compat >=0.1 && <0.4,
+    unix-compat >=0.1 && <0.5,
     unordered-containers >= 0.1.3 && < 0.3
 
   build-tools: alex >= 3
@@ -312,7 +312,7 @@
     exposed-modules:
       Yi.UI.Vty
     build-depends:
-      unix-compat >=0.1 && <0.4,
+      unix-compat >=0.1 && <0.5,
       vty >= 4.7.0.0 && <5
     cpp-options: -DFRONTEND_VTY
 
--- yi-0.6.6.0-orig/src/library/Yi/UI/Pango.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/UI/Pango.hs	2013-04-02 00:33:10.921695849 +1100
@@ -1,4 +1,4 @@
-{-# LANGUAGE CPP, ExistentialQuantification, DoRec, TupleSections, NamedFieldPuns, ViewPatterns #-}
+{-# LANGUAGE CPP, ExistentialQuantification, DoRec, TupleSections, NamedFieldPuns, ViewPatterns, ScopedTypeVariables #-}
 {-# OPTIONS_GHC -funbox-strict-fields #-}
 
 -- Copyright (c) 2007, 2008 Jean-Philippe Bernardy
@@ -7,12 +7,14 @@
 -- pango for direct text rendering.
 module Yi.UI.Pango (start) where
 
-import Prelude (catch, filter)
+import Prelude (filter)
 
+import Control.Exception (catch, SomeException)
 import Control.Concurrent
 import Data.Prototype
 import Data.IORef
 import Data.List (drop, intercalate, zip)
+import qualified Data.List.PointedList as PL (moveTo)
 import qualified Data.List.PointedList.Circular as PL
 import Data.Maybe
 import qualified Data.Map as M
@@ -198,7 +200,7 @@
   let ui = UI win tabs status tc actionCh (configUI cfg) fontRef im
 
   -- Keep the current tab focus up to date
-  let move n pl = maybe pl id (PL.move n pl)
+  let move n pl = maybe pl id (PL.moveTo n pl)
       runAction = uiActionCh ui . makeAction
   -- why does this cause a hang without postGUIAsync?
   simpleNotebookOnSwitchPage (uiNotebook ui) $ \n -> postGUIAsync $
@@ -276,7 +278,8 @@
   update (modeline w) labelText ml
   writeIORef (fullTitle t) bufferName
   writeIORef (abbrevTitle t) (tabAbbrevTitle bufferName)
-  drawW <- catch (fmap Just $ widgetGetDrawWindow $ textview w) (const (return Nothing))
+  drawW <- catch (fmap Just $ widgetGetDrawWindow $ textview w)
+                 (\(_ :: SomeException) -> return Nothing)
   imContextSetClientWindow im drawW
   imContextFocusIn im
 
--- yi-0.6.6.0-orig/src/library/Yi/Editor.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/Editor.hs	2013-04-02 00:33:10.837695846 +1100
@@ -32,7 +32,7 @@
 import Yi.Window
 import qualified Data.Rope as R
 import qualified Data.DelayList as DelayList
-import qualified Data.List.PointedList as PL (atEnd)
+import qualified Data.List.PointedList as PL (atEnd, moveTo)
 import qualified Data.List.PointedList.Circular as PL
 import qualified Data.Map as M
 import {-# source #-} Yi.Keymap (extractTopKeymap)
@@ -142,7 +142,11 @@
 tabsA = tabs_A . fixCurrentBufferA_
 
 currentTabA :: Accessor Editor Tab
-currentTabA = PL.focusA . tabsA
+currentTabA = focusA . tabsA
+
+askConfigVariableA :: (YiConfigVariable b, MonadEditor m) => m b
+askConfigVariableA = do cfg <- askCfg
+                        return $ cfg ^. configVarsA ^. configVariableA
 
 dynA :: YiVariable a => Accessor Editor a
 dynA = dynamicValueA . dynamicA
@@ -314,7 +318,7 @@
   withGivenBufferAndWindow0 w (bufkey w) f
 
 currentWindowA :: Accessor Editor Window
-currentWindowA = PL.focusA . windowsA
+currentWindowA = focusA . windowsA
 
 -- | Return the current buffer
 currentBuffer :: Editor -> BufferRef
@@ -460,7 +464,7 @@
 -- | Attach the specified buffer to the current window
 switchToBufferE :: BufferRef -> EditorM ()
 switchToBufferE bk = do
-    modA (PL.focusA . windowsA) (\w -> 
+    modA (focusA . windowsA) (\w ->
            w { bufkey = bk, 
                bufAccessList = forceFold1 $ ((bufkey w):) . filter (bk/=) $ bufAccessList w })
 
@@ -506,7 +510,7 @@
 
 -- | Swaps the focused window with the first window. Useful for layouts such as 'HPairOneStack', for which the first window is the largest.
 swapWinWithFirstE :: EditorM ()
-swapWinWithFirstE = modA windowsA (swapFocus (fromJust . PL.move 0))
+swapWinWithFirstE = modA windowsA (swapFocus (fromJust . PL.moveTo 0))
 
 -- | Moves the focused window to the first window, and moves all other windows down the stack.
 pushWinToFirstE :: EditorM ()
@@ -514,7 +518,7 @@
   where
       pushToFirst ws = case PL.delete ws of
           Nothing -> ws
-          Just ws' -> PL.insertLeft (ws ^. PL.focusA) (fromJust $ PL.move 0 ws')
+          Just ws' -> PL.insertLeft (ws ^. focusA) (fromJust $ PL.moveTo 0 ws')
 
 -- | Swap focused window with the next one
 moveWinNextE :: EditorM ()
@@ -530,7 +534,7 @@
 fixCurrentBufferA_ :: Accessor Editor Editor
 fixCurrentBufferA_ = fromSetGet (\new _old -> let 
     ws = windows new
-    b = findBufferWith (bufkey $ PL.focus ws) new
+    b = findBufferWith (bufkey $ PL._focus ws) new
     newBufferStack = nub (bkey b : bufferStack new)
     -- make sure we do not hold to old versions by seqing the length.
     in length newBufferStack `seq` new { bufferStack = newBufferStack  } ) id
@@ -541,7 +545,7 @@
 fixCurrentWindow :: EditorM ()
 fixCurrentWindow = do
     b <- gets currentBuffer
-    modA (PL.focusA . windowsA) (\w -> w {bufkey = b})
+    modA (focusA . windowsA) (\w -> w {bufkey = b})
 
 withWindowE :: Window -> BufferM a -> EditorM a
 withWindowE w = withGivenBufferAndWindow0 w (bufkey w)
@@ -577,8 +581,8 @@
     case foldl searchWindowSet  (False, 0, 0) ts of
         (False, _, _) -> fail $ "No window with key " ++ show wkey ++ "found. (focusWindowE)"
         (True, tabIndex, winIndex) -> do
-            putA tabsA (fromJust $ PL.move tabIndex ts) 
-            modA windowsA (\ws -> fromJust $ PL.move winIndex ws) 
+            putA tabsA (fromJust $ PL.moveTo tabIndex ts)
+            modA windowsA (\ws -> fromJust $ PL.moveTo winIndex ws)
 
 -- | Split the current window, opening a second window onto current buffer.
 -- TODO: unfold newWindowE here?
@@ -604,7 +608,7 @@
      go lms lm =
        case findPL (layoutManagerSameType lm) lms of
          Nothing -> head lms
-         Just lmsPL -> f lmsPL ^. PL.focusA
+         Just lmsPL -> f lmsPL ^. focusA
 
 -- | Next variant of the current layout manager, as given by 'nextVariant'
 layoutManagerNextVariantE :: EditorM ()
@@ -645,8 +649,8 @@
 -- | Moves the focused tab to the given index, or to the end if the index is not specified.
 moveTab :: Maybe Int -> EditorM ()
 moveTab Nothing  = do count <- getsA tabsA PL.length
-                      modA tabsA $ fromJust . PL.move (pred count)
-moveTab (Just n) = do newTabs <- getsA tabsA (PL.move n)
+                      modA tabsA $ fromJust . PL.moveTo (pred count)
+moveTab (Just n) = do newTabs <- getsA tabsA (PL.moveTo n)
                       when (isNothing newTabs) failure
                       putA tabsA $ fromJust newTabs
   where failure = fail $ "moveTab " ++ show n ++ ": no such tab"
--- yi-0.6.6.0-orig/src/library/Yi/Prelude.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/Prelude.hs	2013-04-02 00:33:10.897695848 +1100
@@ -37,6 +37,7 @@
 dummyGet,
 every,
 findPL,
+focusA,
 fromIntegral,
 fst,
 fst3,
@@ -232,9 +233,14 @@
   go ls (f:rs) | p f    = Just (PL.PointedList ls f rs)
                | otherwise = go (f:ls) rs
 
+focusA :: Accessor (PL.PointedList a) a
+focusA = accessor getter setter where
+  getter   (PL.PointedList _ x _) = x
+  setter y (PL.PointedList x _ z) = PL.PointedList x y z
+
 -- | Given a function which moves the focus from index A to index B, return a function which swaps the elements at indexes A and B and then moves the focus. See Yi.Editor.swapWinWithFirstE for an example.
 swapFocus :: (PL.PointedList a -> PL.PointedList a) -> (PL.PointedList a -> PL.PointedList a)
-swapFocus moveFocus xs = PL.focusA ^= (xs ^. PL.focusA) $ moveFocus $ PL.focusA ^= (moveFocus xs ^. PL.focusA) $ xs
+swapFocus moveFocus xs = focusA ^= (xs ^. focusA) $ moveFocus $ focusA ^= (moveFocus xs ^. focusA) $ xs
 ----------------------
 -- Acessor stuff
 
--- yi-0.6.6.0-orig/src/library/Yi/Tab.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/Tab.hs	2013-04-02 00:33:10.920695849 +1100
@@ -40,7 +40,7 @@
  deriving Typeable
 
 tabFocus :: Tab -> Window
-tabFocus = PL.focus . tabWindows
+tabFocus = PL._focus . tabWindows
 
 -- | Returns a list of all mini windows associated with the given tab
 tabMiniWindows :: Tab -> [Window]
--- yi-0.6.6.0-orig/src/library/Yi/UI/Pango/Layouts.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/UI/Pango/Layouts.hs	2013-04-02 00:33:10.921695849 +1100
@@ -369,7 +369,7 @@
     forM_ tsList $ \(w,s) -> update nb (notebookChildTabLabel w) s
 
     -- now set the focus
-    p <- notebookPageNum nb (fst $ PL.focus ts)
+    p <- notebookPageNum nb (fst $ PL._focus ts)
     maybe (return ()) (update nb notebookPage) p
 
     -- write the new status
--- yi-0.6.6.0-orig/src/library/Yi/UI/TabBar.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/UI/TabBar.hs	2013-04-02 00:33:10.921695849 +1100
@@ -22,7 +22,7 @@
 tabBarDescr :: Editor -> TabBarDescr
 tabBarDescr editor = 
     let prefix = commonNamePrefix editor
-        hintForTab tab = tabAbbrevTitle $ shortIdentString prefix $ findBufferWith (bufkey $ PL.focus (tab ^. tabWindowsA)) editor
+        hintForTab tab = tabAbbrevTitle $ shortIdentString prefix $ findBufferWith (bufkey $ PL._focus (tab ^. tabWindowsA)) editor
         tabDescr (tab,True) = TabDescr (hintForTab tab) True
         tabDescr (tab,False) = TabDescr (hintForTab tab) False
     in fmap tabDescr (PL.withFocus $ editor ^. tabsA)
--- yi-0.6.6.0-orig/src/library/Yi/UI/Vty.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/UI/Vty.hs	2013-04-02 00:33:10.921695849 +1100
@@ -46,14 +46,15 @@
              , cursor  :: !(Maybe (Int,Int)) -- ^ cursor point on the above
              }
 
-data UI = UI {  vty       :: Vty             -- ^ Vty
-             , scrsize    :: IORef (Int,Int) -- ^ screen size
-             , uiThread   :: ThreadId
-             , uiEnd      :: MVar ()
-             , uiRefresh  :: MVar ()
-             , uiEditor   :: IORef Editor    -- ^ Copy of the editor state, local to the UI, used to show stuff when the window is resized.
-             , config     :: Config
-             , oAttrs     :: TerminalAttributes
+data UI = UI {  vty            :: Vty             -- ^ Vty
+             , scrsize         :: IORef (Int,Int) -- ^ screen size
+             , uiThread        :: ThreadId
+             , uiEndInputLoop  :: MVar ()
+             , uiEndRenderLoop :: MVar ()
+             , uiEditor        :: IORef Editor    -- ^ Copy of the editor state, local to the UI, used to show stuff when the window is resized.
+             , uiDirty         :: MVar ()         -- ^ used to trigger redraw in renderLoop
+             , config          :: Config
+             , oAttrs          :: TerminalAttributes
              }
 
 mkUI :: UI -> Common.UI
@@ -62,7 +63,7 @@
    Common.main           = main ui,
    Common.end            = end ui,
    Common.suspend        = raiseSignal sigTSTP,
-   Common.refresh        = refresh ui,
+   Common.refresh        = requestRefresh ui,
    Common.layout         = layout ui,
    Common.userForceRefresh = userForceRefresh ui
   }
@@ -81,51 +82,61 @@
           -- fork input-reading thread. important to block *thread* on getKey
           -- otherwise all threads will block waiting for input
           tid <- myThreadId
-          endUI <- newEmptyMVar
-          tuiRefresh <- newEmptyMVar
+          endInput <- newEmptyMVar
+          endRender <- newEmptyMVar
           editorRef <- newIORef editor
-          let result = UI v sz tid endUI tuiRefresh editorRef cfg oattr
+          dirty <- newEmptyMVar
+          let ui = UI v sz tid endInput endRender editorRef dirty cfg oattr
+
               -- | Action to read characters into a channel
-              getcLoop = maybe (getKey >>= ch >> getcLoop) (const (return ())) =<< tryTakeMVar endUI
+              inputLoop :: IO ()
+              inputLoop = tryTakeMVar endInput >>=
+                          maybe (getKey >>= ch >> inputLoop)
+                                (const $ return ())
 
               -- | Read a key. UIs need to define a method for getting events.
+              getKey :: IO Yi.Event.Event
               getKey = do 
                 event <- Vty.next_event v
                 case event of 
                   (EvResize x y) -> do
                       logPutStrLn $ "UI: EvResize: " ++ show (x,y)
                       writeIORef sz (y,x)
-                      outCh [makeAction (layoutAction result :: YiM ())] 
+                      outCh [makeAction (layoutAction ui :: YiM ())]
                       -- since any action will force a refresh, return () is probably 
-                      -- sufficient instead of "layoutAction result"
+                      -- sufficient instead of "layoutAction ui"
                       getKey
                   _ -> return (fromVtyEvent event)
-          discard $ forkIO getcLoop
-          return (mkUI result)
 
+              renderLoop :: IO ()
+              renderLoop = do
+                takeMVar dirty
+                tryTakeMVar endRender >>=
+                  maybe (do logPutStrLn "time to render"
+                            handle (\(except :: IOException) -> do
+                                       logPutStrLn "refresh crashed with IO Error"
+                                       logError $ show except)
+                                   (readIORef editorRef >>= refresh ui >> renderLoop))
+                        (const $ return ())
+
+          discard $ forkIO inputLoop
+          discard $ forkIO renderLoop
+
+          return (mkUI ui)
+
+-- Is there something else to do here?
+-- Previous version said "block on MVar forever" in rather obfuscated way
 main :: UI -> IO ()
-main ui = do
-  let
-      -- | When the editor state isn't being modified, refresh, then wait for
-      -- it to be modified again.
-      refreshLoop :: IO ()
-      refreshLoop = forever $ do
-                      logPutStrLn "waiting for refresh"
-                      takeMVar (uiRefresh ui)
-                      handle (\(except :: IOException) -> do
-                                 logPutStrLn "refresh crashed with IO Error"
-                                 logError $ show $ except)
-                             (readRef (uiEditor ui) >>= refresh ui >> return ())
-  logPutStrLn "refreshLoop started"
-  refreshLoop
+main _ui = forever $ threadDelay 1000000
 
 -- | Clean up and go home
 end :: UI -> Bool -> IO ()
-end i reallyQuit = do  
-  discard $ tryPutMVar (uiEnd i) ()
-  Vty.shutdown (vty i)
-  setTerminalAttributes stdInput (oAttrs i) Immediately
-  when reallyQuit $ throwTo (uiThread i) ExitSuccess
+end ui reallyQuit = do
+  Vty.shutdown (vty ui)
+  setTerminalAttributes stdInput (oAttrs ui) Immediately
+  discard $ tryPutMVar (uiEndInputLoop ui) ()
+  discard $ tryPutMVar (uiEndRenderLoop ui) ()
+  when reallyQuit $ throwTo (uiThread ui) ExitSuccess
   return ()
 
 fromVtyEvent :: Vty.Event -> Yi.Event.Event
@@ -174,17 +185,20 @@
       niceCmd = arrangeItems cmd cols (maxStatusHeight e)
       cmdHeight = length niceCmd
       ws' = applyHeights (computeHeights (rows - tabBarHeight - cmdHeight + 1) ws) ws
-      ws'' = fmap (apply . discardOldRegion) ws'
       discardOldRegion w = w { winRegion = emptyRegion }
                            -- Discard this field, otherwise we keep retaining reference to
                            -- old Window objects (leak)
-      apply win = win {
-          winRegion   = getRegionImpl win (configUI $ config ui) e cols (height win)
-          --
-         ,actualLines = windowLinesDisp win (configUI $ config ui) e cols (height win) 
-        }
 
+  let apply :: Window -> IO Window
+      apply win = do
+        let uiconfig = configUI $ config ui
+        newWinRegion <- return $! getRegionImpl win uiconfig e cols (height win)
+        newActualLines <- return $! windowLinesDisp win uiconfig e cols (height win)
+        return $! win { winRegion = newWinRegion, actualLines = newActualLines }
+
+  ws'' <- mapM (apply . discardOldRegion) ws'
   return $ windowsA ^= ws'' $ e
+  -- return $ windowsA ^= forcePL ws'' $ e
 
 -- Do Vty layout inside the Yi event loop
 layoutAction :: (MonadEditor m, MonadIO m) => UI -> m ()
@@ -192,6 +206,11 @@
     withEditor . put =<< io . layout ui =<< withEditor get
     withEditor $ mapM_ (flip withWindowE snapInsB) =<< getA windowsA
 
+requestRefresh :: UI -> Editor -> IO ()
+requestRefresh ui e = do
+  writeIORef (uiEditor ui) e
+  discard $ tryPutMVar (uiDirty ui) ()
+
 -- | Redraw the entire terminal from the UI.
 refresh :: UI -> Editor -> IO ()
 refresh ui e = do
@@ -216,8 +235,8 @@
                         <-> 
                         vert_cat (fmap formatCmdLine niceCmd)
                       )
-      ) { pic_cursor = case cursor (PL.focus renders) of
-                        Just (y,x) -> Cursor (toEnum x) (toEnum $ y + PL.focus startXs) 
+      ) { pic_cursor = case cursor (PL._focus renders) of
+                        Just (y,x) -> Cursor (toEnum x) (toEnum $ y + PL._focus startXs)
                         -- Add the position of the window to the position of the cursor
                         Nothing -> NoCursor
                         -- This case can occur if the user resizes the window. 
@@ -262,9 +281,9 @@
 
 getRegionImpl :: Window -> UIConfig -> Editor -> Int -> Int -> Region
 getRegionImpl win cfg e w h = region
-  where (_,region,_) = drawWindow cfg e (error "focus must not be used")  win w h
+  where (_,region,_) = drawWindow cfg e (error "focus must not be used") win w h
 
--- | Return a rendered wiew of the window.
+-- | Return a rendered view of the window.
 renderWindow :: UIConfig -> Editor -> Int -> (Window, Bool) -> Rendered
 renderWindow cfg e width (win,hasFocus) =
     let (rendered,_,_) = drawWindow cfg e hasFocus win width (height win)
--- yi-0.6.6.0-orig/src/library/Yi/Buffer/Region.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/Buffer/Region.hs	2012-12-18 20:09:33.200838425 +1100
@@ -1,4 +1,4 @@
-{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE CPP, DeriveDataTypeable #-}
 -- Copyright (C) 2008 JP Bernardy
 
 -- | This module defines buffer operation on regions
@@ -61,11 +61,19 @@
     text <- readRegionB region
     let diffs = getGroupedDiff text text'
     moveTo (regionStart region)
+#if MIN_VERSION_Diff(0,2,0)
+    forM_ diffs $ \d -> do
+        case d of
+            First str -> deleteN $ length str
+            Both str1 str2 -> rightN $ ((length str1) + (length str2))
+            Second str -> insertN str
+#else
     forM_ diffs $ \(d,str) -> do
         case d of
             F -> deleteN $ length str
             B -> rightN $ length str
             S -> insertN str
+#endif
 
 mapRegionB :: Region -> (Char -> Char) -> BufferM ()
 mapRegionB r f = do
