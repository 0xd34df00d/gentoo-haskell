--- yi-0.6.6.0-orig/yi.cabal	2012-07-21 16:15:35.000000000 +1000
+++ yi-0.6.6.0/yi.cabal	2013-04-02 00:59:16.338739513 +1100
@@ -205,12 +205,12 @@
     Parser.Incremental
 
   build-depends:
-    Cabal >= 1.10 && < 1.15,
-    Diff >=0.1 && <0.2,
+    Cabal >= 1.10 && < 1.17,
+    Diff >=0.1 && <0.3,
     array, containers,  directory, process, old-locale,
     base >= 4 && < 5,
-    binary == 0.5.*,
-    bytestring >= 0.9.1 && < 0.9.3,
+    binary >= 0.5,
+    bytestring >= 0.9.1 && < 0.11,
     cautious-file >= 1.0.1,
     concrete-typerep == 0.1.*,
     derive >=2.4 && <2.7,
@@ -222,21 +222,21 @@
     filepath>=1.1 && <1.4,
     fingertree >= 0 && <0.1,
     ghc-paths ==0.1.*,
-    hashable < 1.2,
+    hashable < 1.3,
     hint > 0.3.1,
     mtl >= 0.1.0.1,
-    pointedlist >= 0.3.5 && <0.4,
+    pointedlist >= 0.4 && <0.6,
     pureMD5 >= 0.2.3,
     random,
     regex-base ==0.93.*,
     regex-tdfa == 1.1.*,
     rosezipper >= 0.1 && < 0.3,
-    split == 0.1.*,
-    template-haskell >= 2.4 && < 2.8,
+    split >= 0.1 && < 0.3,
+    template-haskell >= 2.4 && < 2.9,
     time >= 1.1 && < 1.5,
     utf8-string >= 0.3.1,
     uniplate,
-    unix-compat >=0.1 && <0.4,
+    unix-compat >=0.1 && <0.5,
     unordered-containers >= 0.1.3 && < 0.3
 
   build-tools: alex >= 3
@@ -312,7 +312,7 @@
     exposed-modules:
       Yi.UI.Vty
     build-depends:
-      unix-compat >=0.1 && <0.4,
+      unix-compat >=0.1 && <0.5,
       vty >= 4.7.0.0 && <5
     cpp-options: -DFRONTEND_VTY
 
--- yi-0.6.6.0-orig/src/library/Yi/Buffer/Region.hs	2012-07-21 16:15:17.000000000 +1000
+++ yi-0.6.6.0/src/library/Yi/Buffer/Region.hs	2012-12-18 20:09:33.200838425 +1100
@@ -1,4 +1,4 @@
-{-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE CPP, DeriveDataTypeable #-}
 -- Copyright (C) 2008 JP Bernardy
 
 -- | This module defines buffer operation on regions
@@ -61,11 +61,19 @@
     text <- readRegionB region
     let diffs = getGroupedDiff text text'
     moveTo (regionStart region)
+#if MIN_VERSION_Diff(0,2,0)
+    forM_ diffs $ \d -> do
+        case d of
+            First str -> deleteN $ length str
+            Both str1 str2 -> rightN $ ((length str1) + (length str2))
+            Second str -> insertN str
+#else
     forM_ diffs $ \(d,str) -> do
         case d of
             F -> deleteN $ length str
             B -> rightN $ length str
             S -> insertN str
+#endif
 
 mapRegionB :: Region -> (Char -> Char) -> BufferM ()
 mapRegionB r f = do
